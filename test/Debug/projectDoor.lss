
projectDoor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000372  00800060  00003f96  0000402a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  008003d2  008003d2  0000439c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000043f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000060b9  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001454  00000000  00000000  0000a955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003260  00000000  00000000  0000bda9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d0c  00000000  00000000  0000f00c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e05  00000000  00000000  0000fd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032e6  00000000  00000000  00010b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  00013e03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__vector_7>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_10>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_16>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	dc 0f       	add	r29, r28
      56:	f7 0f       	add	r31, r23
      58:	dc 0f       	add	r29, r28
      5a:	75 10       	cpse	r7, r5
      5c:	dc 0f       	add	r29, r28
      5e:	15 10       	cpse	r1, r5
      60:	15 10       	cpse	r1, r5
      62:	9f 10       	cpse	r9, r15
      64:	9f 10       	cpse	r9, r15
      66:	9f 10       	cpse	r9, r15
      68:	9f 10       	cpse	r9, r15
      6a:	4c 10       	cpse	r4, r12
      6c:	dc 0f       	add	r29, r28
      6e:	9f 10       	cpse	r9, r15
      70:	9f 10       	cpse	r9, r15
      72:	9f 10       	cpse	r9, r15
      74:	9f 10       	cpse	r9, r15
      76:	9f 10       	cpse	r9, r15
      78:	9f 10       	cpse	r9, r15
      7a:	9f 10       	cpse	r9, r15
      7c:	9f 10       	cpse	r9, r15
      7e:	9f 10       	cpse	r9, r15
      80:	9f 10       	cpse	r9, r15
      82:	9f 10       	cpse	r9, r15
      84:	9f 10       	cpse	r9, r15
      86:	9f 10       	cpse	r9, r15
      88:	9f 10       	cpse	r9, r15
      8a:	9f 10       	cpse	r9, r15
      8c:	dc 0f       	add	r29, r28

0000008e <__trampolines_end>:
      8e:	6e 61       	ori	r22, 0x1E	; 30
      90:	6e 00       	.word	0x006e	; ????

00000092 <__c.2332>:
      92:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     102:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     112:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     122:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     132:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     142:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     152:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     162:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     172:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     182:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf e5       	ldi	r28, 0x5F	; 95
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	a0 e6       	ldi	r26, 0x60	; 96
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	e6 e9       	ldi	r30, 0x96	; 150
     1a4:	ff e3       	ldi	r31, 0x3F	; 63
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a2 3d       	cpi	r26, 0xD2	; 210
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	24 e0       	ldi	r18, 0x04	; 4
     1b4:	a2 ed       	ldi	r26, 0xD2	; 210
     1b6:	b3 e0       	ldi	r27, 0x03	; 3
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a9 34       	cpi	r26, 0x49	; 73
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
     1c6:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <get_ADC_value>:
unsigned int adc_value;

//*********–≤–µ—Ä–Ω–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ê–¶–ü ***********
unsigned int get_ADC_value(){
	return adc_value;
}
     1ce:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <adc_value>
     1d2:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <adc_value+0x1>
     1d6:	08 95       	ret

000001d8 <__vector_16>:
char high_adc=0,low_adc=0;

ISR(ADC_vect)
{
     1d8:	1f 92       	push	r1
     1da:	0f 92       	push	r0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	0f 92       	push	r0
     1e0:	11 24       	eor	r1, r1
     1e2:	2f 93       	push	r18
     1e4:	8f 93       	push	r24
     1e6:	9f 93       	push	r25
	low_adc = ADCL;
     1e8:	24 b1       	in	r18, 0x04	; 4
     1ea:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <__data_end>
	high_adc = ADCH;//–í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞ ADC –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π, –∏–Ω–∞—á–µ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
     1ee:	85 b1       	in	r24, 0x05	; 5
     1f0:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <high_adc>
	adc_value = high_adc * 256 + low_adc;
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	98 2f       	mov	r25, r24
     1f8:	88 27       	eor	r24, r24
     1fa:	82 0f       	add	r24, r18
     1fc:	91 1d       	adc	r25, r1
     1fe:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <adc_value+0x1>
     202:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <adc_value>
}
     206:	9f 91       	pop	r25
     208:	8f 91       	pop	r24
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <ADC_Init>:

//*********–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ê–¶–ü***********
void ADC_Init(void)
{
	ADCSRA |= (1<<ADEN) // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ê–¶–ü
     216:	86 b1       	in	r24, 0x06	; 6
     218:	8f 6e       	ori	r24, 0xEF	; 239
     21a:	86 b9       	out	0x06, r24	; 6
	|(1<<ADSC)//–ó–∞–ø—É—Å–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
	|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)//–î–µ–ª–∏—Ç–µ–ª—å 128 = 64 –∫–ì—Ü
	|(1<<ADIE)//–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ê–¶–ü
	|(1<<ADATE);//–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—Ü –µ—Å–ª–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ SFIOR ADTS2-ADTS0 =0 –¥–ª—è –∞—Ç–º–µ–≥–∞16 
 ADMUX |= (1<<REFS1)|(1<<REFS0); //–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ò—Å—Ç–æ—á–Ω–∏–∫ –û–ù 2,56–≤, –≤—Ö–æ–¥ ADC2
     21c:	87 b1       	in	r24, 0x07	; 7
     21e:	80 6c       	ori	r24, 0xC0	; 192
     220:	87 b9       	out	0x07, r24	; 7
     222:	08 95       	ret

00000224 <closeLock>:
	  EEPROM_write_word(820, timeCloseDoor);
  }
 
//*************ÛÒÚ‡ÌÓ‚Í‡ ‚ÂÏÂÌË Á‡Í˚ÚËˇ ‰‚ÂË****************
void setTimerCloseDoor(unsigned int timeClose){
	timeCloseDoor = timeClose/5;
     224:	aa 9a       	sbi	0x15, 2	; 21
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	82 e5       	ldi	r24, 0x52	; 82
     22a:	97 e0       	ldi	r25, 0x07	; 7
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	80 40       	sbci	r24, 0x00	; 0
     230:	90 40       	sbci	r25, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <closeLock+0x8>
     234:	00 c0       	rjmp	.+0      	; 0x236 <closeLock+0x12>
     236:	00 00       	nop
     238:	aa 98       	cbi	0x15, 2	; 21
     23a:	08 95       	ret

0000023c <openLock>:
     23c:	ab 9a       	sbi	0x15, 3	; 21
     23e:	2f ef       	ldi	r18, 0xFF	; 255
     240:	82 e5       	ldi	r24, 0x52	; 82
     242:	97 e0       	ldi	r25, 0x07	; 7
     244:	21 50       	subi	r18, 0x01	; 1
     246:	80 40       	sbci	r24, 0x00	; 0
     248:	90 40       	sbci	r25, 0x00	; 0
     24a:	e1 f7       	brne	.-8      	; 0x244 <openLock+0x8>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <openLock+0x12>
     24e:	00 00       	nop
     250:	ab 98       	cbi	0x15, 3	; 21
     252:	08 95       	ret

00000254 <workInnerButton>:
     254:	9e 99       	sbic	0x13, 6	; 19
     256:	0b c0       	rjmp	.+22     	; 0x26e <workInnerButton+0x1a>
     258:	ce 9b       	sbis	0x19, 6	; 25
     25a:	09 c0       	rjmp	.+18     	; 0x26e <workInnerButton+0x1a>
     25c:	9e 9b       	sbis	0x13, 6	; 19
     25e:	fe cf       	rjmp	.-4      	; 0x25c <workInnerButton+0x8>
     260:	cf 99       	sbic	0x19, 7	; 25
     262:	03 c0       	rjmp	.+6      	; 0x26a <workInnerButton+0x16>
     264:	0e 94 1e 01 	call	0x23c	; 0x23c <openLock>
     268:	08 95       	ret
     26a:	0e 94 12 01 	call	0x224	; 0x224 <closeLock>
     26e:	08 95       	ret

00000270 <checkLock>:
     270:	cf 99       	sbic	0x19, 7	; 25
     272:	09 c0       	rjmp	.+18     	; 0x286 <checkLock+0x16>
     274:	48 e6       	ldi	r20, 0x68	; 104
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     280:	ac 98       	cbi	0x15, 4	; 21
     282:	ad 9a       	sbi	0x15, 5	; 21
     284:	08 95       	ret
     286:	45 e7       	ldi	r20, 0x75	; 117
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     292:	ad 98       	cbi	0x15, 5	; 21
     294:	ac 9a       	sbi	0x15, 4	; 21
     296:	08 95       	ret

00000298 <checkDoor>:
     298:	ce 99       	sbic	0x19, 6	; 25
     29a:	07 c0       	rjmp	.+14     	; 0x2aa <checkDoor+0x12>
     29c:	42 e8       	ldi	r20, 0x82	; 130
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     2a8:	08 95       	ret
     2aa:	40 e9       	ldi	r20, 0x90	; 144
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     2b6:	08 95       	ret

000002b8 <getStateTimerDoor>:
     2b8:	8a e3       	ldi	r24, 0x3A	; 58
     2ba:	93 e0       	ldi	r25, 0x03	; 3
     2bc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
     2c0:	08 95       	ret

000002c2 <doorTimerOn>:
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <doorTimerState>
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	8a e3       	ldi	r24, 0x3A	; 58
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
     2d2:	08 95       	ret

000002d4 <doorTimerOff>:
     2d4:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <doorTimerState>
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	8a e3       	ldi	r24, 0x3A	; 58
     2dc:	93 e0       	ldi	r25, 0x03	; 3
     2de:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
     2e2:	08 95       	ret

000002e4 <readValueTimerCloseDoor>:
     2e4:	84 e3       	ldi	r24, 0x34	; 52
     2e6:	93 e0       	ldi	r25, 0x03	; 3
     2e8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
     2ec:	08 95       	ret

000002ee <initParametrDoor>:
     2ee:	0e 94 72 01 	call	0x2e4	; 0x2e4 <readValueTimerCloseDoor>
     2f2:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <timeCloseDoor+0x1>
     2f6:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <timeCloseDoor>
     2fa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <getStateTimerDoor>
     2fe:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <doorTimerState>
     302:	08 95       	ret

00000304 <writeValueTimerCloseDoor>:
     304:	9c 01       	movw	r18, r24
     306:	ad ec       	ldi	r26, 0xCD	; 205
     308:	bc ec       	ldi	r27, 0xCC	; 204
     30a:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__umulhisi3>
     30e:	bc 01       	movw	r22, r24
     310:	76 95       	lsr	r23
     312:	67 95       	ror	r22
     314:	76 95       	lsr	r23
     316:	67 95       	ror	r22
     318:	70 93 e2 03 	sts	0x03E2, r23	; 0x8003e2 <timeCloseDoor+0x1>
     31c:	60 93 e1 03 	sts	0x03E1, r22	; 0x8003e1 <timeCloseDoor>
     320:	84 e3       	ldi	r24, 0x34	; 52
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write_word>
     328:	08 95       	ret

0000032a <closeDoorByTimer>:
	
}

//************«‡Í˚‚‡ÂÏ Á‡ÏÓÍ ÔÓ ËÒÚÂ˜ÂÌËË ‚ÂÏÂÌË*****************
void closeDoorByTimer(){ 
	if (is_closed_door){ //ÂÒÎË ‰‚Â¸ Á‡Í˚Ú‡
     32a:	ce 9b       	sbis	0x19, 6	; 25
     32c:	21 c0       	rjmp	.+66     	; 0x370 <closeDoorByTimer+0x46>
		if (is_closed_lock) //ÂÒÎË Á‡ÏÓÍ Á‡Í˚Ú
     32e:	cf 99       	sbic	0x19, 7	; 25
     330:	05 c0       	rjmp	.+10     	; 0x33c <closeDoorByTimer+0x12>
		setTimerCount(0);
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
     33a:	08 95       	ret
		else if (getTimerCount() >= timeCloseDoor){
     33c:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	20 91 e1 03 	lds	r18, 0x03E1	; 0x8003e1 <timeCloseDoor>
     346:	30 91 e2 03 	lds	r19, 0x03E2	; 0x8003e2 <timeCloseDoor+0x1>
     34a:	82 17       	cp	r24, r18
     34c:	93 07       	cpc	r25, r19
     34e:	a0 f0       	brcs	.+40     	; 0x378 <closeDoorByTimer+0x4e>
			rele_close_door_on; //ÔÓ‰‡ÂÏ ÒË„Ì‡Î Ì‡ Á‡Í˚ÚËÂ
     350:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     352:	2f ef       	ldi	r18, 0xFF	; 255
     354:	82 e5       	ldi	r24, 0x52	; 82
     356:	97 e0       	ldi	r25, 0x07	; 7
     358:	21 50       	subi	r18, 0x01	; 1
     35a:	80 40       	sbci	r24, 0x00	; 0
     35c:	90 40       	sbci	r25, 0x00	; 0
     35e:	e1 f7       	brne	.-8      	; 0x358 <closeDoorByTimer+0x2e>
     360:	00 c0       	rjmp	.+0      	; 0x362 <closeDoorByTimer+0x38>
     362:	00 00       	nop
			_delay_ms(300);
			rele_close_door_off; //ÒÌËÏ‡ÂÏ ÒË„Ì‡Î Á‡Í˚ÚËˇ
     364:	aa 98       	cbi	0x15, 2	; 21
			setTimerCount(0); //Ó·ÌÛÎˇÂÏ Ò˜ÂÚ˜ËÍ
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
     36e:	08 95       	ret
		}
	}else{
		setTimerCount(0); //Ó·ÌÛÎˇÂÏ Ò˜ÂÚ˜ËÍ
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
     378:	08 95       	ret

0000037a <workCloseOpenDoorGeneral>:
	}
}

//**********‡·ÓÚ‡ ‰‡Ú˜ËÍÓ‚ ‰‚ÂË Á‡ÏÍ‡ ‚ ˆÂÎÓÏ****************
void workCloseOpenDoorGeneral(){
	if (doorTimerState)
     37a:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <doorTimerState>
     37e:	81 11       	cpse	r24, r1
		closeDoorByTimer();
     380:	0e 94 95 01 	call	0x32a	; 0x32a <closeDoorByTimer>
	 checkDoor();
     384:	0e 94 4c 01 	call	0x298	; 0x298 <checkDoor>
	 checkLock();
     388:	0e 94 38 01 	call	0x270	; 0x270 <checkLock>
	 workInnerButton();
     38c:	0e 94 2a 01 	call	0x254	; 0x254 <workInnerButton>
     390:	08 95       	ret

00000392 <EEPROM_write>:
Ôªø#include "EEPROM.h"
//---------------------------------------
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	while(EECR & (1<<EEWE)) //–∂–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å –ø–∞–º—è—Ç—å—é
     392:	e1 99       	sbic	0x1c, 1	; 28
     394:	fe cf       	rjmp	.-4      	; 0x392 <EEPROM_write>
	{}
	EEAR = uiAddress; //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
     396:	9f bb       	out	0x1f, r25	; 31
     398:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //–ü–∏—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–≥–∏—Å—Ç—Ä
     39a:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //–†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø–∏—Å—å
     39c:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE); //–ü–∏—à–µ–º –±–∞–π—Ç –≤ –ø–∞–º—è—Ç—å
     39e:	e1 9a       	sbi	0x1c, 1	; 28
     3a0:	08 95       	ret

000003a2 <EEPROM_read>:
}
//---------------------------------------
unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
     3a2:	e1 99       	sbic	0x1c, 1	; 28
     3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <EEPROM_read>
	{} //–∂–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å –ø–∞–º—è—Ç—å—é
	EEAR = uiAddress; //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
     3a6:	9f bb       	out	0x1f, r25	; 31
     3a8:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //–ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
     3aa:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     3ac:	8d b3       	in	r24, 0x1d	; 29
}
     3ae:	08 95       	ret

000003b0 <EEPROM_write_word>:
//---------------------------------------

void EEPROM_write_word(unsigned int uiAddress, uint16_t ucData)
{
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	ec 01       	movw	r28, r24
     3b8:	17 2f       	mov	r17, r23
	EEPROM_write(uiAddress, (unsigned char) ucData);
     3ba:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
	unsigned char dt = ucData>>8;
	EEPROM_write(uiAddress+1, dt);
     3be:	61 2f       	mov	r22, r17
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	08 95       	ret

000003d0 <EEPROM_read_word>:

//---------------------------------------
uint16_t EEPROM_read_word(unsigned int uiAddress)
{
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	8c 01       	movw	r16, r24
	uint16_t dt = EEPROM_read(uiAddress+1)*256;
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
     3e0:	c8 2f       	mov	r28, r24
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
     3e4:	dc 2f       	mov	r29, r28
     3e6:	cc 27       	eor	r28, r28
	asm("nop");
     3e8:	00 00       	nop
	dt += EEPROM_read(uiAddress);
     3ea:	c8 01       	movw	r24, r16
     3ec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
	return dt;
}
     3f0:	9e 01       	movw	r18, r28
     3f2:	28 0f       	add	r18, r24
     3f4:	31 1d       	adc	r19, r1
     3f6:	c9 01       	movw	r24, r18
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <statePins>:
	//BUTTON_PORT & = ~(1<<BUTTON_PIN);
}

//****************ÒÓÒÚÓˇÌËÂ ÔËÌÓ‚*********************
char statePins(){
	if(!is_clk_down && !is_dt_down) //ÒÓÒÚÓˇÌËÂ ÔÓÍÓˇ 11
     402:	b4 9b       	sbis	0x16, 4	; 22
     404:	02 c0       	rjmp	.+4      	; 0x40a <statePins+0x8>
     406:	9f 99       	sbic	0x13, 7	; 19
     408:	0d c0       	rjmp	.+26     	; 0x424 <statePins+0x22>
		return 0x03;
	if(is_clk_down && is_dt_down) //00
     40a:	b4 99       	sbic	0x16, 4	; 22
     40c:	02 c0       	rjmp	.+4      	; 0x412 <statePins+0x10>
     40e:	9f 9b       	sbis	0x13, 7	; 19
     410:	0b c0       	rjmp	.+22     	; 0x428 <statePins+0x26>
		return 0;
	if(is_clk_down && !is_dt_down) //01
     412:	b4 99       	sbic	0x16, 4	; 22
     414:	02 c0       	rjmp	.+4      	; 0x41a <statePins+0x18>
     416:	9f 99       	sbic	0x13, 7	; 19
     418:	09 c0       	rjmp	.+18     	; 0x42c <statePins+0x2a>
		return 0x01;
	if(!is_clk_down && is_dt_down) //10
     41a:	b4 9b       	sbis	0x16, 4	; 22
     41c:	02 c0       	rjmp	.+4      	; 0x422 <statePins+0x20>
     41e:	9f 9b       	sbis	0x13, 7	; 19
     420:	07 c0       	rjmp	.+14     	; 0x430 <statePins+0x2e>
		return 0x02;
}
     422:	08 95       	ret
}

//****************ÒÓÒÚÓˇÌËÂ ÔËÌÓ‚*********************
char statePins(){
	if(!is_clk_down && !is_dt_down) //ÒÓÒÚÓˇÌËÂ ÔÓÍÓˇ 11
		return 0x03;
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	08 95       	ret
	if(is_clk_down && is_dt_down) //00
		return 0;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	08 95       	ret
	if(is_clk_down && !is_dt_down) //01
		return 0x01;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	08 95       	ret
	if(!is_clk_down && is_dt_down) //10
		return 0x02;
     430:	82 e0       	ldi	r24, 0x02	; 2
}
     432:	08 95       	ret

00000434 <timerOff>:
 
 //***********ÓÚÍÎ˛˜‡ÂÏ Ú‡ÈÏÂ ˝ÌÍÓ‰Â‡****************
 void timerOff(){
	 TCCR0 &= ~((1<<CS12)|(1<<CS10));
     434:	83 b7       	in	r24, 0x33	; 51
     436:	8a 7f       	andi	r24, 0xFA	; 250
     438:	83 bf       	out	0x33, r24	; 51
     43a:	08 95       	ret

0000043c <timerOn>:
 }
 
 //***************‚ÍÎ˛˜‡ÂÏ Ú‡ÈÏÂ ˝ÌÍÓ‰Â‡*****************
 void timerOn(){
	 TCCR0 |= (1<<CS12)|(1<<CS10);
     43c:	83 b7       	in	r24, 0x33	; 51
     43e:	85 60       	ori	r24, 0x05	; 5
     440:	83 bf       	out	0x33, r24	; 51
     442:	08 95       	ret

00000444 <timer_init>:
 }
 
//******************ËÌËˆË‡ÎËÁ‡ˆËˇ Ú‡ÈÏÂ‡***********************  
 void timer_init(void)
 {
 TCCR0 |= (1<<WGM01); // ÛÒÚ‡Ì‡‚ÎË‚‡ÂÏ ÂÊËÏ —“— (Ò·ÓÒ ÔÓ ÒÓ‚Ô‡‰ÂÌË˛)
     444:	83 b7       	in	r24, 0x33	; 51
     446:	88 60       	ori	r24, 0x08	; 8
     448:	83 bf       	out	0x33, r24	; 51
 TIMSK |= (1<<OCIE0); //‡ÁÂ¯ÂÌËÂ ÔÂ˚‚‡ÌËˇ Ò‡‚ÌÂÌËˇ ÒÓ‚Ô‡‰ÂÌËˇ ‚˚ıÓ‰‡ Ú‡ÈÏÂ‡/Ò˜ÂÚ˜ËÍ‡ 0
     44a:	89 b7       	in	r24, 0x39	; 57
     44c:	82 60       	ori	r24, 0x02	; 2
     44e:	89 bf       	out	0x39, r24	; 57
 OCR0 = 0b00010000; //Á‡ÔËÒ˚‚‡ÂÏ ‚ Â„ËÒÚ ˜ËÒÎÓ 16 ‰Îˇ Ò‡‚ÌÂÌËˇ.(2ms) 0b00010000
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	8c bf       	out	0x3c, r24	; 60
 TCCR0 |= (1<<CS12)|(1<<CS10);//ÛÒÚ‡ÌÓ‚ËÏ ‰ÂÎËÚÂÎ¸ Ì‡ 1024, ‚˚ÒÚ‡‚ËÏ ·ËÚ CS12 Ë CS10 ‚ 1. Ì‡ ˝ÚÓÚ ‰ÂÎËÚÂÎ¸ Ï˚ ÔÓ‰ÂÎËÏ 8000000
     454:	83 b7       	in	r24, 0x33	; 51
     456:	85 60       	ori	r24, 0x05	; 5
     458:	83 bf       	out	0x33, r24	; 51
     45a:	08 95       	ret

0000045c <putInQueue>:
char queueStateEncoder[10];// = {0,0,0,0,0,0,0,0,0,0}; // Ï‡ÒÒË‚ ÒÓÒÚÓˇÌËÈ
char flagPressButton = 0; //ÙÎ‡„ Ì‡Ê‡ÚÓÈ ÍÌÓÔÍË
	
//*********ÎÓÊËÏ ‰‡ÌÌ˚Â ‚ Ó˜ÂÂ‰¸ ***************
void putInQueue(char stateEnc){
	if(queueStateEncoder[lengthQueue-1] ) return; //ÂÒÎË ÔÂÂÔÓÎÌÂÌËÂ Ó˜ÂÂ‰Ë, ‚˚ıÓ‰ËÏ
     45c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <queueStateEncoder+0x9>
     460:	91 11       	cpse	r25, r1
     462:	19 c0       	rjmp	.+50     	; 0x496 <putInQueue+0x3a>
	for(char i = 0; i < lengthQueue; ++i){
		if(queueStateEncoder[i] == 0){ //Ì‡¯ÎË Ò‚Ó·Ó‰ÌÛ˛ ˇ˜ÂÈÍÛ
     464:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <queueStateEncoder>
     468:	99 23       	and	r25, r25
     46a:	49 f0       	breq	.+18     	; 0x47e <putInQueue+0x22>
     46c:	e5 ee       	ldi	r30, 0xE5	; 229
     46e:	f3 e0       	ldi	r31, 0x03	; 3
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	a9 01       	movw	r20, r18
     476:	91 91       	ld	r25, Z+
     478:	91 11       	cpse	r25, r1
     47a:	08 c0       	rjmp	.+16     	; 0x48c <putInQueue+0x30>
     47c:	02 c0       	rjmp	.+4      	; 0x482 <putInQueue+0x26>
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
			queueStateEncoder[i] = stateEnc; //ÔÓÎÓÊËÎË ‚ ÌÂÂ ‰‡ÌÌ˚Â
     482:	fa 01       	movw	r30, r20
     484:	ec 51       	subi	r30, 0x1C	; 28
     486:	fc 4f       	sbci	r31, 0xFC	; 252
     488:	80 83       	st	Z, r24
			return;
     48a:	08 95       	ret
     48c:	2f 5f       	subi	r18, 0xFF	; 255
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
char flagPressButton = 0; //ÙÎ‡„ Ì‡Ê‡ÚÓÈ ÍÌÓÔÍË
	
//*********ÎÓÊËÏ ‰‡ÌÌ˚Â ‚ Ó˜ÂÂ‰¸ ***************
void putInQueue(char stateEnc){
	if(queueStateEncoder[lengthQueue-1] ) return; //ÂÒÎË ÔÂÂÔÓÎÌÂÌËÂ Ó˜ÂÂ‰Ë, ‚˚ıÓ‰ËÏ
	for(char i = 0; i < lengthQueue; ++i){
     490:	2a 30       	cpi	r18, 0x0A	; 10
     492:	31 05       	cpc	r19, r1
     494:	79 f7       	brne	.-34     	; 0x474 <putInQueue+0x18>
     496:	08 95       	ret

00000498 <takeFromTheQueue>:
	}
}

//********ËÁ‚ÎÂÍ‡ÂÏ ‰‡ÌÌ˚Â Ò Ó˜ÂÂ‰Ë*************
char takeFromTheQueue(){
	if(queueStateEncoder[0] == 0) return NO_ACTION;
     498:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <queueStateEncoder>
     49c:	88 23       	and	r24, r24
     49e:	a9 f0       	breq	.+42     	; 0x4ca <takeFromTheQueue+0x32>
     4a0:	e4 ee       	ldi	r30, 0xE4	; 228
     4a2:	f3 e0       	ldi	r31, 0x03	; 3
     4a4:	2e ee       	ldi	r18, 0xEE	; 238
     4a6:	33 e0       	ldi	r19, 0x03	; 3
	char result = queueStateEncoder[0]; //Á‡·Ë‡ÂÏ ÔÂ‚Ó„Ó Ò Ó˜ÂÂ‰Ë 
	for(char i = 0; i < lengthQueue; ++i){
		if(queueStateEncoder[i] == 0) continue;
     4a8:	90 81       	ld	r25, Z
     4aa:	99 23       	and	r25, r25
     4ac:	51 f0       	breq	.+20     	; 0x4c2 <takeFromTheQueue+0x2a>
		if(queueStateEncoder[i] != lengthQueue - 1){ //ÂÒÎË ˝ÚÓ ÌÂ ÔÓÒÎÂ‰ÌËÈ ˝ÎÂÏÂÌÚ
     4ae:	99 30       	cpi	r25, 0x09	; 9
     4b0:	39 f0       	breq	.+14     	; 0x4c0 <takeFromTheQueue+0x28>
			if(queueStateEncoder[i+1] ) //ÂÒÎË ÒÎÂ‰Û˛˘ËÈ ˝ÎÂÏÂÌÚ ÌÂ 0
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	99 23       	and	r25, r25
     4b6:	11 f0       	breq	.+4      	; 0x4bc <takeFromTheQueue+0x24>
				queueStateEncoder[i] = queueStateEncoder[i+1]; //ÒÎÂ‰Û˛˘ËÈ ˝ÎÂÏÂÌÚ ÒÚ‡∏Ú ÚÂÍÛ˘ËÏ
     4b8:	90 83       	st	Z, r25
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <takeFromTheQueue+0x2a>
			else	//ÒÎÂ‰Û˛˘ËÈ ˝ÎÂÏÂÌÚ =0
				queueStateEncoder[i] = 0;
     4bc:	10 82       	st	Z, r1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <takeFromTheQueue+0x2a>
		}else queueStateEncoder[i] = 0; //ÂÒÎË ÔÓÒÎÂ‰ÌËÈ ˝ÎÂÏÂÌÚ
     4c0:	10 82       	st	Z, r1
     4c2:	31 96       	adiw	r30, 0x01	; 1

//********ËÁ‚ÎÂÍ‡ÂÏ ‰‡ÌÌ˚Â Ò Ó˜ÂÂ‰Ë*************
char takeFromTheQueue(){
	if(queueStateEncoder[0] == 0) return NO_ACTION;
	char result = queueStateEncoder[0]; //Á‡·Ë‡ÂÏ ÔÂ‚Ó„Ó Ò Ó˜ÂÂ‰Ë 
	for(char i = 0; i < lengthQueue; ++i){
     4c4:	e2 17       	cp	r30, r18
     4c6:	f3 07       	cpc	r31, r19
     4c8:	79 f7       	brne	.-34     	; 0x4a8 <takeFromTheQueue+0x10>
			else	//ÒÎÂ‰Û˛˘ËÈ ˝ÎÂÏÂÌÚ =0
				queueStateEncoder[i] = 0;
		}else queueStateEncoder[i] = 0; //ÂÒÎË ÔÓÒÎÂ‰ÌËÈ ˝ÎÂÏÂÌÚ
	}
	return result;
}
     4ca:	08 95       	ret

000004cc <__vector_10>:
 
 //***********************Ó·‡·ÓÚ˜ËÍ ÔÂ˚‚‡ÌËÈ ÓÚ Ú‡ÈÏÂ‡****************
ISR (TIMER0_COMP_vect)
{ 
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	cf 93       	push	r28
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
	if(is_button_encoder_pres){  //ÍÓ„‰‡ Ì‡Ê‡Ú‡ ÍÌÓÔÍ‡
     4f0:	cd 99       	sbic	0x19, 5	; 25
     4f2:	10 c0       	rjmp	.+32     	; 0x514 <__vector_10+0x48>
		flagPressButton = 1; //ÙÎ‡„ ‚ 1
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <flagPressButton>
		if(countTic < 110) //˜ÚÓ ·˚ ÌÂ·˚ÎÓ ÔÂÂÔÓÎÌÂÌËˇ Ò˜ÂÚ˜ËÍ‡ ÔË Á‡ÍÎËÌË‚‡ÌËË ÍÌÓÔÍË
     4fa:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <countTic>
     4fe:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <countTic+0x1>
     502:	8e 36       	cpi	r24, 0x6E	; 110
     504:	91 05       	cpc	r25, r1
     506:	50 f4       	brcc	.+20     	; 0x51c <__vector_10+0x50>
			++countTic;  //Ò˜ÂÚ˜ËÍ ‚ÍÎ˛˜ÂÌ
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <countTic+0x1>
     50e:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <countTic>
     512:	04 c0       	rjmp	.+8      	; 0x51c <__vector_10+0x50>
	}
	if(flagPressButton && !is_button_encoder_pres){ //ÍÌÓÔÍ‡ ÓÚÔÛ˘ÂÌ‡ Ë ÙÎ‡„ ÒÚÓËÚ
     514:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <flagPressButton>
     518:	88 23       	and	r24, r24
     51a:	b1 f0       	breq	.+44     	; 0x548 <__vector_10+0x7c>
     51c:	cd 9b       	sbis	0x19, 5	; 25
     51e:	14 c0       	rjmp	.+40     	; 0x548 <__vector_10+0x7c>
		//ÂÒÎË Ì‡Ê‡ÚËÂ ·ÓÎÂÂ 200ÏÒ ÚÓ ‰ÓÎ„ÓÂ Ì‡Ê‡ÚËÂ
		(countTic > 100)? putInQueue(LONG_PRESS_BUTTON):putInQueue(PRESS_BUTTON);
     520:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <countTic>
     524:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <countTic+0x1>
     528:	85 36       	cpi	r24, 0x65	; 101
     52a:	91 05       	cpc	r25, r1
     52c:	20 f0       	brcs	.+8      	; 0x536 <__vector_10+0x6a>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	0e 94 2e 02 	call	0x45c	; 0x45c <putInQueue>
     534:	03 c0       	rjmp	.+6      	; 0x53c <__vector_10+0x70>
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	0e 94 2e 02 	call	0x45c	; 0x45c <putInQueue>
		countTic = 0;
     53c:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <countTic+0x1>
     540:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <countTic>
		flagPressButton = 0;
     544:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <flagPressButton>
	}
	
	static unsigned char new_state=0;
	static unsigned char old_state=0;
	
	new_state = statePins();
     548:	0e 94 01 02 	call	0x402	; 0x402 <statePins>
     54c:	c8 2f       	mov	r28, r24
     54e:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <new_state.2238>
	
	switch(old_state | new_state) //ÂÒÎË ‡ÒÍÓÏÂÌÚËÓ‚‡Ú¸ ·Û‰ÛÚ ÔÓ +4 Á‡ ÚËÍ
     552:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <old_state.2239>
     556:	8c 2b       	or	r24, r28
     558:	87 30       	cpi	r24, 0x07	; 7
     55a:	19 f0       	breq	.+6      	; 0x562 <__vector_10+0x96>
     55c:	8b 30       	cpi	r24, 0x0B	; 11
     55e:	29 f0       	breq	.+10     	; 0x56a <__vector_10+0x9e>
     560:	07 c0       	rjmp	.+14     	; 0x570 <__vector_10+0xa4>
	{
		case 0x07: //case 0x0e: case 0x08: case 0x01:
		putInQueue(ROTATE_LEFT);
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 2e 02 	call	0x45c	; 0x45c <putInQueue>
		break;
     568:	03 c0       	rjmp	.+6      	; 0x570 <__vector_10+0xa4>
		case 0x0b: //case 0x04: case 0x0d: case 0x02:
		putInQueue(ROTATE_RIGHT);
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	0e 94 2e 02 	call	0x45c	; 0x45c <putInQueue>
		break;
	}
	old_state = new_state << 2;
     570:	cc 0f       	add	r28, r28
     572:	cc 0f       	add	r28, r28
     574:	c0 93 d4 03 	sts	0x03D4, r28	; 0x8003d4 <old_state.2239>
}
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	cf 91       	pop	r28
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <getStateEncoder>:

//****************‚ÓÁ‚‡˘‡ÂÏ ÒÚ‡ÚÛÒ ÂÌÍÓ‰Â‡ ****************
 char getStateEncoder(){
	return takeFromTheQueue();
     59c:	0e 94 4c 02 	call	0x498	; 0x498 <takeFromTheQueue>
 }
     5a0:	08 95       	ret

000005a2 <getPressButtonEncoder>:

//**************ÒÓÒÚÓˇÌËÂ ÍÌÓÔÍË ˝ÌÍÓ‰Â‡**********************-
char getPressButtonEncoder(){
if(is_button_encoder_pres)
     5a2:	89 b3       	in	r24, 0x19	; 25
     5a4:	85 fb       	bst	r24, 5
     5a6:	88 27       	eor	r24, r24
     5a8:	80 f9       	bld	r24, 0
	return 1;
else 
	return 0;	
}
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	89 27       	eor	r24, r25
     5ae:	08 95       	ret

000005b0 <initEncoder>:

//***********ËÌËˆË‡ÎËÁ‡ˆËˇ ‡·ÓÚ˚ Ò ˝ÌÍÓ‰ÂÓÏ***************
void initEncoder(){
	timer_init();
     5b0:	0e 94 22 02 	call	0x444	; 0x444 <timer_init>
	timerOff(); //Ú‡ÈÏÂ ‚˚ÍÎ˛˜‡ÂÏ
     5b4:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
     5b8:	08 95       	ret

000005ba <port_ini>:
	4 - ËÍ ‰‡Ú˜ËÍ. in 0
	5 - BUTTON ˝ÌÍÓ‰Â‡ in 1 / ÂÁÂ‚.K3 out 0
	6 - ÍÓÌˆÂ‚ÓÈ ‰‚ÂË. in 1
	7 - ÍÓÌˆÂ‚ÓÈ Á‡ÏÍ‡. in 1
	*/
	DDRA =  0b00001000;
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b11100000;
     5be:	80 ee       	ldi	r24, 0xE0	; 224
     5c0:	8b bb       	out	0x1b, r24	; 27
	0,1,2 - ·‡Î‡ÌÒË. out 0
	3 - ÍÌÓÔÍ‡ CHARGE. in 1
	4 - CLK ˝ÌÍÓ‰Â‡ in 1 /  ÂÁÂ‚ K1. out 0
	5,6,7 - ‰Îˇ ÔÓ„‡ÏËÓ‚‡ÌËˇ. in 0
	*/
	DDRB =  0b00000111;
     5c2:	87 e0       	ldi	r24, 0x07	; 7
     5c4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00011000;
     5c6:	88 e1       	ldi	r24, 0x18	; 24
     5c8:	88 bb       	out	0x18, r24	; 24
	2,3 - ÂÎÂ Á‡ÏÍ‡ ‰‚ÂË. out 0
	4,5 - Ò‚ÂÚÓ‰ËÓ‰˚ ÍÌÓÔÍË out 0
	6 - ÍÌÓÔÍ‡ ‚ÌÛÚË. in 1
	7 - DT ˝ÌÍÓ‰Â‡ in 1 / ÂÁÂ‚.K1 out 0
	*/
	DDRC =  0b00111111;
     5ca:	8f e3       	ldi	r24, 0x3F	; 63
     5cc:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b11000000;
     5ce:	80 ec       	ldi	r24, 0xC0	; 192
     5d0:	85 bb       	out	0x15, r24	; 21
	2,3,4 - ÌÂ Á‡‰ÂÈÒÚ‚Ó‚‡Ì˚. out 0
	5 - RST SIM800. out 0
	6 - RING SIM800. out 0
	7 - DTR SIM800. out 0
	*/
	DDRD =  0b11111110;
     5d2:	8e ef       	ldi	r24, 0xFE	; 254
     5d4:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000011;
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	82 bb       	out	0x12, r24	; 18
     5da:	08 95       	ret

000005dc <main>:
}

//-------------------------------------------------------
int main(void)
{
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	2a 97       	sbiw	r28, 0x0a	; 10
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	2f ef       	ldi	r18, 0xFF	; 255
     5f2:	84 e3       	ldi	r24, 0x34	; 52
     5f4:	9c e0       	ldi	r25, 0x0C	; 12
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	80 40       	sbci	r24, 0x00	; 0
     5fa:	90 40       	sbci	r25, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <main+0x1a>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x24>
     600:	00 00       	nop
	_delay_ms(500);
	port_ini(); //»ÌËˆË‡ÎËÁËÛÂÏ ÔÓÚ˚
     602:	0e 94 dd 02 	call	0x5ba	; 0x5ba <port_ini>
	I2C_Init();//ËÌËˆË‡ÎËÁËÛÂÏ TWI
     606:	0e 94 9b 13 	call	0x2736	; 0x2736 <I2C_Init>
	display_128x64_Init(); // ËÌËˆË‡ÎËÁ‡ˆËˇ OLED
     60a:	0e 94 03 12 	call	0x2406	; 0x2406 <display_128x64_Init>
	USART_Init (16);//57600
     60e:	80 e1       	ldi	r24, 0x10	; 16
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 ae 13 	call	0x275c	; 0x275c <USART_Init>
	initFingerScaner(); //ËÌËˆË‡ÎËÁ‡ˆËˇ ÒÍ‡ÌÂ‡
     616:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <initFingerScaner>
	displayClear();
     61a:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	timer_ini(); //»ÌËˆË‡ÎËÁËÛÂÏ Ú‡ÈÏÂ
     61e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <timer_ini>
	ADC_Init(); //»ÌËˆË‡ÎËÁËÛÂÏ ¿÷œ
     622:	0e 94 0b 01 	call	0x216	; 0x216 <ADC_Init>
	initWorkBattery(); //ËÌËˆË‡ÎËÁ‡ˆËˇ ‡·ÓÚ˚ Ò ·‡Ú‡ÂˇÏË
     626:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <initWorkBattery>
	initEncoder(); //ËÌËˆË‡ÎËÁ‡ˆËˇ ‡·ÓÚ˚ Ò ˝ÌÍÓ‰ÂÓÏ
     62a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <initEncoder>
	initParametrDoor(); //˜ÚÂÌËÂ ÛÒÚ‡‚ÓÍ ‰Îˇ ‡·ÓÚ˚ ‰‚ÂË, ËÌËˆË‡ÎËÁ‡ˆËˇ
     62e:	0e 94 77 01 	call	0x2ee	; 0x2ee <initParametrDoor>
	sei();
     632:	78 94       	sei
     634:	2f ef       	ldi	r18, 0xFF	; 255
     636:	86 e1       	ldi	r24, 0x16	; 22
     638:	91 e1       	ldi	r25, 0x11	; 17
     63a:	21 50       	subi	r18, 0x01	; 1
     63c:	80 40       	sbci	r24, 0x00	; 0
     63e:	90 40       	sbci	r25, 0x00	; 0
     640:	e1 f7       	brne	.-8      	; 0x63a <main+0x5e>
     642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x68>
     644:	00 00       	nop
	unsigned char data[28];
	char resultSearchFinger = 1;
	char result[10];
	char count = 0; //
	
	displayShowStr(3,3,"Á‡ÔÛÒÍ‡ÂÏ ÔÓ„Û");
     646:	4e e9       	ldi	r20, 0x9E	; 158
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	63 e0       	ldi	r22, 0x03	; 3
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	86 e1       	ldi	r24, 0x16	; 22
     656:	91 e1       	ldi	r25, 0x11	; 17
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	80 40       	sbci	r24, 0x00	; 0
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x7c>
     660:	00 c0       	rjmp	.+0      	; 0x662 <main+0x86>
     662:	00 00       	nop
	_delay_ms(700);
	displayClear();
     664:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	_delay_ms(700);
/*	---------------------------*/
	unsigned char data[28];
	char resultSearchFinger = 1;
	char result[10];
	char count = 0; //
     668:	10 e0       	ldi	r17, 0x00	; 0
		}else
		displayShowStr(0,2,"—Í‡ÌÂ ÓÚÍÎ˛˜ÂÌ     ");
//****************‰‚ÂË************************* 
		 workCloseOpenDoorGeneral();
		 
		if(count%10 == 2){ //Í‡Ê‰˚È 10 ˆËÍÎ ËÁÏÂˇÂÚ Ë ÓÚÓ·‡Ê‡ÂÚ Ì‡ÔˇÊÂÌËÂ
     66a:	0d ec       	ldi	r16, 0xCD	; 205
			//**************‡·ÓÚ‡ Ò ‡ÍÛÏ‡ÏË****************
			workWithBatteries();
	//ÓÚÓ·‡Ê‡ÂÏ Ì‡ÔˇÊÂÌËˇ
			sprintf(result,"%.2fB", getVoltage(1));
     66c:	0f 2e       	mov	r0, r31
     66e:	fd ee       	ldi	r31, 0xED	; 237
     670:	cf 2e       	mov	r12, r31
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	df 2e       	mov	r13, r31
     676:	f0 2d       	mov	r31, r0
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	7c 01       	movw	r14, r24
	displayClear();
	
	while (1)
	{
//*******************ÓÚÔÂ˜‡ÚÍË******************
		if (is_closed_door){
     67e:	ce 9b       	sbis	0x19, 6	; 25
     680:	26 c0       	rjmp	.+76     	; 0x6ce <main+0xf2>
			displayShowStr(0,2,"ŒÚÔÂ˜‡ÚÓÍ ÌÂ ÓÔÓÁÌ‡Ì");
     682:	4e ea       	ldi	r20, 0xAE	; 174
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	62 e0       	ldi	r22, 0x02	; 2
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			if(is_open_lock){
     68e:	cf 9b       	sbis	0x19, 7	; 25
     690:	06 c0       	rjmp	.+12     	; 0x69e <main+0xc2>
				resultSearchFinger = searchFingerInSensor();
     692:	0e 94 d7 10 	call	0x21ae	; 0x21ae <searchFingerInSensor>
				if(!resultSearchFinger)
     696:	81 11       	cpse	r24, r1
     698:	02 c0       	rjmp	.+4      	; 0x69e <main+0xc2>
				closeLock();
     69a:	0e 94 12 01 	call	0x224	; 0x224 <closeLock>
			}
			resultSearchFinger = searchFingerR300();
     69e:	0e 94 5f 11 	call	0x22be	; 0x22be <searchFingerR300>
			if(is_closed_lock){
     6a2:	cf 99       	sbic	0x19, 7	; 25
     6a4:	1a c0       	rjmp	.+52     	; 0x6da <main+0xfe>
				resultSearchFinger = searchFingerR300();
     6a6:	0e 94 5f 11 	call	0x22be	; 0x22be <searchFingerR300>
				if (resultSearchFinger){
     6aa:	88 23       	and	r24, r24
     6ac:	49 f0       	breq	.+18     	; 0x6c0 <main+0xe4>
					displayShowStr(0,2,"ŒÚÔÂ˜‡ÚÓÍ ÓÔÓÁÌ‡Ì   ");
     6ae:	43 ec       	ldi	r20, 0xC3	; 195
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	62 e0       	ldi	r22, 0x02	; 2
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
					openLock();
     6ba:	0e 94 1e 01 	call	0x23c	; 0x23c <openLock>
     6be:	0d c0       	rjmp	.+26     	; 0x6da <main+0xfe>
				}else
				displayShowStr(0,2,"ŒÚÔÂ˜‡ÚÓÍ ÌÂ ÓÔÓÁÌ‡Ì");
     6c0:	4e ea       	ldi	r20, 0xAE	; 174
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     6cc:	06 c0       	rjmp	.+12     	; 0x6da <main+0xfe>
			}
		}else
		displayShowStr(0,2,"—Í‡ÌÂ ÓÚÍÎ˛˜ÂÌ     ");
     6ce:	48 ed       	ldi	r20, 0xD8	; 216
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	62 e0       	ldi	r22, 0x02	; 2
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
//****************‰‚ÂË************************* 
		 workCloseOpenDoorGeneral();
     6da:	0e 94 bd 01 	call	0x37a	; 0x37a <workCloseOpenDoorGeneral>
		 
		if(count%10 == 2){ //Í‡Ê‰˚È 10 ˆËÍÎ ËÁÏÂˇÂÚ Ë ÓÚÓ·‡Ê‡ÂÚ Ì‡ÔˇÊÂÌËÂ
     6de:	10 9f       	mul	r17, r16
     6e0:	81 2d       	mov	r24, r1
     6e2:	11 24       	eor	r1, r1
     6e4:	86 95       	lsr	r24
     6e6:	86 95       	lsr	r24
     6e8:	86 95       	lsr	r24
     6ea:	88 0f       	add	r24, r24
     6ec:	98 2f       	mov	r25, r24
     6ee:	99 0f       	add	r25, r25
     6f0:	99 0f       	add	r25, r25
     6f2:	89 0f       	add	r24, r25
     6f4:	91 2f       	mov	r25, r17
     6f6:	98 1b       	sub	r25, r24
     6f8:	92 30       	cpi	r25, 0x02	; 2
     6fa:	09 f0       	breq	.+2      	; 0x6fe <main+0x122>
     6fc:	c0 c0       	rjmp	.+384    	; 0x87e <__stack+0x1f>
			//**************‡·ÓÚ‡ Ò ‡ÍÛÏ‡ÏË****************
			workWithBatteries();
     6fe:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <workWithBatteries>
	//ÓÚÓ·‡Ê‡ÂÏ Ì‡ÔˇÊÂÌËˇ
			sprintf(result,"%.2fB", getVoltage(1));
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getVoltage>
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	7f 93       	push	r23
     70e:	6f 93       	push	r22
     710:	df 92       	push	r13
     712:	cf 92       	push	r12
     714:	ff 92       	push	r15
     716:	ef 92       	push	r14
     718:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
			displayShowStr(0,5,"¡1 =");
     71c:	43 ef       	ldi	r20, 0xF3	; 243
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	65 e0       	ldi	r22, 0x05	; 5
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(4,5, result);
     728:	a7 01       	movw	r20, r14
     72a:	65 e0       	ldi	r22, 0x05	; 5
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	 
			sprintf(result,"%.2fB", getVoltage(2));
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getVoltage>
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	7f 93       	push	r23
     73e:	6f 93       	push	r22
     740:	df 92       	push	r13
     742:	cf 92       	push	r12
     744:	ff 92       	push	r15
     746:	ef 92       	push	r14
     748:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
			displayShowStr(0,6,"¡2 =");
     74c:	48 ef       	ldi	r20, 0xF8	; 248
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	66 e0       	ldi	r22, 0x06	; 6
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(4,6, result);
     758:	a7 01       	movw	r20, r14
     75a:	66 e0       	ldi	r22, 0x06	; 6
     75c:	84 e0       	ldi	r24, 0x04	; 4
     75e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	 
			sprintf(result,"%.2fB", getVoltage(3));
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getVoltage>
     768:	9f 93       	push	r25
     76a:	8f 93       	push	r24
     76c:	7f 93       	push	r23
     76e:	6f 93       	push	r22
     770:	df 92       	push	r13
     772:	cf 92       	push	r12
     774:	ff 92       	push	r15
     776:	ef 92       	push	r14
     778:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
			displayShowStr(0,7,"¡3 =");
     77c:	4d ef       	ldi	r20, 0xFD	; 253
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	67 e0       	ldi	r22, 0x07	; 7
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(4,7, result);
     788:	a7 01       	movw	r20, r14
     78a:	67 e0       	ldi	r22, 0x07	; 7
     78c:	84 e0       	ldi	r24, 0x04	; 4
     78e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	 
			sprintf(result,"%.2fB",getVoltage(4));
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getVoltage>
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	7f 93       	push	r23
     79e:	6f 93       	push	r22
     7a0:	df 92       	push	r13
     7a2:	cf 92       	push	r12
     7a4:	ff 92       	push	r15
     7a6:	ef 92       	push	r14
     7a8:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
			displayShowStr(0,4,"U =");
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
     7b6:	42 e0       	ldi	r20, 0x02	; 2
     7b8:	51 e0       	ldi	r21, 0x01	; 1
     7ba:	64 e0       	ldi	r22, 0x04	; 4
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(4,4, result);
     7c2:	a7 01       	movw	r20, r14
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	84 e0       	ldi	r24, 0x04	; 4
     7c8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	 
			if(getChargeMode()){
     7cc:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <getChargeMode>
     7d0:	88 23       	and	r24, r24
     7d2:	e9 f1       	breq	.+122    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
				displayShowStr(14,4,"Á‡ˇ‰ ");
     7d4:	46 e0       	ldi	r20, 0x06	; 6
     7d6:	51 e0       	ldi	r21, 0x01	; 1
     7d8:	64 e0       	ldi	r22, 0x04	; 4
     7da:	8e e0       	ldi	r24, 0x0E	; 14
     7dc:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
				if(getBypassMode(1))
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <getBypassMode>
     7e6:	88 23       	and	r24, r24
     7e8:	39 f0       	breq	.+14     	; 0x7f8 <main+0x21c>
					displayShowStr(12,5,"·‡ÈÔ‡Ò");
     7ea:	4d e0       	ldi	r20, 0x0D	; 13
     7ec:	51 e0       	ldi	r21, 0x01	; 1
     7ee:	65 e0       	ldi	r22, 0x05	; 5
     7f0:	8c e0       	ldi	r24, 0x0C	; 12
     7f2:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     7f6:	06 c0       	rjmp	.+12     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
				else
					displayShowStr(12,5,"      ");
     7f8:	44 e1       	ldi	r20, 0x14	; 20
     7fa:	51 e0       	ldi	r21, 0x01	; 1
     7fc:	65 e0       	ldi	r22, 0x05	; 5
     7fe:	8c e0       	ldi	r24, 0x0C	; 12
     800:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
				if(getBypassMode(2))
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <getBypassMode>
     80a:	88 23       	and	r24, r24
     80c:	39 f0       	breq	.+14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
					displayShowStr(12,6,"·‡ÈÔ‡Ò");
     80e:	4d e0       	ldi	r20, 0x0D	; 13
     810:	51 e0       	ldi	r21, 0x01	; 1
     812:	66 e0       	ldi	r22, 0x06	; 6
     814:	8c e0       	ldi	r24, 0x0C	; 12
     816:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     81a:	06 c0       	rjmp	.+12     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
				else
					displayShowStr(12,6,"      ");
     81c:	44 e1       	ldi	r20, 0x14	; 20
     81e:	51 e0       	ldi	r21, 0x01	; 1
     820:	66 e0       	ldi	r22, 0x06	; 6
     822:	8c e0       	ldi	r24, 0x0C	; 12
     824:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
				if(getBypassMode(3))
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <getBypassMode>
     82e:	88 23       	and	r24, r24
     830:	39 f0       	breq	.+14     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
					displayShowStr(12,7,"·‡ÈÔ‡Ò");
     832:	4d e0       	ldi	r20, 0x0D	; 13
     834:	51 e0       	ldi	r21, 0x01	; 1
     836:	67 e0       	ldi	r22, 0x07	; 7
     838:	8c e0       	ldi	r24, 0x0C	; 12
     83a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     83e:	1f c0       	rjmp	.+62     	; 0x87e <__stack+0x1f>
				else
					displayShowStr(12,7,"      ");	 
     840:	44 e1       	ldi	r20, 0x14	; 20
     842:	51 e0       	ldi	r21, 0x01	; 1
     844:	67 e0       	ldi	r22, 0x07	; 7
     846:	8c e0       	ldi	r24, 0x0C	; 12
     848:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     84c:	18 c0       	rjmp	.+48     	; 0x87e <__stack+0x1f>
			}else{
				displayShowStr(14,4,"‡Áˇ‰");
     84e:	4b e1       	ldi	r20, 0x1B	; 27
     850:	51 e0       	ldi	r21, 0x01	; 1
     852:	64 e0       	ldi	r22, 0x04	; 4
     854:	8e e0       	ldi	r24, 0x0E	; 14
     856:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
				displayShowStr(12,5,"      ");
     85a:	44 e1       	ldi	r20, 0x14	; 20
     85c:	51 e0       	ldi	r21, 0x01	; 1
     85e:	65 e0       	ldi	r22, 0x05	; 5
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
				displayShowStr(12,6,"      ");
     866:	44 e1       	ldi	r20, 0x14	; 20
     868:	51 e0       	ldi	r21, 0x01	; 1
     86a:	66 e0       	ldi	r22, 0x06	; 6
     86c:	8c e0       	ldi	r24, 0x0C	; 12
     86e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
				displayShowStr(12,7,"      ");
     872:	44 e1       	ldi	r20, 0x14	; 20
     874:	51 e0       	ldi	r21, 0x01	; 1
     876:	67 e0       	ldi	r22, 0x07	; 7
     878:	8c e0       	ldi	r24, 0x0C	; 12
     87a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			}
		}

//********************  menu ******************************	 
		 if(getPressButtonEncoder()){ //ÍÌÓÔÍ‡ ˝ÌÍÓ‰Â‡ Ì‡Ê‡Ú‡
     87e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <getPressButtonEncoder>
     882:	88 23       	and	r24, r24
     884:	31 f0       	breq	.+12     	; 0x892 <__stack+0x33>
			while(getPressButtonEncoder());
     886:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <getPressButtonEncoder>
     88a:	81 11       	cpse	r24, r1
     88c:	fc cf       	rjmp	.-8      	; 0x886 <__stack+0x27>
			showMenuGeneral();
     88e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <showMenuGeneral>
		 }  
		 ++count;
     892:	1f 5f       	subi	r17, 0xFF	; 255
		 if(count >=200)     
     894:	18 3c       	cpi	r17, 0xC8	; 200
     896:	08 f4       	brcc	.+2      	; 0x89a <__stack+0x3b>
     898:	f2 ce       	rjmp	.-540    	; 0x67e <main+0xa2>
			 count = 0;                                                                                              
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	f0 ce       	rjmp	.-544    	; 0x67e <main+0xa2>

0000089e <changeMenuPassword>:
	}
	displayClear();
}

//*******ÔÓ‚ÂÍ‡ Ô‡ÓÎˇ*************
char changeMenuPassword(){
     89e:	2f 92       	push	r2
     8a0:	3f 92       	push	r3
     8a2:	4f 92       	push	r4
     8a4:	5f 92       	push	r5
     8a6:	7f 92       	push	r7
     8a8:	8f 92       	push	r8
     8aa:	9f 92       	push	r9
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <changeMenuPassword+0x24>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <changeMenuPassword+0x26>
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
     8d2:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	unsigned char num = 0;
	unsigned int password = 0;
	char str[5];
	
	//‰Îˇ ÓÚÎ‡‰ÍË
	unsigned int pas = EEPROM_read_word(824);
     8d6:	88 e3       	ldi	r24, 0x38	; 56
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
     8de:	5c 01       	movw	r10, r24
	sprintf(str, "%d", pas);
     8e0:	bf 92       	push	r11
     8e2:	8f 93       	push	r24
     8e4:	82 e2       	ldi	r24, 0x22	; 34
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	8e 01       	movw	r16, r28
     8ee:	0f 5f       	subi	r16, 0xFF	; 255
     8f0:	1f 4f       	sbci	r17, 0xFF	; 255
     8f2:	1f 93       	push	r17
     8f4:	0f 93       	push	r16
     8f6:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
	displayShowStr(8, 6, str);
     8fa:	a8 01       	movw	r20, r16
     8fc:	66 e0       	ldi	r22, 0x06	; 6
     8fe:	88 e0       	ldi	r24, 0x08	; 8
     900:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	
	displayShowStr(3,0,"‚‚Â‰ËÚÂ Ô‡ÓÎ¸");
     904:	45 e2       	ldi	r20, 0x25	; 37
     906:	51 e0       	ldi	r21, 0x01	; 1
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(8,1,"000");
     910:	44 e3       	ldi	r20, 0x34	; 52
     912:	51 e0       	ldi	r21, 0x01	; 1
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
     928:	10 e0       	ldi	r17, 0x00	; 0
//*******ÔÓ‚ÂÍ‡ Ô‡ÓÎˇ*************
char changeMenuPassword(){
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	unsigned char num = 0;
	unsigned int password = 0;
     92a:	81 2c       	mov	r8, r1
     92c:	91 2c       	mov	r9, r1

//*******ÔÓ‚ÂÍ‡ Ô‡ÓÎˇ*************
char changeMenuPassword(){
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	unsigned char num = 0;
     92e:	51 2c       	mov	r5, r1
	
	displayShowStr(3,0,"‚‚Â‰ËÚÂ Ô‡ÓÎ¸");
	displayShowStr(8,1,"000");
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
		if(getTimerCount() == 3) return 0; //‚˚ıÓ‰ ÔÓ ‚ÂÏÂÌË
		sprintf(str, "%d", num);
     930:	0f 2e       	mov	r0, r31
     932:	f2 e2       	ldi	r31, 0x22	; 34
     934:	ef 2e       	mov	r14, r31
     936:	f1 e0       	ldi	r31, 0x01	; 1
     938:	ff 2e       	mov	r15, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	1c 01       	movw	r2, r24
			}else if(enkoderState == ROTATE_RIGHT && num < 9){
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			++num;
			}else if(enkoderState == PRESS_BUTTON){
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			if(i == 0) password += num * 100;
     942:	0f 2e       	mov	r0, r31
     944:	f4 e6       	ldi	r31, 0x64	; 100
     946:	4f 2e       	mov	r4, r31
     948:	f0 2d       	mov	r31, r0
	displayShowStr(8, 6, str);
	
	displayShowStr(3,0,"‚‚Â‰ËÚÂ Ô‡ÓÎ¸");
	displayShowStr(8,1,"000");
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
		if(getTimerCount() == 3) return 0; //‚˚ıÓ‰ ÔÓ ‚ÂÏÂÌË
     94a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
     94e:	83 30       	cpi	r24, 0x03	; 3
     950:	09 f4       	brne	.+2      	; 0x954 <changeMenuPassword+0xb6>
     952:	95 c0       	rjmp	.+298    	; 0xa7e <changeMenuPassword+0x1e0>
		sprintf(str, "%d", num);
     954:	c5 2c       	mov	r12, r5
     956:	d1 2c       	mov	r13, r1
     958:	1f 92       	push	r1
     95a:	5f 92       	push	r5
     95c:	ff 92       	push	r15
     95e:	ef 92       	push	r14
     960:	3f 92       	push	r3
     962:	2f 92       	push	r2
     964:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(8+i, 1, str);
     968:	a1 01       	movw	r20, r2
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	68 94       	set
     96e:	77 24       	eor	r7, r7
     970:	73 f8       	bld	r7, 3
     972:	71 0e       	add	r7, r17
     974:	87 2d       	mov	r24, r7
     976:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(7+i, 2, " "); //Á‡ÚË‡ÂÏ Á‚∏Á‰Ó˜ÍÛ
     97a:	49 e1       	ldi	r20, 0x19	; 25
     97c:	51 e0       	ldi	r21, 0x01	; 1
     97e:	62 e0       	ldi	r22, 0x02	; 2
     980:	87 e0       	ldi	r24, 0x07	; 7
     982:	81 0f       	add	r24, r17
     984:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(8+i, 2, "*"); //Á‚ÂÁ‰Ó˜Í‡ ÔÓ‰ Ì‡·Ë‡ÂÏ˚Ï ÒËÏ‚ÓÎÓÏ
     988:	48 e3       	ldi	r20, 0x38	; 56
     98a:	51 e0       	ldi	r21, 0x01	; 1
     98c:	62 e0       	ldi	r22, 0x02	; 2
     98e:	87 2d       	mov	r24, r7
     990:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		
		timerOff();
     994:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
     998:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
     99c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
     9a0:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT && num > 0){
     9a4:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	41 f4       	brne	.+16     	; 0x9c8 <changeMenuPassword+0x12a>
     9b8:	55 20       	and	r5, r5
     9ba:	b9 f1       	breq	.+110    	; 0xa2a <changeMenuPassword+0x18c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			--num;
     9c4:	5a 94       	dec	r5
     9c6:	31 c0       	rjmp	.+98     	; 0xa2a <changeMenuPassword+0x18c>
			}else if(enkoderState == ROTATE_RIGHT && num < 9){
     9c8:	84 30       	cpi	r24, 0x04	; 4
     9ca:	49 f4       	brne	.+18     	; 0x9de <changeMenuPassword+0x140>
     9cc:	98 e0       	ldi	r25, 0x08	; 8
     9ce:	95 15       	cp	r25, r5
     9d0:	60 f1       	brcs	.+88     	; 0xa2a <changeMenuPassword+0x18c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			++num;
     9da:	53 94       	inc	r5
     9dc:	26 c0       	rjmp	.+76     	; 0xa2a <changeMenuPassword+0x18c>
			}else if(enkoderState == PRESS_BUTTON){
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	21 f5       	brne	.+72     	; 0xa2a <changeMenuPassword+0x18c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if(i == 0) password += num * 100;
     9ea:	11 11       	cpse	r17, r1
     9ec:	08 c0       	rjmp	.+16     	; 0x9fe <changeMenuPassword+0x160>
     9ee:	4c 9c       	mul	r4, r12
     9f0:	c0 01       	movw	r24, r0
     9f2:	4d 9c       	mul	r4, r13
     9f4:	90 0d       	add	r25, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	88 0e       	add	r8, r24
     9fa:	99 1e       	adc	r9, r25
     9fc:	14 c0       	rjmp	.+40     	; 0xa26 <changeMenuPassword+0x188>
			else if(i == 1) password += num * 10;
     9fe:	11 30       	cpi	r17, 0x01	; 1
     a00:	71 f4       	brne	.+28     	; 0xa1e <changeMenuPassword+0x180>
     a02:	c6 01       	movw	r24, r12
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	cc 0c       	add	r12, r12
     a0a:	dd 1c       	adc	r13, r13
     a0c:	cc 0c       	add	r12, r12
     a0e:	dd 1c       	adc	r13, r13
     a10:	cc 0c       	add	r12, r12
     a12:	dd 1c       	adc	r13, r13
     a14:	c8 0e       	add	r12, r24
     a16:	d9 1e       	adc	r13, r25
     a18:	8c 0c       	add	r8, r12
     a1a:	9d 1c       	adc	r9, r13
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <changeMenuPassword+0x188>
			else if(i == 2) password += num;
     a1e:	12 30       	cpi	r17, 0x02	; 2
     a20:	11 f4       	brne	.+4      	; 0xa26 <changeMenuPassword+0x188>
     a22:	85 0c       	add	r8, r5
     a24:	91 1c       	adc	r9, r1
			++i;
     a26:	1f 5f       	subi	r17, 0xFF	; 255
			num = 0;
     a28:	51 2c       	mov	r5, r1
     a2a:	8f e3       	ldi	r24, 0x3F	; 63
     a2c:	9c e9       	ldi	r25, 0x9C	; 156
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <changeMenuPassword+0x190>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <changeMenuPassword+0x196>
     a34:	00 00       	nop
	sprintf(str, "%d", pas);
	displayShowStr(8, 6, str);
	
	displayShowStr(3,0,"‚‚Â‰ËÚÂ Ô‡ÓÎ¸");
	displayShowStr(8,1,"000");
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
     a36:	13 30       	cpi	r17, 0x03	; 3
     a38:	08 f4       	brcc	.+2      	; 0xa3c <changeMenuPassword+0x19e>
     a3a:	87 cf       	rjmp	.-242    	; 0x94a <changeMenuPassword+0xac>
			num = 0;
		}
		_delay_ms(20);
	}
	char result = 0;
	displayClear();
     a3c:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	if(pas == password){
     a40:	8a 14       	cp	r8, r10
     a42:	9b 04       	cpc	r9, r11
     a44:	41 f4       	brne	.+16     	; 0xa56 <changeMenuPassword+0x1b8>
		 displayShowStr(3,3,"œ‡ÓÎ¸ ‚ÂÌ˚È");
     a46:	4a e3       	ldi	r20, 0x3A	; 58
     a48:	51 e0       	ldi	r21, 0x01	; 1
     a4a:	63 e0       	ldi	r22, 0x03	; 3
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		 result = 1;
     a52:	11 e0       	ldi	r17, 0x01	; 1
     a54:	07 c0       	rjmp	.+14     	; 0xa64 <changeMenuPassword+0x1c6>
	}else{
		 displayShowStr(3,3,"œ‡ÓÎ¸ ÌÂ ‚ÂÌ˚È");
     a56:	48 e4       	ldi	r20, 0x48	; 72
     a58:	51 e0       	ldi	r21, 0x01	; 1
     a5a:	63 e0       	ldi	r22, 0x03	; 3
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			++i;
			num = 0;
		}
		_delay_ms(20);
	}
	char result = 0;
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	9f ef       	ldi	r25, 0xFF	; 255
     a66:	26 e1       	ldi	r18, 0x16	; 22
     a68:	81 e1       	ldi	r24, 0x11	; 17
     a6a:	91 50       	subi	r25, 0x01	; 1
     a6c:	20 40       	sbci	r18, 0x00	; 0
     a6e:	80 40       	sbci	r24, 0x00	; 0
     a70:	e1 f7       	brne	.-8      	; 0xa6a <changeMenuPassword+0x1cc>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <changeMenuPassword+0x1d6>
     a74:	00 00       	nop
		 result = 1;
	}else{
		 displayShowStr(3,3,"œ‡ÓÎ¸ ÌÂ ‚ÂÌ˚È");
	}
	_delay_ms(700);
	displayClear();
     a76:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	return result;
     a7a:	81 2f       	mov	r24, r17
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <changeMenuPassword+0x1e2>
	displayShowStr(8, 6, str);
	
	displayShowStr(3,0,"‚‚Â‰ËÚÂ Ô‡ÓÎ¸");
	displayShowStr(8,1,"000");
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
		if(getTimerCount() == 3) return 0; //‚˚ıÓ‰ ÔÓ ‚ÂÏÂÌË
     a7e:	80 e0       	ldi	r24, 0x00	; 0
		 displayShowStr(3,3,"œ‡ÓÎ¸ ÌÂ ‚ÂÌ˚È");
	}
	_delay_ms(700);
	displayClear();
	return result;
}
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	cf 90       	pop	r12
     a9a:	bf 90       	pop	r11
     a9c:	af 90       	pop	r10
     a9e:	9f 90       	pop	r9
     aa0:	8f 90       	pop	r8
     aa2:	7f 90       	pop	r7
     aa4:	5f 90       	pop	r5
     aa6:	4f 90       	pop	r4
     aa8:	3f 90       	pop	r3
     aaa:	2f 90       	pop	r2
     aac:	08 95       	ret

00000aae <showPasswordMenu>:

//*********ÏÂÌ˛ ÒÏÂÌ˚ Ô‡ÓÎˇ************
void showPasswordMenu(){
     aae:	6f 92       	push	r6
     ab0:	7f 92       	push	r7
     ab2:	8f 92       	push	r8
     ab4:	9f 92       	push	r9
     ab6:	af 92       	push	r10
     ab8:	bf 92       	push	r11
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	00 d0       	rcall	.+0      	; 0xacc <showPasswordMenu+0x1e>
     acc:	00 d0       	rcall	.+0      	; 0xace <showPasswordMenu+0x20>
     ace:	1f 92       	push	r1
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
     adc:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	unsigned char num1 = 0;
	char flag = 1;
	unsigned int num = 0;
	char str[5];
	displayShowStr(3,0,"ÛÒÚ‡ÌÓ‚ËÚ¸ Ô‡ÓÎ¸");
     ae0:	49 e5       	ldi	r20, 0x59	; 89
     ae2:	51 e0       	ldi	r21, 0x01	; 1
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(8,1,"000");
     aec:	44 e3       	ldi	r20, 0x34	; 52
     aee:	51 e0       	ldi	r21, 0x01	; 1
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	88 e0       	ldi	r24, 0x08	; 8
     af4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
     af8:	00 e0       	ldi	r16, 0x00	; 0
void showPasswordMenu(){
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	unsigned char num1 = 0;
	char flag = 1;
	unsigned int num = 0;
     afa:	81 2c       	mov	r8, r1
     afc:	91 2c       	mov	r9, r1

//*********ÏÂÌ˛ ÒÏÂÌ˚ Ô‡ÓÎˇ************
void showPasswordMenu(){
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	unsigned char num1 = 0;
     afe:	71 2c       	mov	r7, r1
	char str[5];
	displayShowStr(3,0,"ÛÒÚ‡ÌÓ‚ËÚ¸ Ô‡ÓÎ¸");
	displayShowStr(8,1,"000");
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
		if(getTimerCount() == 3) return; //‚˚ıÓ‰ ÔÓ ‚ÂÏÂÌË
		sprintf(str, "%d", num1);
     b00:	0f 2e       	mov	r0, r31
     b02:	f2 e2       	ldi	r31, 0x22	; 34
     b04:	cf 2e       	mov	r12, r31
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	df 2e       	mov	r13, r31
     b0a:	f0 2d       	mov	r31, r0
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	7c 01       	movw	r14, r24
		}else if(enkoderState == ROTATE_RIGHT && num1 < 9){
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			++num1;
		}else if(enkoderState == PRESS_BUTTON){
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			if(i == 0) num += num1 * 100;
     b12:	0f 2e       	mov	r0, r31
     b14:	f4 e6       	ldi	r31, 0x64	; 100
     b16:	6f 2e       	mov	r6, r31
     b18:	f0 2d       	mov	r31, r0
	unsigned int num = 0;
	char str[5];
	displayShowStr(3,0,"ÛÒÚ‡ÌÓ‚ËÚ¸ Ô‡ÓÎ¸");
	displayShowStr(8,1,"000");
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
		if(getTimerCount() == 3) return; //‚˚ıÓ‰ ÔÓ ‚ÂÏÂÌË
     b1a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
     b1e:	83 30       	cpi	r24, 0x03	; 3
     b20:	09 f4       	brne	.+2      	; 0xb24 <showPasswordMenu+0x76>
     b22:	13 c1       	rjmp	.+550    	; 0xd4a <showPasswordMenu+0x29c>
		sprintf(str, "%d", num1);
     b24:	a7 2c       	mov	r10, r7
     b26:	b1 2c       	mov	r11, r1
     b28:	1f 92       	push	r1
     b2a:	7f 92       	push	r7
     b2c:	df 92       	push	r13
     b2e:	cf 92       	push	r12
     b30:	ff 92       	push	r15
     b32:	ef 92       	push	r14
     b34:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(8+i, 1, str);
     b38:	a7 01       	movw	r20, r14
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	18 e0       	ldi	r17, 0x08	; 8
     b3e:	10 0f       	add	r17, r16
     b40:	81 2f       	mov	r24, r17
     b42:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(7+i, 2, " "); //Á‡ÚË‡ÂÏ Á‚∏Á‰Ó˜ÍÛ
     b46:	49 e1       	ldi	r20, 0x19	; 25
     b48:	51 e0       	ldi	r21, 0x01	; 1
     b4a:	62 e0       	ldi	r22, 0x02	; 2
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	80 0f       	add	r24, r16
     b50:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(8+i, 2, "*"); //Á‚ÂÁ‰Ó˜Í‡ ÔÓ‰ Ì‡·Ë‡ÂÏ˚Ï ÒËÏ‚ÓÎÓÏ
     b54:	48 e3       	ldi	r20, 0x38	; 56
     b56:	51 e0       	ldi	r21, 0x01	; 1
     b58:	62 e0       	ldi	r22, 0x02	; 2
     b5a:	81 2f       	mov	r24, r17
     b5c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
     b60:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
     b64:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
     b68:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
     b6c:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT && num1 > 0){
     b70:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	41 f4       	brne	.+16     	; 0xb94 <showPasswordMenu+0xe6>
     b84:	77 20       	and	r7, r7
     b86:	b9 f1       	breq	.+110    	; 0xbf6 <showPasswordMenu+0x148>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			--num1;	
     b90:	7a 94       	dec	r7
     b92:	31 c0       	rjmp	.+98     	; 0xbf6 <showPasswordMenu+0x148>
		}else if(enkoderState == ROTATE_RIGHT && num1 < 9){
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	49 f4       	brne	.+18     	; 0xbaa <showPasswordMenu+0xfc>
     b98:	98 e0       	ldi	r25, 0x08	; 8
     b9a:	97 15       	cp	r25, r7
     b9c:	60 f1       	brcs	.+88     	; 0xbf6 <showPasswordMenu+0x148>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			++num1;
     ba6:	73 94       	inc	r7
     ba8:	26 c0       	rjmp	.+76     	; 0xbf6 <showPasswordMenu+0x148>
		}else if(enkoderState == PRESS_BUTTON){
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	21 f5       	brne	.+72     	; 0xbf6 <showPasswordMenu+0x148>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if(i == 0) num += num1 * 100;
     bb6:	01 11       	cpse	r16, r1
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <showPasswordMenu+0x11c>
     bba:	6a 9c       	mul	r6, r10
     bbc:	c0 01       	movw	r24, r0
     bbe:	6b 9c       	mul	r6, r11
     bc0:	90 0d       	add	r25, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	88 0e       	add	r8, r24
     bc6:	99 1e       	adc	r9, r25
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <showPasswordMenu+0x144>
			else if(i == 1) num += num1 * 10;
     bca:	01 30       	cpi	r16, 0x01	; 1
     bcc:	71 f4       	brne	.+28     	; 0xbea <showPasswordMenu+0x13c>
     bce:	c5 01       	movw	r24, r10
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	aa 0c       	add	r10, r10
     bd6:	bb 1c       	adc	r11, r11
     bd8:	aa 0c       	add	r10, r10
     bda:	bb 1c       	adc	r11, r11
     bdc:	aa 0c       	add	r10, r10
     bde:	bb 1c       	adc	r11, r11
     be0:	a8 0e       	add	r10, r24
     be2:	b9 1e       	adc	r11, r25
     be4:	8a 0c       	add	r8, r10
     be6:	9b 1c       	adc	r9, r11
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <showPasswordMenu+0x144>
			else if(i == 2) num += num1;
     bea:	02 30       	cpi	r16, 0x02	; 2
     bec:	11 f4       	brne	.+4      	; 0xbf2 <showPasswordMenu+0x144>
     bee:	87 0c       	add	r8, r7
     bf0:	91 1c       	adc	r9, r1
			++i;
     bf2:	0f 5f       	subi	r16, 0xFF	; 255
			num1 = 0;
     bf4:	71 2c       	mov	r7, r1
     bf6:	8f e3       	ldi	r24, 0x3F	; 63
     bf8:	9c e9       	ldi	r25, 0x9C	; 156
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <showPasswordMenu+0x14c>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <showPasswordMenu+0x152>
     c00:	00 00       	nop
	char flag = 1;
	unsigned int num = 0;
	char str[5];
	displayShowStr(3,0,"ÛÒÚ‡ÌÓ‚ËÚ¸ Ô‡ÓÎ¸");
	displayShowStr(8,1,"000");
	for (char i=0; i<3; ){ //ÛÒÚ‡ÌÓ‚Í‡ Ô‡ÓÎˇ
     c02:	03 30       	cpi	r16, 0x03	; 3
     c04:	08 f4       	brcc	.+2      	; 0xc08 <showPasswordMenu+0x15a>
     c06:	89 cf       	rjmp	.-238    	; 0xb1a <showPasswordMenu+0x6c>
			++i;
			num1 = 0;
		}
		_delay_ms(20);
	}
	sprintf(str, "%d", num);
     c08:	9f 92       	push	r9
     c0a:	8f 92       	push	r8
     c0c:	82 e2       	ldi	r24, 0x22	; 34
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	9f 93       	push	r25
     c12:	8f 93       	push	r24
     c14:	8e 01       	movw	r16, r28
     c16:	0f 5f       	subi	r16, 0xFF	; 255
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	1f 93       	push	r17
     c1c:	0f 93       	push	r16
     c1e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
	displayShowStr(8, 1, str); //‚˚‚Ó‰ËÏ Ô‡ÓÎ¸
     c22:	a8 01       	movw	r20, r16
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayClearString(2); //ÒÚË‡ÂÏ ÒÚÓÍÛ ÒÓ Á‚∏Á‰Ó˜ÍÓÈ
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	0e 94 d6 12 	call	0x25ac	; 0x25ac <displayClearString>
	displayShowStr(2, 3, "—Óı‡ÌËÚ¸ Ô‡ÓÎ¸?");
     c32:	4b e6       	ldi	r20, 0x6B	; 107
     c34:	51 e0       	ldi	r21, 0x01	; 1
     c36:	63 e0       	ldi	r22, 0x03	; 3
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(4, 4, "ƒ‡?");
     c3e:	4d e7       	ldi	r20, 0x7D	; 125
     c40:	51 e0       	ldi	r21, 0x01	; 1
     c42:	64 e0       	ldi	r22, 0x04	; 4
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(12, 4, "ÕÂÚ?");
     c4a:	41 e8       	ldi	r20, 0x81	; 129
     c4c:	51 e0       	ldi	r21, 0x01	; 1
     c4e:	64 e0       	ldi	r22, 0x04	; 4
     c50:	8c e0       	ldi	r24, 0x0C	; 12
     c52:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	while(getTimerCount() != 3){ 
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
//*********ÏÂÌ˛ ÒÏÂÌ˚ Ô‡ÓÎˇ************
void showPasswordMenu(){
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	unsigned char num1 = 0;
	char flag = 1;
     c62:	11 e0       	ldi	r17, 0x01	; 1
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			if (flag) flag=0;
			else flag=1;
		}else if(enkoderState == ROTATE_RIGHT){
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			if (flag) flag=0;
     c64:	01 e0       	ldi	r16, 0x01	; 1
     c66:	f1 2c       	mov	r15, r1
	displayShowStr(8, 1, str); //‚˚‚Ó‰ËÏ Ô‡ÓÎ¸
	displayClearString(2); //ÒÚË‡ÂÏ ÒÚÓÍÛ ÒÓ Á‚∏Á‰Ó˜ÍÓÈ
	displayShowStr(2, 3, "—Óı‡ÌËÚ¸ Ô‡ÓÎ¸?");
	displayShowStr(4, 4, "ƒ‡?");
	displayShowStr(12, 4, "ÕÂÚ?");
	while(getTimerCount() != 3){ 
     c68:	69 c0       	rjmp	.+210    	; 0xd3c <showPasswordMenu+0x28e>
		if(flag){
     c6a:	11 23       	and	r17, r17
     c6c:	69 f0       	breq	.+26     	; 0xc88 <showPasswordMenu+0x1da>
			displayShowStr(3, 4, "*");
     c6e:	48 e3       	ldi	r20, 0x38	; 56
     c70:	51 e0       	ldi	r21, 0x01	; 1
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(11, 4, " ");
     c7a:	49 e1       	ldi	r20, 0x19	; 25
     c7c:	51 e0       	ldi	r21, 0x01	; 1
     c7e:	64 e0       	ldi	r22, 0x04	; 4
     c80:	8b e0       	ldi	r24, 0x0B	; 11
     c82:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     c86:	0c c0       	rjmp	.+24     	; 0xca0 <showPasswordMenu+0x1f2>
		}else{
			displayShowStr(3, 4, " ");
     c88:	49 e1       	ldi	r20, 0x19	; 25
     c8a:	51 e0       	ldi	r21, 0x01	; 1
     c8c:	64 e0       	ldi	r22, 0x04	; 4
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(11, 4, "*");
     c94:	48 e3       	ldi	r20, 0x38	; 56
     c96:	51 e0       	ldi	r21, 0x01	; 1
     c98:	64 e0       	ldi	r22, 0x04	; 4
     c9a:	8b e0       	ldi	r24, 0x0B	; 11
     c9c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		}
		timerOff();
     ca0:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
     ca4:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
     ca8:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
     cac:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		
		if(enkoderState == ROTATE_LEFT){
     cb0:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	49 f4       	brne	.+18     	; 0xcca <showPasswordMenu+0x21c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if (flag) flag=0;
     cc0:	80 2f       	mov	r24, r16
     cc2:	11 11       	cpse	r17, r1
     cc4:	8f 2d       	mov	r24, r15
			else flag=1;
     cc6:	18 2f       	mov	r17, r24
     cc8:	33 c0       	rjmp	.+102    	; 0xd30 <showPasswordMenu+0x282>
		}else if(enkoderState == ROTATE_RIGHT){
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	49 f4       	brne	.+18     	; 0xce0 <showPasswordMenu+0x232>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if (flag) flag=0;
     cd6:	80 2f       	mov	r24, r16
     cd8:	11 11       	cpse	r17, r1
     cda:	8f 2d       	mov	r24, r15
		timerOn();
		
		if(enkoderState == ROTATE_LEFT){
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			if (flag) flag=0;
			else flag=1;
     cdc:	18 2f       	mov	r17, r24
     cde:	28 c0       	rjmp	.+80     	; 0xd30 <showPasswordMenu+0x282>
		}else if(enkoderState == ROTATE_RIGHT){
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
			if (flag) flag=0;
			else flag=1;
		}else if(enkoderState == PRESS_BUTTON){
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	31 f5       	brne	.+76     	; 0xd30 <showPasswordMenu+0x282>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
     cec:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			if (flag){
     cf0:	11 23       	and	r17, r17
     cf2:	61 f0       	breq	.+24     	; 0xd0c <showPasswordMenu+0x25e>
				EEPROM_write_word(824, num);
     cf4:	b4 01       	movw	r22, r8
     cf6:	88 e3       	ldi	r24, 0x38	; 56
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write_word>
				displayShowStr(2, 3, "Ô‡ÓÎ¸ ÒÓı‡ÌÂÌ"); 	
     cfe:	46 e8       	ldi	r20, 0x86	; 134
     d00:	51 e0       	ldi	r21, 0x01	; 1
     d02:	63 e0       	ldi	r22, 0x03	; 3
     d04:	82 e0       	ldi	r24, 0x02	; 2
     d06:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <showPasswordMenu+0x26a>
			}else{
				displayShowStr(2, 3, "Ô‡ÓÎ¸ ÌÂ ÒÓı‡ÌÂÌ");
     d0c:	46 e9       	ldi	r20, 0x96	; 150
     d0e:	51 e0       	ldi	r21, 0x01	; 1
     d10:	63 e0       	ldi	r22, 0x03	; 3
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
     d18:	9f ef       	ldi	r25, 0xFF	; 255
     d1a:	23 ed       	ldi	r18, 0xD3	; 211
     d1c:	80 e3       	ldi	r24, 0x30	; 48
     d1e:	91 50       	subi	r25, 0x01	; 1
     d20:	20 40       	sbci	r18, 0x00	; 0
     d22:	80 40       	sbci	r24, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <showPasswordMenu+0x270>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <showPasswordMenu+0x27a>
     d28:	00 00       	nop
			}
			_delay_ms(2000);
			displayClear();
     d2a:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <showPasswordMenu+0x29c>
     d30:	8f e3       	ldi	r24, 0x3F	; 63
     d32:	9c e9       	ldi	r25, 0x9C	; 156
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <showPasswordMenu+0x286>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <showPasswordMenu+0x28c>
     d3a:	00 00       	nop
	displayShowStr(8, 1, str); //‚˚‚Ó‰ËÏ Ô‡ÓÎ¸
	displayClearString(2); //ÒÚË‡ÂÏ ÒÚÓÍÛ ÒÓ Á‚∏Á‰Ó˜ÍÓÈ
	displayShowStr(2, 3, "—Óı‡ÌËÚ¸ Ô‡ÓÎ¸?");
	displayShowStr(4, 4, "ƒ‡?");
	displayShowStr(12, 4, "ÕÂÚ?");
	while(getTimerCount() != 3){ 
     d3c:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	09 f0       	breq	.+2      	; 0xd46 <showPasswordMenu+0x298>
     d44:	92 cf       	rjmp	.-220    	; 0xc6a <showPasswordMenu+0x1bc>
			displayClear();
			return;
		}
		_delay_ms(20);
	}
	displayClear();
     d46:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	bf 90       	pop	r11
     d66:	af 90       	pop	r10
     d68:	9f 90       	pop	r9
     d6a:	8f 90       	pop	r8
     d6c:	7f 90       	pop	r7
     d6e:	6f 90       	pop	r6
     d70:	08 95       	ret

00000d72 <menuSetMinimumVoltage>:

//*********ÛÒÚ‡ÌÓ‚Í‡ ÏËÌËÏ‡Î¸ÌÓ„Ó Ì‡ÔˇÊÂÌËˇ***************
void menuSetMinimumVoltage(){
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <menuSetMinimumVoltage+0x16>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <menuSetMinimumVoltage+0x18>
     d8a:	1f 92       	push	r1
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
     d98:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(0,0," ÓÌÂ˜ÌÓÂ Ì‡ÔˇÊÂÌËÂ");
     d9c:	49 ea       	ldi	r20, 0xA9	; 169
     d9e:	51 e0       	ldi	r21, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(6,1,"‡Áˇ‰‡");
     da8:	46 e0       	ldi	r20, 0x06	; 6
     daa:	52 e0       	ldi	r21, 0x02	; 2
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	86 e0       	ldi	r24, 0x06	; 6
     db0:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	char voltageArray [5];
	float minimumVoltage =  EEPROM_read(812) + (float)(EEPROM_read(813)/100.0);
     db4:	8c e2       	ldi	r24, 0x2C	; 44
     db6:	93 e0       	ldi	r25, 0x03	; 3
     db8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
     dbc:	18 2f       	mov	r17, r24
     dbe:	8d e2       	ldi	r24, 0x2D	; 45
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
     dc6:	68 2f       	mov	r22, r24
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	48 ec       	ldi	r20, 0xC8	; 200
     dd8:	52 e4       	ldi	r21, 0x42	; 66
     dda:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
     dde:	6b 01       	movw	r12, r22
     de0:	7c 01       	movw	r14, r24
     de2:	61 2f       	mov	r22, r17
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
     df2:	c7 01       	movw	r24, r14
     df4:	b6 01       	movw	r22, r12
     df6:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
     dfa:	a6 2e       	mov	r10, r22
     dfc:	b7 2e       	mov	r11, r23
     dfe:	c8 2e       	mov	r12, r24
     e00:	d9 2e       	mov	r13, r25
	while(getTimerCount() != 3){
		sprintf(voltageArray, "%.2f", minimumVoltage);
     e02:	0f 2e       	mov	r0, r31
     e04:	fd eb       	ldi	r31, 0xBD	; 189
     e06:	ef 2e       	mov	r14, r31
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	ff 2e       	mov	r15, r31
     e0c:	f0 2d       	mov	r31, r0
     e0e:	8e 01       	movw	r16, r28
     e10:	0f 5f       	subi	r16, 0xFF	; 255
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
	displayClear();
	displayShowStr(0,0," ÓÌÂ˜ÌÓÂ Ì‡ÔˇÊÂÌËÂ");
	displayShowStr(6,1,"‡Áˇ‰‡");
	char voltageArray [5];
	float minimumVoltage =  EEPROM_read(812) + (float)(EEPROM_read(813)/100.0);
	while(getTimerCount() != 3){
     e14:	62 c0       	rjmp	.+196    	; 0xeda <menuSetMinimumVoltage+0x168>
		sprintf(voltageArray, "%.2f", minimumVoltage);
     e16:	df 92       	push	r13
     e18:	cf 92       	push	r12
     e1a:	bf 92       	push	r11
     e1c:	af 92       	push	r10
     e1e:	ff 92       	push	r15
     e20:	ef 92       	push	r14
     e22:	1f 93       	push	r17
     e24:	0f 93       	push	r16
     e26:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(7, 3, voltageArray );
     e2a:	a8 01       	movw	r20, r16
     e2c:	63 e0       	ldi	r22, 0x03	; 3
     e2e:	87 e0       	ldi	r24, 0x07	; 7
     e30:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
     e34:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
     e38:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
     e3c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
     e40:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT){
     e44:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <enkoderState>
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	23 30       	cpi	r18, 0x03	; 3
     e54:	99 f4       	brne	.+38     	; 0xe7c <menuSetMinimumVoltage+0x10a>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			minimumVoltage -= 0.01;
     e5e:	2a e0       	ldi	r18, 0x0A	; 10
     e60:	37 ed       	ldi	r19, 0xD7	; 215
     e62:	43 e2       	ldi	r20, 0x23	; 35
     e64:	5c e3       	ldi	r21, 0x3C	; 60
     e66:	6a 2d       	mov	r22, r10
     e68:	7b 2d       	mov	r23, r11
     e6a:	8c 2d       	mov	r24, r12
     e6c:	9d 2d       	mov	r25, r13
     e6e:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
     e72:	a6 2e       	mov	r10, r22
     e74:	b7 2e       	mov	r11, r23
     e76:	c8 2e       	mov	r12, r24
     e78:	d9 2e       	mov	r13, r25
     e7a:	29 c0       	rjmp	.+82     	; 0xece <menuSetMinimumVoltage+0x15c>
		}else if(enkoderState == ROTATE_RIGHT){
     e7c:	24 30       	cpi	r18, 0x04	; 4
     e7e:	99 f4       	brne	.+38     	; 0xea6 <menuSetMinimumVoltage+0x134>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			minimumVoltage += 0.01;
     e88:	2a e0       	ldi	r18, 0x0A	; 10
     e8a:	37 ed       	ldi	r19, 0xD7	; 215
     e8c:	43 e2       	ldi	r20, 0x23	; 35
     e8e:	5c e3       	ldi	r21, 0x3C	; 60
     e90:	6a 2d       	mov	r22, r10
     e92:	7b 2d       	mov	r23, r11
     e94:	8c 2d       	mov	r24, r12
     e96:	9d 2d       	mov	r25, r13
     e98:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
     e9c:	a6 2e       	mov	r10, r22
     e9e:	b7 2e       	mov	r11, r23
     ea0:	c8 2e       	mov	r12, r24
     ea2:	d9 2e       	mov	r13, r25
     ea4:	14 c0       	rjmp	.+40     	; 0xece <menuSetMinimumVoltage+0x15c>
		}else if(enkoderState == PRESS_BUTTON){
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	49 f4       	brne	.+18     	; 0xebc <menuSetMinimumVoltage+0x14a>
			setMinimumVoltage(minimumVoltage);
     eaa:	6a 2d       	mov	r22, r10
     eac:	7b 2d       	mov	r23, r11
     eae:	8c 2d       	mov	r24, r12
     eb0:	9d 2d       	mov	r25, r13
     eb2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <setMinimumVoltage>
			displayClear();
     eb6:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
     eba:	16 c0       	rjmp	.+44     	; 0xee8 <menuSetMinimumVoltage+0x176>
		}else if(enkoderState == LONG_PRESS_BUTTON){
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	39 f4       	brne	.+14     	; 0xece <menuSetMinimumVoltage+0x15c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
     ec8:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <menuSetMinimumVoltage+0x176>
     ece:	8f e3       	ldi	r24, 0x3F	; 63
     ed0:	9c e9       	ldi	r25, 0x9C	; 156
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <menuSetMinimumVoltage+0x160>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <menuSetMinimumVoltage+0x166>
     ed8:	00 00       	nop
	displayClear();
	displayShowStr(0,0," ÓÌÂ˜ÌÓÂ Ì‡ÔˇÊÂÌËÂ");
	displayShowStr(6,1,"‡Áˇ‰‡");
	char voltageArray [5];
	float minimumVoltage =  EEPROM_read(812) + (float)(EEPROM_read(813)/100.0);
	while(getTimerCount() != 3){
     eda:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	09 f0       	breq	.+2      	; 0xee4 <menuSetMinimumVoltage+0x172>
     ee2:	99 cf       	rjmp	.-206    	; 0xe16 <menuSetMinimumVoltage+0xa4>
			displayClear();
			return;
		}
		_delay_ms(20);
	}
	displayClear();
     ee4:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	08 95       	ret

00000f08 <menuSetMaximumVoltage>:

//*********ÛÒÚ‡ÌÓ‚Í‡ Ï‡ÍÒËÏ‡Î¸ÌÓ„Ó Ì‡ÔˇÊÂÌËˇ**************
void menuSetMaximumVoltage(){
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <menuSetMaximumVoltage+0x16>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <menuSetMaximumVoltage+0x18>
     f20:	1f 92       	push	r1
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
     f2e:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(0,0," ÓÌÂ˜ÌÓÂ Ì‡ÔˇÊÂÌËÂ");
     f32:	49 ea       	ldi	r20, 0xA9	; 169
     f34:	51 e0       	ldi	r21, 0x01	; 1
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(6,1,"Á‡ˇ‰‡");
     f3e:	49 e1       	ldi	r20, 0x19	; 25
     f40:	52 e0       	ldi	r21, 0x02	; 2
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	char voltageArray [5];
	float maximumVoltage = EEPROM_read(814) + (float)(EEPROM_read(815)/100.0);
     f4a:	8e e2       	ldi	r24, 0x2E	; 46
     f4c:	93 e0       	ldi	r25, 0x03	; 3
     f4e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
     f52:	18 2f       	mov	r17, r24
     f54:	8f e2       	ldi	r24, 0x2F	; 47
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
     f5c:	68 2f       	mov	r22, r24
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	48 ec       	ldi	r20, 0xC8	; 200
     f6e:	52 e4       	ldi	r21, 0x42	; 66
     f70:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
     f74:	6b 01       	movw	r12, r22
     f76:	7c 01       	movw	r14, r24
     f78:	61 2f       	mov	r22, r17
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
     f84:	9b 01       	movw	r18, r22
     f86:	ac 01       	movw	r20, r24
     f88:	c7 01       	movw	r24, r14
     f8a:	b6 01       	movw	r22, r12
     f8c:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
     f90:	a6 2e       	mov	r10, r22
     f92:	b7 2e       	mov	r11, r23
     f94:	c8 2e       	mov	r12, r24
     f96:	d9 2e       	mov	r13, r25
	while(getTimerCount() != 3){
		sprintf(voltageArray, "%.2f", maximumVoltage);
     f98:	0f 2e       	mov	r0, r31
     f9a:	fd eb       	ldi	r31, 0xBD	; 189
     f9c:	ef 2e       	mov	r14, r31
     f9e:	f1 e0       	ldi	r31, 0x01	; 1
     fa0:	ff 2e       	mov	r15, r31
     fa2:	f0 2d       	mov	r31, r0
     fa4:	8e 01       	movw	r16, r28
     fa6:	0f 5f       	subi	r16, 0xFF	; 255
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
	displayClear();
	displayShowStr(0,0," ÓÌÂ˜ÌÓÂ Ì‡ÔˇÊÂÌËÂ");
	displayShowStr(6,1,"Á‡ˇ‰‡");
	char voltageArray [5];
	float maximumVoltage = EEPROM_read(814) + (float)(EEPROM_read(815)/100.0);
	while(getTimerCount() != 3){
     faa:	66 c0       	rjmp	.+204    	; 0x1078 <menuSetMaximumVoltage+0x170>
		sprintf(voltageArray, "%.2f", maximumVoltage);
     fac:	df 92       	push	r13
     fae:	cf 92       	push	r12
     fb0:	bf 92       	push	r11
     fb2:	af 92       	push	r10
     fb4:	ff 92       	push	r15
     fb6:	ef 92       	push	r14
     fb8:	1f 93       	push	r17
     fba:	0f 93       	push	r16
     fbc:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(6, 3, voltageArray );
     fc0:	a8 01       	movw	r20, r16
     fc2:	63 e0       	ldi	r22, 0x03	; 3
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
     fca:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
     fce:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
     fd2:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
     fd6:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT){
     fda:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <enkoderState>
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	23 30       	cpi	r18, 0x03	; 3
     fea:	99 f4       	brne	.+38     	; 0x1012 <menuSetMaximumVoltage+0x10a>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			maximumVoltage -= 0.01;
     ff4:	2a e0       	ldi	r18, 0x0A	; 10
     ff6:	37 ed       	ldi	r19, 0xD7	; 215
     ff8:	43 e2       	ldi	r20, 0x23	; 35
     ffa:	5c e3       	ldi	r21, 0x3C	; 60
     ffc:	6a 2d       	mov	r22, r10
     ffe:	7b 2d       	mov	r23, r11
    1000:	8c 2d       	mov	r24, r12
    1002:	9d 2d       	mov	r25, r13
    1004:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
    1008:	a6 2e       	mov	r10, r22
    100a:	b7 2e       	mov	r11, r23
    100c:	c8 2e       	mov	r12, r24
    100e:	d9 2e       	mov	r13, r25
    1010:	2d c0       	rjmp	.+90     	; 0x106c <menuSetMaximumVoltage+0x164>
		}else if(enkoderState == ROTATE_RIGHT){
    1012:	24 30       	cpi	r18, 0x04	; 4
    1014:	99 f4       	brne	.+38     	; 0x103c <menuSetMaximumVoltage+0x134>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			maximumVoltage += 0.01;
    101e:	2a e0       	ldi	r18, 0x0A	; 10
    1020:	37 ed       	ldi	r19, 0xD7	; 215
    1022:	43 e2       	ldi	r20, 0x23	; 35
    1024:	5c e3       	ldi	r21, 0x3C	; 60
    1026:	6a 2d       	mov	r22, r10
    1028:	7b 2d       	mov	r23, r11
    102a:	8c 2d       	mov	r24, r12
    102c:	9d 2d       	mov	r25, r13
    102e:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    1032:	a6 2e       	mov	r10, r22
    1034:	b7 2e       	mov	r11, r23
    1036:	c8 2e       	mov	r12, r24
    1038:	d9 2e       	mov	r13, r25
    103a:	18 c0       	rjmp	.+48     	; 0x106c <menuSetMaximumVoltage+0x164>
		}else if(enkoderState == PRESS_BUTTON){
    103c:	22 30       	cpi	r18, 0x02	; 2
    103e:	69 f4       	brne	.+26     	; 0x105a <menuSetMaximumVoltage+0x152>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			setMaximumVoltage(maximumVoltage);
    1048:	6a 2d       	mov	r22, r10
    104a:	7b 2d       	mov	r23, r11
    104c:	8c 2d       	mov	r24, r12
    104e:	9d 2d       	mov	r25, r13
    1050:	0e 94 0f 18 	call	0x301e	; 0x301e <setMaximumVoltage>
			displayClear();
    1054:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1058:	16 c0       	rjmp	.+44     	; 0x1086 <menuSetMaximumVoltage+0x17e>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    105a:	21 30       	cpi	r18, 0x01	; 1
    105c:	39 f4       	brne	.+14     	; 0x106c <menuSetMaximumVoltage+0x164>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    1066:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <menuSetMaximumVoltage+0x17e>
    106c:	8f e3       	ldi	r24, 0x3F	; 63
    106e:	9c e9       	ldi	r25, 0x9C	; 156
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <menuSetMaximumVoltage+0x168>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <menuSetMaximumVoltage+0x16e>
    1076:	00 00       	nop
	displayClear();
	displayShowStr(0,0," ÓÌÂ˜ÌÓÂ Ì‡ÔˇÊÂÌËÂ");
	displayShowStr(6,1,"Á‡ˇ‰‡");
	char voltageArray [5];
	float maximumVoltage = EEPROM_read(814) + (float)(EEPROM_read(815)/100.0);
	while(getTimerCount() != 3){
    1078:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	09 f0       	breq	.+2      	; 0x1082 <menuSetMaximumVoltage+0x17a>
    1080:	95 cf       	rjmp	.-214    	; 0xfac <menuSetMaximumVoltage+0xa4>
			displayClear();
			return;
		}
		_delay_ms(20);
	}
	displayClear();	
    1082:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	08 95       	ret

000010a6 <calibrationBat1>:

//*********Í‡ÎË·Ó‚Í‡ Ì‡ÔˇÊÂÌËˇ ·‡Ú‡ÂË 1*************
void calibrationBat1(){
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <calibrationBat1+0x16>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <calibrationBat1+0x18>
    10be:	1f 92       	push	r1
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    10cc:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú1");
    10d0:	42 ec       	ldi	r20, 0xC2	; 194
    10d2:	51 e0       	ldi	r21, 0x01	; 1
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	char voltageArray [5];
	float voltage = getVoltage(1);
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getVoltage>
    10e2:	a6 2e       	mov	r10, r22
    10e4:	b7 2e       	mov	r11, r23
    10e6:	c8 2e       	mov	r12, r24
    10e8:	d9 2e       	mov	r13, r25
	while(getTimerCount() != 3){
		sprintf(voltageArray, "%.2f", voltage);
    10ea:	0f 2e       	mov	r0, r31
    10ec:	fd eb       	ldi	r31, 0xBD	; 189
    10ee:	ef 2e       	mov	r14, r31
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	ff 2e       	mov	r15, r31
    10f4:	f0 2d       	mov	r31, r0
    10f6:	8e 01       	movw	r16, r28
    10f8:	0f 5f       	subi	r16, 0xFF	; 255
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú1");
	char voltageArray [5];
	float voltage = getVoltage(1);
	while(getTimerCount() != 3){
    10fc:	69 c0       	rjmp	.+210    	; 0x11d0 <calibrationBat1+0x12a>
		sprintf(voltageArray, "%.2f", voltage);
    10fe:	df 92       	push	r13
    1100:	cf 92       	push	r12
    1102:	bf 92       	push	r11
    1104:	af 92       	push	r10
    1106:	ff 92       	push	r15
    1108:	ef 92       	push	r14
    110a:	1f 93       	push	r17
    110c:	0f 93       	push	r16
    110e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(6, 1, voltageArray );
    1112:	a8 01       	movw	r20, r16
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	86 e0       	ldi	r24, 0x06	; 6
    1118:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    111c:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    1120:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    1124:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1128:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT){
    112c:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <enkoderState>
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	23 30       	cpi	r18, 0x03	; 3
    113c:	99 f4       	brne	.+38     	; 0x1164 <calibrationBat1+0xbe>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			voltage -= 0.01;
    1146:	2a e0       	ldi	r18, 0x0A	; 10
    1148:	37 ed       	ldi	r19, 0xD7	; 215
    114a:	43 e2       	ldi	r20, 0x23	; 35
    114c:	5c e3       	ldi	r21, 0x3C	; 60
    114e:	6a 2d       	mov	r22, r10
    1150:	7b 2d       	mov	r23, r11
    1152:	8c 2d       	mov	r24, r12
    1154:	9d 2d       	mov	r25, r13
    1156:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
    115a:	a6 2e       	mov	r10, r22
    115c:	b7 2e       	mov	r11, r23
    115e:	c8 2e       	mov	r12, r24
    1160:	d9 2e       	mov	r13, r25
    1162:	30 c0       	rjmp	.+96     	; 0x11c4 <calibrationBat1+0x11e>
		}else if(enkoderState == ROTATE_RIGHT){
    1164:	24 30       	cpi	r18, 0x04	; 4
    1166:	99 f4       	brne	.+38     	; 0x118e <calibrationBat1+0xe8>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			voltage += 0.01;
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	37 ed       	ldi	r19, 0xD7	; 215
    1174:	43 e2       	ldi	r20, 0x23	; 35
    1176:	5c e3       	ldi	r21, 0x3C	; 60
    1178:	6a 2d       	mov	r22, r10
    117a:	7b 2d       	mov	r23, r11
    117c:	8c 2d       	mov	r24, r12
    117e:	9d 2d       	mov	r25, r13
    1180:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    1184:	a6 2e       	mov	r10, r22
    1186:	b7 2e       	mov	r11, r23
    1188:	c8 2e       	mov	r12, r24
    118a:	d9 2e       	mov	r13, r25
    118c:	1b c0       	rjmp	.+54     	; 0x11c4 <calibrationBat1+0x11e>
		}else if(enkoderState == PRESS_BUTTON){
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	81 f4       	brne	.+32     	; 0x11b2 <calibrationBat1+0x10c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			setCoefficient(voltage, 1);
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	6a 2d       	mov	r22, r10
    119e:	7b 2d       	mov	r23, r11
    11a0:	8c 2d       	mov	r24, r12
    11a2:	9d 2d       	mov	r25, r13
    11a4:	0e 94 77 17 	call	0x2eee	; 0x2eee <setCoefficient>
			initWorkBattery();
    11a8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <initWorkBattery>
			displayClear();
    11ac:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <calibrationBat1+0x138>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    11b2:	21 30       	cpi	r18, 0x01	; 1
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <calibrationBat1+0x11e>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    11be:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <calibrationBat1+0x138>
    11c4:	8f e3       	ldi	r24, 0x3F	; 63
    11c6:	9c e9       	ldi	r25, 0x9C	; 156
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <calibrationBat1+0x122>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <calibrationBat1+0x128>
    11ce:	00 00       	nop
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú1");
	char voltageArray [5];
	float voltage = getVoltage(1);
	while(getTimerCount() != 3){
    11d0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	09 f0       	breq	.+2      	; 0x11da <calibrationBat1+0x134>
    11d8:	92 cf       	rjmp	.-220    	; 0x10fe <calibrationBat1+0x58>
			displayClear();
			return;
		}
		_delay_ms(20);
	}	
	displayClear();
    11da:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	bf 90       	pop	r11
    11fa:	af 90       	pop	r10
    11fc:	08 95       	ret

000011fe <calibrationBat2>:

//*********Í‡ÎË·Ó‚Í‡ Ì‡ÔˇÊÂÌËˇ ·‡Ú‡ÂË 2*************
void calibrationBat2(){
    11fe:	af 92       	push	r10
    1200:	bf 92       	push	r11
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	00 d0       	rcall	.+0      	; 0x1214 <calibrationBat2+0x16>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <calibrationBat2+0x18>
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    1224:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú2");
    1228:	42 ed       	ldi	r20, 0xD2	; 210
    122a:	51 e0       	ldi	r21, 0x01	; 1
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	char voltageArray [5];
	float voltage = getVoltage(2);
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getVoltage>
    123a:	a6 2e       	mov	r10, r22
    123c:	b7 2e       	mov	r11, r23
    123e:	c8 2e       	mov	r12, r24
    1240:	d9 2e       	mov	r13, r25
	while(getTimerCount() != 3){
		sprintf(voltageArray, "%.2f", voltage);
    1242:	0f 2e       	mov	r0, r31
    1244:	fd eb       	ldi	r31, 0xBD	; 189
    1246:	ef 2e       	mov	r14, r31
    1248:	f1 e0       	ldi	r31, 0x01	; 1
    124a:	ff 2e       	mov	r15, r31
    124c:	f0 2d       	mov	r31, r0
    124e:	8e 01       	movw	r16, r28
    1250:	0f 5f       	subi	r16, 0xFF	; 255
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú2");
	char voltageArray [5];
	float voltage = getVoltage(2);
	while(getTimerCount() != 3){
    1254:	69 c0       	rjmp	.+210    	; 0x1328 <calibrationBat2+0x12a>
		sprintf(voltageArray, "%.2f", voltage);
    1256:	df 92       	push	r13
    1258:	cf 92       	push	r12
    125a:	bf 92       	push	r11
    125c:	af 92       	push	r10
    125e:	ff 92       	push	r15
    1260:	ef 92       	push	r14
    1262:	1f 93       	push	r17
    1264:	0f 93       	push	r16
    1266:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(6, 1, voltageArray );
    126a:	a8 01       	movw	r20, r16
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	86 e0       	ldi	r24, 0x06	; 6
    1270:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    1274:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    1278:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    127c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1280:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT){
    1284:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <enkoderState>
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	23 30       	cpi	r18, 0x03	; 3
    1294:	99 f4       	brne	.+38     	; 0x12bc <calibrationBat2+0xbe>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			voltage -= 0.01;
    129e:	2a e0       	ldi	r18, 0x0A	; 10
    12a0:	37 ed       	ldi	r19, 0xD7	; 215
    12a2:	43 e2       	ldi	r20, 0x23	; 35
    12a4:	5c e3       	ldi	r21, 0x3C	; 60
    12a6:	6a 2d       	mov	r22, r10
    12a8:	7b 2d       	mov	r23, r11
    12aa:	8c 2d       	mov	r24, r12
    12ac:	9d 2d       	mov	r25, r13
    12ae:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
    12b2:	a6 2e       	mov	r10, r22
    12b4:	b7 2e       	mov	r11, r23
    12b6:	c8 2e       	mov	r12, r24
    12b8:	d9 2e       	mov	r13, r25
    12ba:	30 c0       	rjmp	.+96     	; 0x131c <calibrationBat2+0x11e>
		}else if(enkoderState == ROTATE_RIGHT){
    12bc:	24 30       	cpi	r18, 0x04	; 4
    12be:	99 f4       	brne	.+38     	; 0x12e6 <calibrationBat2+0xe8>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			voltage += 0.01;
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	37 ed       	ldi	r19, 0xD7	; 215
    12cc:	43 e2       	ldi	r20, 0x23	; 35
    12ce:	5c e3       	ldi	r21, 0x3C	; 60
    12d0:	6a 2d       	mov	r22, r10
    12d2:	7b 2d       	mov	r23, r11
    12d4:	8c 2d       	mov	r24, r12
    12d6:	9d 2d       	mov	r25, r13
    12d8:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    12dc:	a6 2e       	mov	r10, r22
    12de:	b7 2e       	mov	r11, r23
    12e0:	c8 2e       	mov	r12, r24
    12e2:	d9 2e       	mov	r13, r25
    12e4:	1b c0       	rjmp	.+54     	; 0x131c <calibrationBat2+0x11e>
		}else if(enkoderState == PRESS_BUTTON){
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	81 f4       	brne	.+32     	; 0x130a <calibrationBat2+0x10c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			setCoefficient(voltage, 2);
    12f2:	42 e0       	ldi	r20, 0x02	; 2
    12f4:	6a 2d       	mov	r22, r10
    12f6:	7b 2d       	mov	r23, r11
    12f8:	8c 2d       	mov	r24, r12
    12fa:	9d 2d       	mov	r25, r13
    12fc:	0e 94 77 17 	call	0x2eee	; 0x2eee <setCoefficient>
			initWorkBattery();
    1300:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <initWorkBattery>
			displayClear();
    1304:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1308:	16 c0       	rjmp	.+44     	; 0x1336 <calibrationBat2+0x138>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    130a:	21 30       	cpi	r18, 0x01	; 1
    130c:	39 f4       	brne	.+14     	; 0x131c <calibrationBat2+0x11e>
		setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
		displayClear();
    1316:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
		return;
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <calibrationBat2+0x138>
    131c:	8f e3       	ldi	r24, 0x3F	; 63
    131e:	9c e9       	ldi	r25, 0x9C	; 156
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <calibrationBat2+0x122>
    1324:	00 c0       	rjmp	.+0      	; 0x1326 <calibrationBat2+0x128>
    1326:	00 00       	nop
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú2");
	char voltageArray [5];
	float voltage = getVoltage(2);
	while(getTimerCount() != 3){
    1328:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	09 f0       	breq	.+2      	; 0x1332 <calibrationBat2+0x134>
    1330:	92 cf       	rjmp	.-220    	; 0x1256 <calibrationBat2+0x58>
		displayClear();
		return;
		}
		_delay_ms(20);
	}
	displayClear();	
    1332:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	08 95       	ret

00001356 <calibrationBat3>:

//*********Í‡ÎË·Ó‚Í‡ Ì‡ÔˇÊÂÌËˇ ·‡Ú‡ÂË 3*************
void calibrationBat3(){
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	00 d0       	rcall	.+0      	; 0x136c <calibrationBat3+0x16>
    136c:	00 d0       	rcall	.+0      	; 0x136e <calibrationBat3+0x18>
    136e:	1f 92       	push	r1
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    137c:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú3");
    1380:	42 ee       	ldi	r20, 0xE2	; 226
    1382:	51 e0       	ldi	r21, 0x01	; 1
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	char voltageArray [5];
	float voltage = getVoltage(3);
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <getVoltage>
    1392:	a6 2e       	mov	r10, r22
    1394:	b7 2e       	mov	r11, r23
    1396:	c8 2e       	mov	r12, r24
    1398:	d9 2e       	mov	r13, r25
	while(getTimerCount() != 3){
		sprintf(voltageArray, "%.2f", voltage);
    139a:	0f 2e       	mov	r0, r31
    139c:	fd eb       	ldi	r31, 0xBD	; 189
    139e:	ef 2e       	mov	r14, r31
    13a0:	f1 e0       	ldi	r31, 0x01	; 1
    13a2:	ff 2e       	mov	r15, r31
    13a4:	f0 2d       	mov	r31, r0
    13a6:	8e 01       	movw	r16, r28
    13a8:	0f 5f       	subi	r16, 0xFF	; 255
    13aa:	1f 4f       	sbci	r17, 0xFF	; 255
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú3");
	char voltageArray [5];
	float voltage = getVoltage(3);
	while(getTimerCount() != 3){
    13ac:	69 c0       	rjmp	.+210    	; 0x1480 <calibrationBat3+0x12a>
		sprintf(voltageArray, "%.2f", voltage);
    13ae:	df 92       	push	r13
    13b0:	cf 92       	push	r12
    13b2:	bf 92       	push	r11
    13b4:	af 92       	push	r10
    13b6:	ff 92       	push	r15
    13b8:	ef 92       	push	r14
    13ba:	1f 93       	push	r17
    13bc:	0f 93       	push	r16
    13be:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(6, 1, voltageArray );
    13c2:	a8 01       	movw	r20, r16
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	86 e0       	ldi	r24, 0x06	; 6
    13c8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    13cc:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    13d0:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    13d4:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    13d8:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT){
    13dc:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <enkoderState>
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	23 30       	cpi	r18, 0x03	; 3
    13ec:	99 f4       	brne	.+38     	; 0x1414 <calibrationBat3+0xbe>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			voltage -= 0.01;
    13f6:	2a e0       	ldi	r18, 0x0A	; 10
    13f8:	37 ed       	ldi	r19, 0xD7	; 215
    13fa:	43 e2       	ldi	r20, 0x23	; 35
    13fc:	5c e3       	ldi	r21, 0x3C	; 60
    13fe:	6a 2d       	mov	r22, r10
    1400:	7b 2d       	mov	r23, r11
    1402:	8c 2d       	mov	r24, r12
    1404:	9d 2d       	mov	r25, r13
    1406:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
    140a:	a6 2e       	mov	r10, r22
    140c:	b7 2e       	mov	r11, r23
    140e:	c8 2e       	mov	r12, r24
    1410:	d9 2e       	mov	r13, r25
    1412:	30 c0       	rjmp	.+96     	; 0x1474 <calibrationBat3+0x11e>
		}else if(enkoderState == ROTATE_RIGHT){
    1414:	24 30       	cpi	r18, 0x04	; 4
    1416:	99 f4       	brne	.+38     	; 0x143e <calibrationBat3+0xe8>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			voltage += 0.01;
    1420:	2a e0       	ldi	r18, 0x0A	; 10
    1422:	37 ed       	ldi	r19, 0xD7	; 215
    1424:	43 e2       	ldi	r20, 0x23	; 35
    1426:	5c e3       	ldi	r21, 0x3C	; 60
    1428:	6a 2d       	mov	r22, r10
    142a:	7b 2d       	mov	r23, r11
    142c:	8c 2d       	mov	r24, r12
    142e:	9d 2d       	mov	r25, r13
    1430:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    1434:	a6 2e       	mov	r10, r22
    1436:	b7 2e       	mov	r11, r23
    1438:	c8 2e       	mov	r12, r24
    143a:	d9 2e       	mov	r13, r25
    143c:	1b c0       	rjmp	.+54     	; 0x1474 <calibrationBat3+0x11e>
		}else if(enkoderState == PRESS_BUTTON){
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	81 f4       	brne	.+32     	; 0x1462 <calibrationBat3+0x10c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			setCoefficient(voltage, 3);
    144a:	43 e0       	ldi	r20, 0x03	; 3
    144c:	6a 2d       	mov	r22, r10
    144e:	7b 2d       	mov	r23, r11
    1450:	8c 2d       	mov	r24, r12
    1452:	9d 2d       	mov	r25, r13
    1454:	0e 94 77 17 	call	0x2eee	; 0x2eee <setCoefficient>
			initWorkBattery();
    1458:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <initWorkBattery>
			displayClear();
    145c:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1460:	16 c0       	rjmp	.+44     	; 0x148e <calibrationBat3+0x138>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    1462:	21 30       	cpi	r18, 0x01	; 1
    1464:	39 f4       	brne	.+14     	; 0x1474 <calibrationBat3+0x11e>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    146e:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1472:	0d c0       	rjmp	.+26     	; 0x148e <calibrationBat3+0x138>
    1474:	8f e3       	ldi	r24, 0x3F	; 63
    1476:	9c e9       	ldi	r25, 0x9C	; 156
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <calibrationBat3+0x122>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <calibrationBat3+0x128>
    147e:	00 00       	nop
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	displayShowStr(3,0,"Ì‡ÔˇÊÂÌËÂ ·‡Ú3");
	char voltageArray [5];
	float voltage = getVoltage(3);
	while(getTimerCount() != 3){
    1480:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	09 f0       	breq	.+2      	; 0x148a <calibrationBat3+0x134>
    1488:	92 cf       	rjmp	.-220    	; 0x13ae <calibrationBat3+0x58>
			displayClear();
			return;
		}
		_delay_ms(20);
	}	
	displayClear();
    148a:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	df 90       	pop	r13
    14a6:	cf 90       	pop	r12
    14a8:	bf 90       	pop	r11
    14aa:	af 90       	pop	r10
    14ac:	08 95       	ret

000014ae <showMenuADC>:
	displayClear();
}

//**********ÏÂÌ˛ Ì‡ÒÚÓÂÍ ¿÷œ**********
void showMenuADC(void){
	menuItem = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    14bc:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	while(getTimerCount() != 3){
    14c0:	c0 c0       	rjmp	.+384    	; 0x1642 <showMenuADC+0x194>
		displayShowStr(0, menuItem, "*");
    14c2:	48 e3       	ldi	r20, 0x38	; 56
    14c4:	51 e0       	ldi	r21, 0x01	; 1
    14c6:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(4,0,"Ã≈Õﬁ ¿÷œ");
    14d0:	42 ef       	ldi	r20, 0xF2	; 242
    14d2:	51 e0       	ldi	r21, 0x01	; 1
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,1,"Õ‡ÔˇÊÂÌËÂ ‡Áˇ‰‡");
    14dc:	4b ef       	ldi	r20, 0xFB	; 251
    14de:	51 e0       	ldi	r21, 0x01	; 1
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,2,"H‡ÔˇÊÂÌËÂ Á‡ˇ‰‡");
    14e8:	4e e0       	ldi	r20, 0x0E	; 14
    14ea:	52 e0       	ldi	r21, 0x02	; 2
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,3," ‡ÎË·Ó‚‡Ú¸ ¡¿“1");
    14f4:	40 e2       	ldi	r20, 0x20	; 32
    14f6:	52 e0       	ldi	r21, 0x02	; 2
    14f8:	63 e0       	ldi	r22, 0x03	; 3
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,4," ‡ÎË·Ó‚‡Ú¸ ¡¿“2");
    1500:	41 e3       	ldi	r20, 0x31	; 49
    1502:	52 e0       	ldi	r21, 0x02	; 2
    1504:	64 e0       	ldi	r22, 0x04	; 4
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,5," ‡ÎË·Ó‚‡Ú¸ ¡¿“3");
    150c:	42 e4       	ldi	r20, 0x42	; 66
    150e:	52 e0       	ldi	r21, 0x02	; 2
    1510:	65 e0       	ldi	r22, 0x05	; 5
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,6,"¬€’Œƒ");
    1518:	43 e5       	ldi	r20, 0x53	; 83
    151a:	52 e0       	ldi	r21, 0x02	; 2
    151c:	66 e0       	ldi	r22, 0x06	; 6
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    1524:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    1528:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    152c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1530:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == PRESS_BUTTON){
    1534:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	e1 f5       	brne	.+120    	; 0x15b4 <showMenuADC+0x106>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if(menuItem == 1){
    1544:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	31 f4       	brne	.+12     	; 0x1558 <showMenuADC+0xaa>
				menuSetMinimumVoltage();
    154c:	0e 94 b9 06 	call	0xd72	; 0xd72 <menuSetMinimumVoltage>
				menuItem = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    1556:	12 c0       	rjmp	.+36     	; 0x157c <showMenuADC+0xce>
			}
			if(menuItem == 2) {
    1558:	82 30       	cpi	r24, 0x02	; 2
    155a:	31 f4       	brne	.+12     	; 0x1568 <showMenuADC+0xba>
				menuSetMaximumVoltage();
    155c:	0e 94 84 07 	call	0xf08	; 0xf08 <menuSetMaximumVoltage>
				menuItem = 2;
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <showMenuADC+0xe2>
			}
			if(menuItem == 3){
    1568:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	31 f4       	brne	.+12     	; 0x157c <showMenuADC+0xce>
				calibrationBat1();
    1570:	0e 94 53 08 	call	0x10a6	; 0x10a6 <calibrationBat1>
				menuItem = 3;
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <showMenuADC+0xf6>
			}
			if(menuItem == 4){
    157c:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	31 f4       	brne	.+12     	; 0x1590 <showMenuADC+0xe2>
				calibrationBat2();
    1584:	0e 94 ff 08 	call	0x11fe	; 0x11fe <calibrationBat2>
				menuItem = 4;
    1588:	84 e0       	ldi	r24, 0x04	; 4
    158a:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    158e:	53 c0       	rjmp	.+166    	; 0x1636 <showMenuADC+0x188>
			}
			if(menuItem == 5){
    1590:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1594:	85 30       	cpi	r24, 0x05	; 5
    1596:	31 f4       	brne	.+12     	; 0x15a4 <showMenuADC+0xf6>
				calibrationBat3();
    1598:	0e 94 ab 09 	call	0x1356	; 0x1356 <calibrationBat3>
				menuItem = 5;
    159c:	85 e0       	ldi	r24, 0x05	; 5
    159e:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    15a2:	49 c0       	rjmp	.+146    	; 0x1636 <showMenuADC+0x188>
			}
			if(menuItem == 6){
    15a4:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    15a8:	86 30       	cpi	r24, 0x06	; 6
    15aa:	09 f0       	breq	.+2      	; 0x15ae <showMenuADC+0x100>
    15ac:	44 c0       	rjmp	.+136    	; 0x1636 <showMenuADC+0x188>
				displayClear();
    15ae:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
				return;
    15b2:	08 95       	ret
			}
		}else if(enkoderState == ROTATE_LEFT && menuItem > 1){
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	d1 f4       	brne	.+52     	; 0x15ec <showMenuADC+0x13e>
    15b8:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	d8 f1       	brcs	.+118    	; 0x1636 <showMenuADC+0x188>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    15c8:	49 e1       	ldi	r20, 0x19	; 25
    15ca:	51 e0       	ldi	r21, 0x01	; 1
    15cc:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			--menuItem;
    15d6:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    15da:	61 50       	subi	r22, 0x01	; 1
    15dc:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    15e0:	48 e3       	ldi	r20, 0x38	; 56
    15e2:	51 e0       	ldi	r21, 0x01	; 1
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    15ea:	25 c0       	rjmp	.+74     	; 0x1636 <showMenuADC+0x188>
		}else if(enkoderState == ROTATE_RIGHT && menuItem < 6){
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	d1 f4       	brne	.+52     	; 0x1624 <showMenuADC+0x176>
    15f0:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    15f4:	86 30       	cpi	r24, 0x06	; 6
    15f6:	f8 f4       	brcc	.+62     	; 0x1636 <showMenuADC+0x188>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    1600:	49 e1       	ldi	r20, 0x19	; 25
    1602:	51 e0       	ldi	r21, 0x01	; 1
    1604:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			++menuItem;
    160e:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1612:	6f 5f       	subi	r22, 0xFF	; 255
    1614:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    1618:	48 e3       	ldi	r20, 0x38	; 56
    161a:	51 e0       	ldi	r21, 0x01	; 1
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1622:	09 c0       	rjmp	.+18     	; 0x1636 <showMenuADC+0x188>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	39 f4       	brne	.+14     	; 0x1636 <showMenuADC+0x188>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    1630:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1634:	08 95       	ret
    1636:	8f e1       	ldi	r24, 0x1F	; 31
    1638:	9e e4       	ldi	r25, 0x4E	; 78
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <showMenuADC+0x18c>
    163e:	00 c0       	rjmp	.+0      	; 0x1640 <showMenuADC+0x192>
    1640:	00 00       	nop
//**********ÏÂÌ˛ Ì‡ÒÚÓÂÍ ¿÷œ**********
void showMenuADC(void){
	menuItem = 1;
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	while(getTimerCount() != 3){
    1642:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	09 f0       	breq	.+2      	; 0x164c <showMenuADC+0x19e>
    164a:	3b cf       	rjmp	.-394    	; 0x14c2 <showMenuADC+0x14>
			displayClear();
			return;
		}
		_delay_ms(10);
	}
	displayClear();
    164c:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
    1650:	08 95       	ret

00001652 <addingFingerInLibrary>:
	}	
	displayClear();
}

//****************‰Ó·‡‚ÎÂÌËÂ ÓÚÔÂ˜‡ÚÍ‡*****************
void addingFingerInLibrary(){
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	1f 92       	push	r1
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    166e:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(3,0,"‰Ó·‡‚ËÚ¸ ÓÚÔÂ˜‡ÚÓÍ");
    1672:	49 e5       	ldi	r20, 0x59	; 89
    1674:	52 e0       	ldi	r21, 0x02	; 2
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(0,1, "‚ ·Ë·ÎËÓÚÂÍÛ");
    167e:	4c e6       	ldi	r20, 0x6C	; 108
    1680:	52 e0       	ldi	r21, 0x02	; 2
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	char liblary = 1;
    168a:	dd 24       	eor	r13, r13
    168c:	d3 94       	inc	r13
	char array[1];
	char result;
	while(getTimerCount() != 3){
		sprintf(array, "%d", liblary);
    168e:	0f 2e       	mov	r0, r31
    1690:	f2 e2       	ldi	r31, 0x22	; 34
    1692:	ef 2e       	mov	r14, r31
    1694:	f1 e0       	ldi	r31, 0x01	; 1
    1696:	ff 2e       	mov	r15, r31
    1698:	f0 2d       	mov	r31, r0
    169a:	8e 01       	movw	r16, r28
    169c:	0f 5f       	subi	r16, 0xFF	; 255
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
	displayShowStr(3,0,"‰Ó·‡‚ËÚ¸ ÓÚÔÂ˜‡ÚÓÍ");
	displayShowStr(0,1, "‚ ·Ë·ÎËÓÚÂÍÛ");
	char liblary = 1;
	char array[1];
	char result;
	while(getTimerCount() != 3){
    16a0:	66 c0       	rjmp	.+204    	; 0x176e <addingFingerInLibrary+0x11c>
		sprintf(array, "%d", liblary);
    16a2:	1f 92       	push	r1
    16a4:	df 92       	push	r13
    16a6:	ff 92       	push	r15
    16a8:	ef 92       	push	r14
    16aa:	1f 93       	push	r17
    16ac:	0f 93       	push	r16
    16ae:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(13,1, array);
    16b2:	a8 01       	movw	r20, r16
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	8d e0       	ldi	r24, 0x0D	; 13
    16b8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    16bc:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    16c0:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    16c4:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    16c8:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT && liblary > 1){
    16cc:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	49 f4       	brne	.+18     	; 0x16f2 <addingFingerInLibrary+0xa0>
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	2d 15       	cp	r18, r13
    16e4:	f0 f5       	brcc	.+124    	; 0x1762 <addingFingerInLibrary+0x110>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			--liblary;
    16ee:	da 94       	dec	r13
    16f0:	38 c0       	rjmp	.+112    	; 0x1762 <addingFingerInLibrary+0x110>
		}else if(enkoderState == ROTATE_RIGHT && liblary < 3){
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	49 f4       	brne	.+18     	; 0x1708 <addingFingerInLibrary+0xb6>
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	8d 15       	cp	r24, r13
    16fa:	98 f1       	brcs	.+102    	; 0x1762 <addingFingerInLibrary+0x110>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			++liblary;
    1704:	d3 94       	inc	r13
    1706:	2d c0       	rjmp	.+90     	; 0x1762 <addingFingerInLibrary+0x110>
		}else if(enkoderState == PRESS_BUTTON){
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	11 f5       	brne	.+68     	; 0x1750 <addingFingerInLibrary+0xfe>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			result = addingFingerR300(liblary);
    1714:	8d 2d       	mov	r24, r13
    1716:	0e 94 82 11 	call	0x2304	; 0x2304 <addingFingerR300>
			if(result)
    171a:	88 23       	and	r24, r24
    171c:	39 f0       	breq	.+14     	; 0x172c <addingFingerInLibrary+0xda>
				displayShowStr(0,3,"Û‰‡˜ÌÓ ‰Ó·‡‚ÎÂÌ  ");
    171e:	49 e7       	ldi	r20, 0x79	; 121
    1720:	52 e0       	ldi	r21, 0x02	; 2
    1722:	63 e0       	ldi	r22, 0x03	; 3
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    172a:	06 c0       	rjmp	.+12     	; 0x1738 <addingFingerInLibrary+0xe6>
			else
				displayShowStr(0,3,"Ó¯Ë·Í‡ ‰Ó·‡‚ÎÂÌËˇ");
    172c:	4b e8       	ldi	r20, 0x8B	; 139
    172e:	52 e0       	ldi	r21, 0x02	; 2
    1730:	63 e0       	ldi	r22, 0x03	; 3
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1738:	9f ef       	ldi	r25, 0xFF	; 255
    173a:	29 e6       	ldi	r18, 0x69	; 105
    173c:	88 e1       	ldi	r24, 0x18	; 24
    173e:	91 50       	subi	r25, 0x01	; 1
    1740:	20 40       	sbci	r18, 0x00	; 0
    1742:	80 40       	sbci	r24, 0x00	; 0
    1744:	e1 f7       	brne	.-8      	; 0x173e <addingFingerInLibrary+0xec>
    1746:	00 c0       	rjmp	.+0      	; 0x1748 <addingFingerInLibrary+0xf6>
    1748:	00 00       	nop
			_delay_ms(1000);
			displayClear();
    174a:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    174e:	16 c0       	rjmp	.+44     	; 0x177c <addingFingerInLibrary+0x12a>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	39 f4       	brne	.+14     	; 0x1762 <addingFingerInLibrary+0x110>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    175c:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1760:	0d c0       	rjmp	.+26     	; 0x177c <addingFingerInLibrary+0x12a>
    1762:	8f e0       	ldi	r24, 0x0F	; 15
    1764:	97 e2       	ldi	r25, 0x27	; 39
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <addingFingerInLibrary+0x114>
    176a:	00 c0       	rjmp	.+0      	; 0x176c <addingFingerInLibrary+0x11a>
    176c:	00 00       	nop
	displayShowStr(3,0,"‰Ó·‡‚ËÚ¸ ÓÚÔÂ˜‡ÚÓÍ");
	displayShowStr(0,1, "‚ ·Ë·ÎËÓÚÂÍÛ");
	char liblary = 1;
	char array[1];
	char result;
	while(getTimerCount() != 3){
    176e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	09 f0       	breq	.+2      	; 0x1778 <addingFingerInLibrary+0x126>
    1776:	95 cf       	rjmp	.-214    	; 0x16a2 <addingFingerInLibrary+0x50>
			displayClear();
			return;
		}
		_delay_ms(5);
	}
	displayClear();
    1778:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
    177c:	0f 90       	pop	r0
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	08 95       	ret

0000178e <deliteFingerInLibrary>:

//****************Û‰‡ÎÂÌËÂ ·Ë·ÎËÓÚÂÍË ÓÚÔÂ˜‡ÚÍÓ‚*****************
void deliteFingerInLibrary(){
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	1f 92       	push	r1
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    17aa:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(2,0,"Û‰‡ÎËÚ¸ ·Ë·ÎËÓÚÂÍÛ");
    17ae:	4d e9       	ldi	r20, 0x9D	; 157
    17b0:	52 e0       	ldi	r21, 0x02	; 2
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	displayShowStr(6,1, "ÓÚÔÂ˜‡ÚÍÓ‚");
    17ba:	4e e9       	ldi	r20, 0x9E	; 158
    17bc:	53 e0       	ldi	r21, 0x03	; 3
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	86 e0       	ldi	r24, 0x06	; 6
    17c2:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	char liblary = 1;
    17c6:	dd 24       	eor	r13, r13
    17c8:	d3 94       	inc	r13
	char array[1];
	char result;
	while(getTimerCount() != 3){
		sprintf(array, "%d", liblary);
    17ca:	0f 2e       	mov	r0, r31
    17cc:	f2 e2       	ldi	r31, 0x22	; 34
    17ce:	ef 2e       	mov	r14, r31
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	ff 2e       	mov	r15, r31
    17d4:	f0 2d       	mov	r31, r0
    17d6:	8e 01       	movw	r16, r28
    17d8:	0f 5f       	subi	r16, 0xFF	; 255
    17da:	1f 4f       	sbci	r17, 0xFF	; 255
	displayShowStr(2,0,"Û‰‡ÎËÚ¸ ·Ë·ÎËÓÚÂÍÛ");
	displayShowStr(6,1, "ÓÚÔÂ˜‡ÚÍÓ‚");
	char liblary = 1;
	char array[1];
	char result;
	while(getTimerCount() != 3){
    17dc:	66 c0       	rjmp	.+204    	; 0x18aa <deliteFingerInLibrary+0x11c>
		sprintf(array, "%d", liblary);
    17de:	1f 92       	push	r1
    17e0:	df 92       	push	r13
    17e2:	ff 92       	push	r15
    17e4:	ef 92       	push	r14
    17e6:	1f 93       	push	r17
    17e8:	0f 93       	push	r16
    17ea:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		displayShowStr(10,2, array);
    17ee:	a8 01       	movw	r20, r16
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	8a e0       	ldi	r24, 0x0A	; 10
    17f4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    17f8:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    17fc:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    1800:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1804:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT && liblary > 1){
    1808:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	49 f4       	brne	.+18     	; 0x182e <deliteFingerInLibrary+0xa0>
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	2d 15       	cp	r18, r13
    1820:	f0 f5       	brcc	.+124    	; 0x189e <deliteFingerInLibrary+0x110>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			--liblary;
    182a:	da 94       	dec	r13
    182c:	38 c0       	rjmp	.+112    	; 0x189e <deliteFingerInLibrary+0x110>
		}else if(enkoderState == ROTATE_RIGHT && liblary < 3){
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	49 f4       	brne	.+18     	; 0x1844 <deliteFingerInLibrary+0xb6>
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	8d 15       	cp	r24, r13
    1836:	98 f1       	brcs	.+102    	; 0x189e <deliteFingerInLibrary+0x110>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			++liblary;
    1840:	d3 94       	inc	r13
    1842:	2d c0       	rjmp	.+90     	; 0x189e <deliteFingerInLibrary+0x110>
		}else if(enkoderState == PRESS_BUTTON){
    1844:	82 30       	cpi	r24, 0x02	; 2
    1846:	11 f5       	brne	.+68     	; 0x188c <deliteFingerInLibrary+0xfe>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			result = deleteFingerInLibrary(liblary);
    1850:	8d 2d       	mov	r24, r13
    1852:	0e 94 f5 10 	call	0x21ea	; 0x21ea <deleteFingerInLibrary>
			if(result)
    1856:	88 23       	and	r24, r24
    1858:	39 f0       	breq	.+14     	; 0x1868 <deliteFingerInLibrary+0xda>
				displayShowStr(0,3,"·Ë·ÎËÓÚÂÍ‡ Û‰‡ÎÂÌ‡");
    185a:	40 eb       	ldi	r20, 0xB0	; 176
    185c:	52 e0       	ldi	r21, 0x02	; 2
    185e:	63 e0       	ldi	r22, 0x03	; 3
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1866:	06 c0       	rjmp	.+12     	; 0x1874 <deliteFingerInLibrary+0xe6>
			else
				displayShowStr(0,3,"Ó¯Ë·Í‡ Û‰‡ÎÂÌËˇ   ");
    1868:	43 ec       	ldi	r20, 0xC3	; 195
    186a:	52 e0       	ldi	r21, 0x02	; 2
    186c:	63 e0       	ldi	r22, 0x03	; 3
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	29 e6       	ldi	r18, 0x69	; 105
    1878:	88 e1       	ldi	r24, 0x18	; 24
    187a:	91 50       	subi	r25, 0x01	; 1
    187c:	20 40       	sbci	r18, 0x00	; 0
    187e:	80 40       	sbci	r24, 0x00	; 0
    1880:	e1 f7       	brne	.-8      	; 0x187a <deliteFingerInLibrary+0xec>
    1882:	00 c0       	rjmp	.+0      	; 0x1884 <deliteFingerInLibrary+0xf6>
    1884:	00 00       	nop
			_delay_ms(1000);
			displayClear();
    1886:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    188a:	16 c0       	rjmp	.+44     	; 0x18b8 <deliteFingerInLibrary+0x12a>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	39 f4       	brne	.+14     	; 0x189e <deliteFingerInLibrary+0x110>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    1898:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <deliteFingerInLibrary+0x12a>
    189e:	8f e0       	ldi	r24, 0x0F	; 15
    18a0:	97 e2       	ldi	r25, 0x27	; 39
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <deliteFingerInLibrary+0x114>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <deliteFingerInLibrary+0x11a>
    18a8:	00 00       	nop
	displayShowStr(2,0,"Û‰‡ÎËÚ¸ ·Ë·ÎËÓÚÂÍÛ");
	displayShowStr(6,1, "ÓÚÔÂ˜‡ÚÍÓ‚");
	char liblary = 1;
	char array[1];
	char result;
	while(getTimerCount() != 3){
    18aa:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    18ae:	83 30       	cpi	r24, 0x03	; 3
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <deliteFingerInLibrary+0x126>
    18b2:	95 cf       	rjmp	.-214    	; 0x17de <deliteFingerInLibrary+0x50>
			displayClear();
			return;
		}
		_delay_ms(5);
	}
	displayClear();
    18b4:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
}
    18b8:	0f 90       	pop	r0
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	08 95       	ret

000018ca <showMenuFingerprints>:
	timerOff();
}

//********ÏÂÌ˛ Ì‡ÒÚÓÂÍ ÓÚÔÂ˜‡ÚÍÓ‚*******
void showMenuFingerprints(void){
	menuItem = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    18d8:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	while(getTimerCount() != 3){
    18dc:	9d c0       	rjmp	.+314    	; 0x1a18 <showMenuFingerprints+0x14e>
		displayShowStr(0, menuItem, "*");
    18de:	48 e3       	ldi	r20, 0x38	; 56
    18e0:	51 e0       	ldi	r21, 0x01	; 1
    18e2:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(3,0,"Ã≈Õﬁ Œ“œ≈◊¿“ Œ¬");
    18ec:	46 ed       	ldi	r20, 0xD6	; 214
    18ee:	52 e0       	ldi	r21, 0x02	; 2
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,1,"ƒÓ·‡‚ËÚ¸ ÓÚÔÂ˜‡ÚÓÍ");
    18f8:	46 ee       	ldi	r20, 0xE6	; 230
    18fa:	52 e0       	ldi	r21, 0x02	; 2
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,2,"”‰‡ÎËÚ¸ ÓÚÔÂ˜‡ÚÍË");
    1904:	49 ef       	ldi	r20, 0xF9	; 249
    1906:	52 e0       	ldi	r21, 0x02	; 2
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,3,"»ÁÏÂÌËÚ¸ Ô‡ÓÎ¸");
    1910:	4b e0       	ldi	r20, 0x0B	; 11
    1912:	53 e0       	ldi	r21, 0x03	; 3
    1914:	63 e0       	ldi	r22, 0x03	; 3
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,4,"¬€’Œƒ");
    191c:	43 e5       	ldi	r20, 0x53	; 83
    191e:	52 e0       	ldi	r21, 0x02	; 2
    1920:	64 e0       	ldi	r22, 0x04	; 4
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    1928:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    192c:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    1930:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1934:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == PRESS_BUTTON){
    1938:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	29 f5       	brne	.+74     	; 0x198a <showMenuFingerprints+0xc0>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if(menuItem == 1){
    1948:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	31 f4       	brne	.+12     	; 0x195c <showMenuFingerprints+0x92>
				addingFingerInLibrary();
    1950:	0e 94 29 0b 	call	0x1652	; 0x1652 <addingFingerInLibrary>
				menuItem = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    195a:	0f c0       	rjmp	.+30     	; 0x197a <showMenuFingerprints+0xb0>
			}
			if(menuItem == 2) {
    195c:	82 30       	cpi	r24, 0x02	; 2
    195e:	31 f4       	brne	.+12     	; 0x196c <showMenuFingerprints+0xa2>
				deliteFingerInLibrary();
    1960:	0e 94 c7 0b 	call	0x178e	; 0x178e <deliteFingerInLibrary>
				menuItem = 2;
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    196a:	50 c0       	rjmp	.+160    	; 0x1a0c <showMenuFingerprints+0x142>
			}
			if(menuItem == 3){
    196c:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	19 f4       	brne	.+6      	; 0x197a <showMenuFingerprints+0xb0>
				//showMenuSetingTimer();
				menuItem = 3;
    1974:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    1978:	49 c0       	rjmp	.+146    	; 0x1a0c <showMenuFingerprints+0x142>
			}
			if(menuItem == 4){
    197a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	09 f0       	breq	.+2      	; 0x1984 <showMenuFingerprints+0xba>
    1982:	44 c0       	rjmp	.+136    	; 0x1a0c <showMenuFingerprints+0x142>
				displayClear();
    1984:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
				return;
    1988:	08 95       	ret
			}
		}else if(enkoderState == ROTATE_LEFT && menuItem > 1){
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	d1 f4       	brne	.+52     	; 0x19c2 <showMenuFingerprints+0xf8>
    198e:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	d8 f1       	brcs	.+118    	; 0x1a0c <showMenuFingerprints+0x142>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    199e:	49 e1       	ldi	r20, 0x19	; 25
    19a0:	51 e0       	ldi	r21, 0x01	; 1
    19a2:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			--menuItem;
    19ac:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    19b0:	61 50       	subi	r22, 0x01	; 1
    19b2:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    19b6:	48 e3       	ldi	r20, 0x38	; 56
    19b8:	51 e0       	ldi	r21, 0x01	; 1
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    19c0:	25 c0       	rjmp	.+74     	; 0x1a0c <showMenuFingerprints+0x142>
		}else if(enkoderState == ROTATE_RIGHT && menuItem < 4){
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	d1 f4       	brne	.+52     	; 0x19fa <showMenuFingerprints+0x130>
    19c6:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	f8 f4       	brcc	.+62     	; 0x1a0c <showMenuFingerprints+0x142>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    19d6:	49 e1       	ldi	r20, 0x19	; 25
    19d8:	51 e0       	ldi	r21, 0x01	; 1
    19da:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			++menuItem;
    19e4:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    19e8:	6f 5f       	subi	r22, 0xFF	; 255
    19ea:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    19ee:	48 e3       	ldi	r20, 0x38	; 56
    19f0:	51 e0       	ldi	r21, 0x01	; 1
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <showMenuFingerprints+0x142>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	39 f4       	brne	.+14     	; 0x1a0c <showMenuFingerprints+0x142>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    1a06:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1a0a:	08 95       	ret
    1a0c:	8f e1       	ldi	r24, 0x1F	; 31
    1a0e:	9e e4       	ldi	r25, 0x4E	; 78
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <showMenuFingerprints+0x146>
    1a14:	00 c0       	rjmp	.+0      	; 0x1a16 <showMenuFingerprints+0x14c>
    1a16:	00 00       	nop
//********ÏÂÌ˛ Ì‡ÒÚÓÂÍ ÓÚÔÂ˜‡ÚÍÓ‚*******
void showMenuFingerprints(void){
	menuItem = 1;
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	while(getTimerCount() != 3){
    1a18:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <showMenuFingerprints+0x158>
    1a20:	5e cf       	rjmp	.-324    	; 0x18de <showMenuFingerprints+0x14>
			displayClear();
			return;
		}
		_delay_ms(10);
	}
	displayClear();
    1a22:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
    1a26:	08 95       	ret

00001a28 <setTimerDoorMenu>:
	}
	displayClear();
}

//***********Ì‡ÒÚÓÈÍ‡ Ú‡ÈÏÂ‡ ‰‚ÂË*************
void setTimerDoorMenu(){
    1a28:	6f 92       	push	r6
    1a2a:	7f 92       	push	r7
    1a2c:	8f 92       	push	r8
    1a2e:	9f 92       	push	r9
    1a30:	af 92       	push	r10
    1a32:	bf 92       	push	r11
    1a34:	cf 92       	push	r12
    1a36:	df 92       	push	r13
    1a38:	ef 92       	push	r14
    1a3a:	ff 92       	push	r15
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <setTimerDoorMenu+0x1e>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <setTimerDoorMenu+0x20>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <setTimerDoorMenu+0x22>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    1a56:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	displayShowStr(3,0,"Ú‡ÈÏÂ ‰‚ÂË");
    1a5a:	4b e1       	ldi	r20, 0x1B	; 27
    1a5c:	53 e0       	ldi	r21, 0x03	; 3
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
	unsigned int doorTimer = readValueTimerCloseDoor() * 5;//ˆÂÌ‡ ‰ÂÎÂÌËˇ 5 ÒÂÍ
    1a66:	0e 94 72 01 	call	0x2e4	; 0x2e4 <readValueTimerCloseDoor>
    1a6a:	6c 01       	movw	r12, r24
    1a6c:	cc 0c       	add	r12, r12
    1a6e:	dd 1c       	adc	r13, r13
    1a70:	cc 0c       	add	r12, r12
    1a72:	dd 1c       	adc	r13, r13
    1a74:	c8 0e       	add	r12, r24
    1a76:	d9 1e       	adc	r13, r25
	char sec[3];
	unsigned char secondNum;
	unsigned char minutNum;
	while(getTimerCount() != 3){
		minutNum = doorTimer/60; //ÏËÌÛÚ˚
		secondNum = doorTimer%60; //ÒÂÍÛÌ‰˚
    1a78:	0f 2e       	mov	r0, r31
    1a7a:	fc e3       	ldi	r31, 0x3C	; 60
    1a7c:	7f 2e       	mov	r7, r31
    1a7e:	f0 2d       	mov	r31, r0
		sprintf(sec, "%d", secondNum);
    1a80:	02 e2       	ldi	r16, 0x22	; 34
    1a82:	11 e0       	ldi	r17, 0x01	; 1
    1a84:	5e 01       	movw	r10, r28
    1a86:	24 e0       	ldi	r18, 0x04	; 4
    1a88:	a2 0e       	add	r10, r18
    1a8a:	b1 1c       	adc	r11, r1
		sprintf(min, "%d", minutNum);
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	4c 01       	movw	r8, r24
	unsigned int doorTimer = readValueTimerCloseDoor() * 5;//ˆÂÌ‡ ‰ÂÎÂÌËˇ 5 ÒÂÍ
	char min[3];
	char sec[3];
	unsigned char secondNum;
	unsigned char minutNum;
	while(getTimerCount() != 3){
    1a92:	a7 c0       	rjmp	.+334    	; 0x1be2 <setTimerDoorMenu+0x1ba>
		minutNum = doorTimer/60; //ÏËÌÛÚ˚
    1a94:	96 01       	movw	r18, r12
    1a96:	a9 e8       	ldi	r26, 0x89	; 137
    1a98:	b8 e8       	ldi	r27, 0x88	; 136
    1a9a:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__umulhisi3>
    1a9e:	7c 01       	movw	r14, r24
    1aa0:	f6 94       	lsr	r15
    1aa2:	e7 94       	ror	r14
    1aa4:	f6 94       	lsr	r15
    1aa6:	e7 94       	ror	r14
    1aa8:	f6 94       	lsr	r15
    1aaa:	e7 94       	ror	r14
    1aac:	f6 94       	lsr	r15
    1aae:	e7 94       	ror	r14
    1ab0:	f6 94       	lsr	r15
    1ab2:	e7 94       	ror	r14
		secondNum = doorTimer%60; //ÒÂÍÛÌ‰˚
    1ab4:	7e 9c       	mul	r7, r14
    1ab6:	c0 01       	movw	r24, r0
    1ab8:	7f 9c       	mul	r7, r15
    1aba:	90 0d       	add	r25, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	28 1b       	sub	r18, r24
    1ac0:	39 0b       	sbc	r19, r25
    1ac2:	c9 01       	movw	r24, r18
    1ac4:	62 2e       	mov	r6, r18
		sprintf(sec, "%d", secondNum);
    1ac6:	99 27       	eor	r25, r25
    1ac8:	9f 93       	push	r25
    1aca:	8f 93       	push	r24
    1acc:	1f 93       	push	r17
    1ace:	0f 93       	push	r16
    1ad0:	bf 92       	push	r11
    1ad2:	af 92       	push	r10
    1ad4:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		sprintf(min, "%d", minutNum);
    1ad8:	c7 01       	movw	r24, r14
    1ada:	99 27       	eor	r25, r25
    1adc:	9f 93       	push	r25
    1ade:	8f 93       	push	r24
    1ae0:	1f 93       	push	r17
    1ae2:	0f 93       	push	r16
    1ae4:	9f 92       	push	r9
    1ae6:	8f 92       	push	r8
    1ae8:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <sprintf>
		if(minutNum < 10){ 
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	99 e0       	ldi	r25, 0x09	; 9
    1af8:	9e 15       	cp	r25, r14
    1afa:	60 f0       	brcs	.+24     	; 0x1b14 <setTimerDoorMenu+0xec>
			displayShowStr(4,1, " ");
    1afc:	49 e1       	ldi	r20, 0x19	; 25
    1afe:	51 e0       	ldi	r21, 0x01	; 1
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	84 e0       	ldi	r24, 0x04	; 4
    1b04:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(5,1, min);
    1b08:	a4 01       	movw	r20, r8
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	85 e0       	ldi	r24, 0x05	; 5
    1b0e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <setTimerDoorMenu+0xf6>
		}else
			 displayShowStr(4,1, min);
    1b14:	a4 01       	movw	r20, r8
    1b16:	61 e0       	ldi	r22, 0x01	; 1
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(6,1, "ÏËÌ");
    1b1e:	48 e2       	ldi	r20, 0x28	; 40
    1b20:	53 e0       	ldi	r21, 0x03	; 3
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	86 e0       	ldi	r24, 0x06	; 6
    1b26:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		if(secondNum < 10) {
    1b2a:	29 e0       	ldi	r18, 0x09	; 9
    1b2c:	26 15       	cp	r18, r6
    1b2e:	60 f0       	brcs	.+24     	; 0x1b48 <setTimerDoorMenu+0x120>
			displayShowStr(11,1, sec);
    1b30:	a5 01       	movw	r20, r10
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	8b e0       	ldi	r24, 0x0B	; 11
    1b36:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			displayShowStr(10,1, " ");
    1b3a:	49 e1       	ldi	r20, 0x19	; 25
    1b3c:	51 e0       	ldi	r21, 0x01	; 1
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	8a e0       	ldi	r24, 0x0A	; 10
    1b42:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1b46:	05 c0       	rjmp	.+10     	; 0x1b52 <setTimerDoorMenu+0x12a>
		}else
			 displayShowStr(10,1, sec);
    1b48:	a5 01       	movw	r20, r10
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	8a e0       	ldi	r24, 0x0A	; 10
    1b4e:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(12,1, "ÒÂÍ");
    1b52:	4c e2       	ldi	r20, 0x2C	; 44
    1b54:	53 e0       	ldi	r21, 0x03	; 3
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	8c e0       	ldi	r24, 0x0C	; 12
    1b5a:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    1b5e:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    1b62:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    1b66:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1b6a:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == ROTATE_LEFT && doorTimer > 5){
    1b6e:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	61 f4       	brne	.+24     	; 0x1b8e <setTimerDoorMenu+0x166>
    1b76:	36 e0       	ldi	r19, 0x06	; 6
    1b78:	c3 16       	cp	r12, r19
    1b7a:	d1 04       	cpc	r13, r1
    1b7c:	60 f1       	brcs	.+88     	; 0x1bd6 <setTimerDoorMenu+0x1ae>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			doorTimer -= 5;
    1b86:	85 e0       	ldi	r24, 0x05	; 5
    1b88:	c8 1a       	sub	r12, r24
    1b8a:	d1 08       	sbc	r13, r1
    1b8c:	24 c0       	rjmp	.+72     	; 0x1bd6 <setTimerDoorMenu+0x1ae>
		}else if(enkoderState == ROTATE_RIGHT && doorTimer < 900){
    1b8e:	84 30       	cpi	r24, 0x04	; 4
    1b90:	69 f4       	brne	.+26     	; 0x1bac <setTimerDoorMenu+0x184>
    1b92:	94 e8       	ldi	r25, 0x84	; 132
    1b94:	c9 16       	cp	r12, r25
    1b96:	93 e0       	ldi	r25, 0x03	; 3
    1b98:	d9 06       	cpc	r13, r25
    1b9a:	e8 f4       	brcc	.+58     	; 0x1bd6 <setTimerDoorMenu+0x1ae>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			doorTimer += 5;
    1ba4:	25 e0       	ldi	r18, 0x05	; 5
    1ba6:	c2 0e       	add	r12, r18
    1ba8:	d1 1c       	adc	r13, r1
    1baa:	15 c0       	rjmp	.+42     	; 0x1bd6 <setTimerDoorMenu+0x1ae>
		}else if(enkoderState == PRESS_BUTTON){
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	51 f4       	brne	.+20     	; 0x1bc4 <setTimerDoorMenu+0x19c>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			writeValueTimerCloseDoor(doorTimer);
    1bb8:	c6 01       	movw	r24, r12
    1bba:	0e 94 82 01 	call	0x304	; 0x304 <writeValueTimerCloseDoor>
			displayClear();
    1bbe:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1bc2:	16 c0       	rjmp	.+44     	; 0x1bf0 <setTimerDoorMenu+0x1c8>
		} else if(enkoderState == LONG_PRESS_BUTTON){
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	39 f4       	brne	.+14     	; 0x1bd6 <setTimerDoorMenu+0x1ae>
		setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
		displayClear();
    1bd0:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
		return;
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <setTimerDoorMenu+0x1c8>
    1bd6:	8f e0       	ldi	r24, 0x0F	; 15
    1bd8:	97 e2       	ldi	r25, 0x27	; 39
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <setTimerDoorMenu+0x1b2>
    1bde:	00 c0       	rjmp	.+0      	; 0x1be0 <setTimerDoorMenu+0x1b8>
    1be0:	00 00       	nop
	unsigned int doorTimer = readValueTimerCloseDoor() * 5;//ˆÂÌ‡ ‰ÂÎÂÌËˇ 5 ÒÂÍ
	char min[3];
	char sec[3];
	unsigned char secondNum;
	unsigned char minutNum;
	while(getTimerCount() != 3){
    1be2:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	09 f0       	breq	.+2      	; 0x1bec <setTimerDoorMenu+0x1c4>
    1bea:	54 cf       	rjmp	.-344    	; 0x1a94 <setTimerDoorMenu+0x6c>
		displayClear();
		return;
		}
		_delay_ms(5);
	}
	displayClear();
    1bec:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
    1bf0:	26 96       	adiw	r28, 0x06	; 6
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
    1c10:	9f 90       	pop	r9
    1c12:	8f 90       	pop	r8
    1c14:	7f 90       	pop	r7
    1c16:	6f 90       	pop	r6
    1c18:	08 95       	ret

00001c1a <showMenuSetingTimer>:
	displayClear();
}

//**********ÏÂÌ˛ Ì‡ÒÚÓÂÍ Ú‡ÈÏÂ‡**********
void showMenuSetingTimer(void){
	menuItem = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    1c28:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	while(getTimerCount() != 3){
    1c2c:	bf c0       	rjmp	.+382    	; 0x1dac <showMenuSetingTimer+0x192>
		displayShowStr(0, menuItem, "*");
    1c2e:	48 e3       	ldi	r20, 0x38	; 56
    1c30:	51 e0       	ldi	r21, 0x01	; 1
    1c32:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(1,0,"Õ¿—“–Œ… ¿ “¿…Ã≈–¿");
    1c3c:	40 e3       	ldi	r20, 0x30	; 48
    1c3e:	53 e0       	ldi	r21, 0x03	; 3
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,1,"“‡ÈÏÂ Ì‡ ‰‚Â¸");
    1c48:	42 e4       	ldi	r20, 0x42	; 66
    1c4a:	53 e0       	ldi	r21, 0x03	; 3
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,2,"“‡ÈÏÂ ‰‚ÂË ‚ÍÎ");
    1c54:	42 e5       	ldi	r20, 0x52	; 82
    1c56:	53 e0       	ldi	r21, 0x03	; 3
    1c58:	62 e0       	ldi	r22, 0x02	; 2
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,3,"“‡ÈÏÂ ‰‚ÂË ‚˚ÍÎ");
    1c60:	43 e6       	ldi	r20, 0x63	; 99
    1c62:	53 e0       	ldi	r21, 0x03	; 3
    1c64:	63 e0       	ldi	r22, 0x03	; 3
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,4,"¬€’Œƒ");
    1c6c:	43 e5       	ldi	r20, 0x53	; 83
    1c6e:	52 e0       	ldi	r21, 0x02	; 2
    1c70:	64 e0       	ldi	r22, 0x04	; 4
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    1c78:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    1c7c:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    1c80:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1c84:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == PRESS_BUTTON){
    1c88:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <showMenuSetingTimer+0x78>
    1c90:	46 c0       	rjmp	.+140    	; 0x1d1e <showMenuSetingTimer+0x104>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if(menuItem == 1){
    1c9a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	31 f4       	brne	.+12     	; 0x1cae <showMenuSetingTimer+0x94>
				setTimerDoorMenu();
    1ca2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <setTimerDoorMenu>
				menuItem = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    1cac:	30 c0       	rjmp	.+96     	; 0x1d0e <showMenuSetingTimer+0xf4>
			}
			if(menuItem == 2) {
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	a9 f4       	brne	.+42     	; 0x1cdc <showMenuSetingTimer+0xc2>
				doorTimerOn();
    1cb2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <doorTimerOn>
				displayClear();
    1cb6:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
				displayShowStr(0,3,"“‡ÈÏÂ ‚ÍÎ˛˜ÂÌ");
    1cba:	45 e7       	ldi	r20, 0x75	; 117
    1cbc:	53 e0       	ldi	r21, 0x03	; 3
    1cbe:	63 e0       	ldi	r22, 0x03	; 3
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1cc6:	2f ef       	ldi	r18, 0xFF	; 255
    1cc8:	83 ed       	ldi	r24, 0xD3	; 211
    1cca:	90 e3       	ldi	r25, 0x30	; 48
    1ccc:	21 50       	subi	r18, 0x01	; 1
    1cce:	80 40       	sbci	r24, 0x00	; 0
    1cd0:	90 40       	sbci	r25, 0x00	; 0
    1cd2:	e1 f7       	brne	.-8      	; 0x1ccc <showMenuSetingTimer+0xb2>
    1cd4:	00 c0       	rjmp	.+0      	; 0x1cd6 <showMenuSetingTimer+0xbc>
    1cd6:	00 00       	nop
				_delay_ms(2000);
				displayClear();
    1cd8:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			}
			if(menuItem == 3){
    1cdc:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1ce0:	83 30       	cpi	r24, 0x03	; 3
    1ce2:	a9 f4       	brne	.+42     	; 0x1d0e <showMenuSetingTimer+0xf4>
				doorTimerOff();
    1ce4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <doorTimerOff>
				displayClear();
    1ce8:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
				displayShowStr(0,3,"“‡ÈÏÂ ÓÚÍÎ˛˜ÂÌ");
    1cec:	44 e8       	ldi	r20, 0x84	; 132
    1cee:	53 e0       	ldi	r21, 0x03	; 3
    1cf0:	63 e0       	ldi	r22, 0x03	; 3
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1cf8:	2f ef       	ldi	r18, 0xFF	; 255
    1cfa:	83 ed       	ldi	r24, 0xD3	; 211
    1cfc:	90 e3       	ldi	r25, 0x30	; 48
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	80 40       	sbci	r24, 0x00	; 0
    1d02:	90 40       	sbci	r25, 0x00	; 0
    1d04:	e1 f7       	brne	.-8      	; 0x1cfe <showMenuSetingTimer+0xe4>
    1d06:	00 c0       	rjmp	.+0      	; 0x1d08 <showMenuSetingTimer+0xee>
    1d08:	00 00       	nop
				_delay_ms(2000);
				displayClear();
    1d0a:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			}
			if(menuItem == 4){
    1d0e:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1d12:	84 30       	cpi	r24, 0x04	; 4
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <showMenuSetingTimer+0xfe>
    1d16:	44 c0       	rjmp	.+136    	; 0x1da0 <showMenuSetingTimer+0x186>
				displayClear();
    1d18:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
				return;
    1d1c:	08 95       	ret
			}
		}else if(enkoderState == ROTATE_LEFT && menuItem > 1){
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	d1 f4       	brne	.+52     	; 0x1d56 <showMenuSetingTimer+0x13c>
    1d22:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	d8 f1       	brcs	.+118    	; 0x1da0 <showMenuSetingTimer+0x186>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    1d32:	49 e1       	ldi	r20, 0x19	; 25
    1d34:	51 e0       	ldi	r21, 0x01	; 1
    1d36:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			--menuItem;
    1d40:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1d44:	61 50       	subi	r22, 0x01	; 1
    1d46:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    1d4a:	48 e3       	ldi	r20, 0x38	; 56
    1d4c:	51 e0       	ldi	r21, 0x01	; 1
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1d54:	25 c0       	rjmp	.+74     	; 0x1da0 <showMenuSetingTimer+0x186>
		}else if(enkoderState == ROTATE_RIGHT && menuItem < 4){
    1d56:	84 30       	cpi	r24, 0x04	; 4
    1d58:	d1 f4       	brne	.+52     	; 0x1d8e <showMenuSetingTimer+0x174>
    1d5a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1d5e:	84 30       	cpi	r24, 0x04	; 4
    1d60:	f8 f4       	brcc	.+62     	; 0x1da0 <showMenuSetingTimer+0x186>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    1d6a:	49 e1       	ldi	r20, 0x19	; 25
    1d6c:	51 e0       	ldi	r21, 0x01	; 1
    1d6e:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			++menuItem;
    1d78:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1d7c:	6f 5f       	subi	r22, 0xFF	; 255
    1d7e:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    1d82:	48 e3       	ldi	r20, 0x38	; 56
    1d84:	51 e0       	ldi	r21, 0x01	; 1
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1d8c:	09 c0       	rjmp	.+18     	; 0x1da0 <showMenuSetingTimer+0x186>
		}else if(enkoderState == LONG_PRESS_BUTTON){
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	39 f4       	brne	.+14     	; 0x1da0 <showMenuSetingTimer+0x186>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayClear();
    1d9a:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
			return;
    1d9e:	08 95       	ret
    1da0:	8f e1       	ldi	r24, 0x1F	; 31
    1da2:	9e e4       	ldi	r25, 0x4E	; 78
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <showMenuSetingTimer+0x18a>
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <showMenuSetingTimer+0x190>
    1daa:	00 00       	nop
//**********ÏÂÌ˛ Ì‡ÒÚÓÂÍ Ú‡ÈÏÂ‡**********
void showMenuSetingTimer(void){
	menuItem = 1;
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
	displayClear();
	while(getTimerCount() != 3){
    1dac:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <showMenuSetingTimer+0x19c>
    1db4:	3c cf       	rjmp	.-392    	; 0x1c2e <showMenuSetingTimer+0x14>
			displayClear();
			return;
		}
		_delay_ms(10);
	}
	displayClear();
    1db6:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
    1dba:	08 95       	ret

00001dbc <showMenuGeneral>:

char enkoderState; //ÒÓÒÚÓˇÌËÂ ˝ÌÍÓ‰Â‡
	
//******„Î‡‚ÌÓÂ ÏÂÌ˛ Ì‡ÒÚÓÂÍ*********
void showMenuGeneral(){
	menuItem = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
	setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
	displayClear();
    1dca:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	timerOn();
    1dce:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
	if(changeMenuPassword() == 0){ //ÔÓ‚ÂˇÂÏ Ô‡ÓÎ¸
    1dd2:	0e 94 4f 04 	call	0x89e	; 0x89e <changeMenuPassword>
    1dd6:	81 11       	cpse	r24, r1
    1dd8:	b3 c0       	rjmp	.+358    	; 0x1f40 <showMenuGeneral+0x184>
		displayClear();
    1dda:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
		timerOff();
    1dde:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		return;
    1de2:	08 95       	ret
	}
	
	while(getTimerCount() != 3){
		displayShowStr(8,0,"Ã≈Õﬁ");
    1de4:	44 e9       	ldi	r20, 0x94	; 148
    1de6:	53 e0       	ldi	r21, 0x03	; 3
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	88 e0       	ldi	r24, 0x08	; 8
    1dec:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,1,"ÃÂÌ˛ ÓÚÔÂ˜‡ÚÍÓ‚");
    1df0:	49 e9       	ldi	r20, 0x99	; 153
    1df2:	53 e0       	ldi	r21, 0x03	; 3
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,2,"ÃÂÌ˛ ¿÷œ");
    1dfc:	49 ea       	ldi	r20, 0xA9	; 169
    1dfe:	53 e0       	ldi	r21, 0x03	; 3
    1e00:	62 e0       	ldi	r22, 0x02	; 2
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,3,"Õ‡ÒÚÓÈÍË Ú‡ÈÏÂ‡");
    1e08:	42 eb       	ldi	r20, 0xB2	; 178
    1e0a:	53 e0       	ldi	r21, 0x03	; 3
    1e0c:	63 e0       	ldi	r22, 0x03	; 3
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,4,"—ÏÂÌ‡ Ô‡ÓÎˇ");
    1e14:	44 ec       	ldi	r20, 0xC4	; 196
    1e16:	53 e0       	ldi	r21, 0x03	; 3
    1e18:	64 e0       	ldi	r22, 0x04	; 4
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(2,5,"¬€’Œƒ");
    1e20:	43 e5       	ldi	r20, 0x53	; 83
    1e22:	52 e0       	ldi	r21, 0x02	; 2
    1e24:	65 e0       	ldi	r22, 0x05	; 5
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		displayShowStr(0,menuItem,"*");
    1e2c:	48 e3       	ldi	r20, 0x38	; 56
    1e2e:	51 e0       	ldi	r21, 0x01	; 1
    1e30:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		timerOff();
    1e3a:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
		enkoderState = getStateEncoder();
    1e3e:	0e 94 ce 02 	call	0x59c	; 0x59c <getStateEncoder>
    1e42:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <enkoderState>
		timerOn();
    1e46:	0e 94 1e 02 	call	0x43c	; 0x43c <timerOn>
		if(enkoderState == PRESS_BUTTON){
    1e4a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	b9 f5       	brne	.+110    	; 0x1ec0 <showMenuGeneral+0x104>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			if(menuItem == FINGERPRINTS){
    1e5a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	31 f4       	brne	.+12     	; 0x1e6e <showMenuGeneral+0xb2>
				 showMenuFingerprints();
    1e62:	0e 94 65 0c 	call	0x18ca	; 0x18ca <showMenuFingerprints>
				 menuItem = FINGERPRINTS;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    1e6c:	12 c0       	rjmp	.+36     	; 0x1e92 <showMenuGeneral+0xd6>
			}
			if(menuItem == ADC) {
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	31 f4       	brne	.+12     	; 0x1e7e <showMenuGeneral+0xc2>
				showMenuADC();
    1e72:	0e 94 57 0a 	call	0x14ae	; 0x14ae <showMenuADC>
				menuItem = ADC;
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    1e7c:	18 c0       	rjmp	.+48     	; 0x1eae <showMenuGeneral+0xf2>
			}
			if(menuItem == SET_TIMER){
    1e7e:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1e82:	83 30       	cpi	r24, 0x03	; 3
    1e84:	31 f4       	brne	.+12     	; 0x1e92 <showMenuGeneral+0xd6>
				 showMenuSetingTimer();
    1e86:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <showMenuSetingTimer>
				 menuItem = SET_TIMER;
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
    1e90:	17 c0       	rjmp	.+46     	; 0x1ec0 <showMenuGeneral+0x104>
			}
			if(menuItem == MENU_PASSWORD){
    1e92:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	51 f4       	brne	.+20     	; 0x1eae <showMenuGeneral+0xf2>
				showPasswordMenu();
    1e9a:	0e 94 57 05 	call	0xaae	; 0xaae <showPasswordMenu>
				menuItem = MENU_PASSWORD;
    1e9e:	84 e0       	ldi	r24, 0x04	; 4
    1ea0:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <menuItem>
				timerOff(); //exit
				displayClear();
				return;
			}
		}
		if(enkoderState == ROTATE_LEFT && menuItem > 1){
    1ea4:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	39 f5       	brne	.+78     	; 0x1efa <showMenuGeneral+0x13e>
    1eac:	11 c0       	rjmp	.+34     	; 0x1ed0 <showMenuGeneral+0x114>
			}
			if(menuItem == MENU_PASSWORD){
				showPasswordMenu();
				menuItem = MENU_PASSWORD;
			}
			if(menuItem == EXIT){
    1eae:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1eb2:	85 30       	cpi	r24, 0x05	; 5
    1eb4:	29 f4       	brne	.+10     	; 0x1ec0 <showMenuGeneral+0x104>
				timerOff(); //exit
    1eb6:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
				displayClear();
    1eba:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
				return;
    1ebe:	08 95       	ret
			}
		}
		if(enkoderState == ROTATE_LEFT && menuItem > 1){
    1ec0:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	c9 f4       	brne	.+50     	; 0x1efa <showMenuGeneral+0x13e>
    1ec8:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1ecc:	82 30       	cpi	r24, 0x02	; 2
    1ece:	90 f1       	brcs	.+100    	; 0x1f34 <showMenuGeneral+0x178>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    1ed8:	49 e1       	ldi	r20, 0x19	; 25
    1eda:	51 e0       	ldi	r21, 0x01	; 1
    1edc:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			--menuItem;
    1ee6:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1eea:	61 50       	subi	r22, 0x01	; 1
    1eec:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    1ef0:	48 e3       	ldi	r20, 0x38	; 56
    1ef2:	51 e0       	ldi	r21, 0x01	; 1
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
		}
		if(enkoderState == ROTATE_RIGHT && menuItem < MENU_ITEMS - 1){
    1efa:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <enkoderState>
    1efe:	84 30       	cpi	r24, 0x04	; 4
    1f00:	c9 f4       	brne	.+50     	; 0x1f34 <showMenuGeneral+0x178>
    1f02:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <menuItem>
    1f06:	85 30       	cpi	r24, 0x05	; 5
    1f08:	a8 f4       	brcc	.+42     	; 0x1f34 <showMenuGeneral+0x178>
			setTimerCount(0); //ÛÒÚ‡ÌÓ‚Í‡ Ú‡ÈÏÂ‡ ‚ 0
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <setTimerCount>
			displayShowStr(0, menuItem, " ");
    1f12:	49 e1       	ldi	r20, 0x19	; 25
    1f14:	51 e0       	ldi	r21, 0x01	; 1
    1f16:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
			++menuItem;
    1f20:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <menuItem>
    1f24:	6f 5f       	subi	r22, 0xFF	; 255
    1f26:	60 93 ee 03 	sts	0x03EE, r22	; 0x8003ee <menuItem>
			displayShowStr(0, menuItem, "*");
    1f2a:	48 e3       	ldi	r20, 0x38	; 56
    1f2c:	51 e0       	ldi	r21, 0x01	; 1
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	0e 94 2c 13 	call	0x2658	; 0x2658 <displayShowStr>
    1f34:	8f e1       	ldi	r24, 0x1F	; 31
    1f36:	9e e4       	ldi	r25, 0x4E	; 78
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <showMenuGeneral+0x17c>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <showMenuGeneral+0x182>
    1f3e:	00 00       	nop
		displayClear();
		timerOff();
		return;
	}
	
	while(getTimerCount() != 3){
    1f40:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <getTimerCount>
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <showMenuGeneral+0x18e>
    1f48:	4d cf       	rjmp	.-358    	; 0x1de4 <showMenuGeneral+0x28>
			++menuItem;
			displayShowStr(0, menuItem, "*");
		}
		_delay_ms(10);
	}
	displayClear();
    1f4a:	0e 94 bc 12 	call	0x2578	; 0x2578 <displayClear>
	timerOff();
    1f4e:	0e 94 1a 02 	call	0x434	; 0x434 <timerOff>
    1f52:	08 95       	ret

00001f54 <initFingerScaner>:

void addFingerInLibrary(){
	
}

void changePassword(){
    1f54:	e0 ef       	ldi	r30, 0xF0	; 240
    1f56:	f3 e0       	ldi	r31, 0x03	; 3
    1f58:	8c e0       	ldi	r24, 0x0C	; 12
    1f5a:	94 e0       	ldi	r25, 0x04	; 4
    1f5c:	11 92       	st	Z+, r1
    1f5e:	e8 17       	cp	r30, r24
    1f60:	f9 07       	cpc	r31, r25
    1f62:	e1 f7       	brne	.-8      	; 0x1f5c <initFingerScaner+0x8>
    1f64:	08 95       	ret

00001f66 <sendComand>:
    1f66:	bf 92       	push	r11
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	d8 2e       	mov	r13, r24
    1f7a:	c6 2e       	mov	r12, r22
    1f7c:	7a 01       	movw	r14, r20
    1f7e:	b2 2e       	mov	r11, r18
    1f80:	c0 e6       	ldi	r28, 0x60	; 96
    1f82:	d0 e0       	ldi	r29, 0x00	; 0
    1f84:	06 e6       	ldi	r16, 0x66	; 102
    1f86:	10 e0       	ldi	r17, 0x00	; 0
    1f88:	89 91       	ld	r24, Y+
    1f8a:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1f8e:	0c 17       	cp	r16, r28
    1f90:	1d 07       	cpc	r17, r29
    1f92:	d1 f7       	brne	.-12     	; 0x1f88 <sendComand+0x22>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1fa0:	8d 2d       	mov	r24, r13
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	31 97       	sbiw	r30, 0x01	; 1
    1fa8:	ed 31       	cpi	r30, 0x1D	; 29
    1faa:	f1 05       	cpc	r31, r1
    1fac:	08 f0       	brcs	.+2      	; 0x1fb0 <sendComand+0x4a>
    1fae:	c7 c0       	rjmp	.+398    	; 0x213e <sendComand+0x1d8>
    1fb0:	e6 5d       	subi	r30, 0xD6	; 214
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	0c 94 d3 1d 	jmp	0x3ba6	; 0x3ba6 <__tablejump2__>
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1fbe:	8d 2d       	mov	r24, r13
    1fc0:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1fc4:	8d 2d       	mov	r24, r13
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	ec 01       	movw	r28, r24
    1fca:	24 96       	adiw	r28, 0x04	; 4
    1fcc:	ce 01       	movw	r24, r28
    1fce:	12 f4       	brpl	.+4      	; 0x1fd4 <sendComand+0x6e>
    1fd0:	81 50       	subi	r24, 0x01	; 1
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	89 2f       	mov	r24, r25
    1fd6:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1fda:	ce 01       	movw	r24, r28
    1fdc:	90 78       	andi	r25, 0x80	; 128
    1fde:	99 23       	and	r25, r25
    1fe0:	1c f4       	brge	.+6      	; 0x1fe8 <sendComand+0x82>
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	9f 6f       	ori	r25, 0xFF	; 255
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1fec:	a8 c0       	rjmp	.+336    	; 0x213e <sendComand+0x1d8>
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    1ffa:	8c 2d       	mov	r24, r12
    1ffc:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2000:	8c 2d       	mov	r24, r12
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	ec 01       	movw	r28, r24
    2006:	27 96       	adiw	r28, 0x07	; 7
    2008:	ce 01       	movw	r24, r28
    200a:	12 f4       	brpl	.+4      	; 0x2010 <sendComand+0xaa>
    200c:	81 50       	subi	r24, 0x01	; 1
    200e:	9f 4f       	sbci	r25, 0xFF	; 255
    2010:	89 2f       	mov	r24, r25
    2012:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2016:	ce 01       	movw	r24, r28
    2018:	90 78       	andi	r25, 0x80	; 128
    201a:	99 23       	and	r25, r25
    201c:	1c f4       	brge	.+6      	; 0x2024 <sendComand+0xbe>
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	9f 6f       	ori	r25, 0xFF	; 255
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2028:	8a c0       	rjmp	.+276    	; 0x213e <sendComand+0x1d8>
    202a:	86 e0       	ldi	r24, 0x06	; 6
    202c:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2030:	8d 2d       	mov	r24, r13
    2032:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2036:	8c 2d       	mov	r24, r12
    2038:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    203c:	2f ef       	ldi	r18, 0xFF	; 255
    203e:	e2 16       	cp	r14, r18
    2040:	f1 04       	cpc	r15, r1
    2042:	09 f0       	breq	.+2      	; 0x2046 <sendComand+0xe0>
    2044:	38 f4       	brcc	.+14     	; 0x2054 <sendComand+0xee>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    204c:	8e 2d       	mov	r24, r14
    204e:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2052:	06 c0       	rjmp	.+12     	; 0x2060 <sendComand+0xfa>
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    205a:	8e 2d       	mov	r24, r14
    205c:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2060:	8d 2d       	mov	r24, r13
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	06 96       	adiw	r24, 0x06	; 6
    2066:	8c 0d       	add	r24, r12
    2068:	91 1d       	adc	r25, r1
    206a:	2f ef       	ldi	r18, 0xFF	; 255
    206c:	e2 1a       	sub	r14, r18
    206e:	f2 0a       	sbc	r15, r18
    2070:	e8 0e       	add	r14, r24
    2072:	f9 1e       	adc	r15, r25
    2074:	c7 01       	movw	r24, r14
    2076:	ff 20       	and	r15, r15
    2078:	14 f4       	brge	.+4      	; 0x207e <sendComand+0x118>
    207a:	81 50       	subi	r24, 0x01	; 1
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	89 2f       	mov	r24, r25
    2080:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2084:	c7 01       	movw	r24, r14
    2086:	90 78       	andi	r25, 0x80	; 128
    2088:	99 23       	and	r25, r25
    208a:	1c f4       	brge	.+6      	; 0x2092 <sendComand+0x12c>
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9f 6f       	ori	r25, 0xFF	; 255
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2096:	53 c0       	rjmp	.+166    	; 0x213e <sendComand+0x1d8>
    2098:	87 e0       	ldi	r24, 0x07	; 7
    209a:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    209e:	8c e0       	ldi	r24, 0x0C	; 12
    20a0:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20aa:	8e 2d       	mov	r24, r14
    20ac:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20b6:	8b 2d       	mov	r24, r11
    20b8:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20bc:	eb 0c       	add	r14, r11
    20be:	f1 1c       	adc	r15, r1
    20c0:	84 e1       	ldi	r24, 0x14	; 20
    20c2:	e8 0e       	add	r14, r24
    20c4:	f1 1c       	adc	r15, r1
    20c6:	c7 01       	movw	r24, r14
    20c8:	ff 20       	and	r15, r15
    20ca:	14 f4       	brge	.+4      	; 0x20d0 <sendComand+0x16a>
    20cc:	81 50       	subi	r24, 0x01	; 1
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	89 2f       	mov	r24, r25
    20d2:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20d6:	c7 01       	movw	r24, r14
    20d8:	90 78       	andi	r25, 0x80	; 128
    20da:	99 23       	and	r25, r25
    20dc:	1c f4       	brge	.+6      	; 0x20e4 <sendComand+0x17e>
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9f 6f       	ori	r25, 0xFF	; 255
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20e8:	2a c0       	rjmp	.+84     	; 0x213e <sendComand+0x1d8>
    20ea:	88 e0       	ldi	r24, 0x08	; 8
    20ec:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20f0:	84 e0       	ldi	r24, 0x04	; 4
    20f2:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20f6:	8c 2d       	mov	r24, r12
    20f8:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    210e:	86 e9       	ldi	r24, 0x96	; 150
    2110:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    2114:	8c 2d       	mov	r24, r12
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	ec 01       	movw	r28, r24
    211a:	cc 55       	subi	r28, 0x5C	; 92
    211c:	df 4f       	sbci	r29, 0xFF	; 255
    211e:	ce 01       	movw	r24, r28
    2120:	12 f4       	brpl	.+4      	; 0x2126 <sendComand+0x1c0>
    2122:	81 50       	subi	r24, 0x01	; 1
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	89 2f       	mov	r24, r25
    2128:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    212c:	ce 01       	movw	r24, r28
    212e:	90 78       	andi	r25, 0x80	; 128
    2130:	99 23       	and	r25, r25
    2132:	1c f4       	brge	.+6      	; 0x213a <sendComand+0x1d4>
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9f 6f       	ori	r25, 0xFF	; 255
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	0e 94 b6 13 	call	0x276c	; 0x276c <USART_Transmit>
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	df 90       	pop	r13
    214c:	cf 90       	pop	r12
    214e:	bf 90       	pop	r11
    2150:	08 95       	ret

00002152 <control_sum>:
    2152:	dc 01       	movw	r26, r24
    2154:	17 96       	adiw	r26, 0x07	; 7
    2156:	4c 91       	ld	r20, X
    2158:	17 97       	sbiw	r26, 0x07	; 7
    215a:	18 96       	adiw	r26, 0x08	; 8
    215c:	9c 91       	ld	r25, X
    215e:	18 97       	sbiw	r26, 0x08	; 8
    2160:	49 0f       	add	r20, r25
    2162:	87 e0       	ldi	r24, 0x07	; 7
    2164:	84 0f       	add	r24, r20
    2166:	87 30       	cpi	r24, 0x07	; 7
    2168:	80 f0       	brcs	.+32     	; 0x218a <control_sum+0x38>
    216a:	fd 01       	movw	r30, r26
    216c:	36 96       	adiw	r30, 0x06	; 6
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	49 5f       	subi	r20, 0xF9	; 249
    2172:	5f 4f       	sbci	r21, 0xFF	; 255
    2174:	4a 0f       	add	r20, r26
    2176:	5b 1f       	adc	r21, r27
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	91 91       	ld	r25, Z+
    217e:	29 0f       	add	r18, r25
    2180:	31 1d       	adc	r19, r1
    2182:	e4 17       	cp	r30, r20
    2184:	f5 07       	cpc	r31, r21
    2186:	d1 f7       	brne	.-12     	; 0x217c <control_sum+0x2a>
    2188:	02 c0       	rjmp	.+4      	; 0x218e <control_sum+0x3c>
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	a8 0f       	add	r26, r24
    2190:	b1 1d       	adc	r27, r1
    2192:	4c 91       	ld	r20, X
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	54 2f       	mov	r21, r20
    2198:	44 27       	eor	r20, r20
    219a:	11 96       	adiw	r26, 0x01	; 1
    219c:	8c 91       	ld	r24, X
    219e:	48 0f       	add	r20, r24
    21a0:	51 1d       	adc	r21, r1
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	42 17       	cp	r20, r18
    21a6:	53 07       	cpc	r21, r19
    21a8:	09 f0       	breq	.+2      	; 0x21ac <control_sum+0x5a>
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	08 95       	ret

000021ae <searchFingerInSensor>:
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sendComand>
    21bc:	6c e0       	ldi	r22, 0x0C	; 12
    21be:	80 ef       	ldi	r24, 0xF0	; 240
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 ba 13 	call	0x2774	; 0x2774 <USART_reading_in_array>
    21c6:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <answerBuffer+0x9>
    21ca:	08 95       	ret

000021cc <searchFingerInLibrary>:
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	84 e0       	ldi	r24, 0x04	; 4
    21d6:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sendComand>
    21da:	60 e1       	ldi	r22, 0x10	; 16
    21dc:	80 ef       	ldi	r24, 0xF0	; 240
    21de:	93 e0       	ldi	r25, 0x03	; 3
    21e0:	0e 94 ba 13 	call	0x2774	; 0x2774 <USART_reading_in_array>
    21e4:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <answerBuffer+0x9>
    21e8:	08 95       	ret

000021ea <deleteFingerInLibrary>:
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	31 f0       	breq	.+12     	; 0x21fa <deleteFingerInLibrary+0x10>
    21ee:	82 30       	cpi	r24, 0x02	; 2
    21f0:	31 f0       	breq	.+12     	; 0x21fe <deleteFingerInLibrary+0x14>
    21f2:	83 30       	cpi	r24, 0x03	; 3
    21f4:	29 f4       	brne	.+10     	; 0x2200 <deleteFingerInLibrary+0x16>
    21f6:	47 ec       	ldi	r20, 0xC7	; 199
    21f8:	03 c0       	rjmp	.+6      	; 0x2200 <deleteFingerInLibrary+0x16>
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <deleteFingerInLibrary+0x16>
    21fe:	45 e6       	ldi	r20, 0x65	; 101
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	24 e6       	ldi	r18, 0x64	; 100
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	8c e0       	ldi	r24, 0x0C	; 12
    2208:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sendComand>
    220c:	6c e0       	ldi	r22, 0x0C	; 12
    220e:	80 ef       	ldi	r24, 0xF0	; 240
    2210:	93 e0       	ldi	r25, 0x03	; 3
    2212:	0e 94 ba 13 	call	0x2774	; 0x2774 <USART_reading_in_array>
    2216:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <answerBuffer+0x9>
    221a:	81 11       	cpse	r24, r1
    221c:	09 c0       	rjmp	.+18     	; 0x2230 <deleteFingerInLibrary+0x46>
    221e:	80 ef       	ldi	r24, 0xF0	; 240
    2220:	93 e0       	ldi	r25, 0x03	; 3
    2222:	0e 94 a9 10 	call	0x2152	; 0x2152 <control_sum>
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	81 11       	cpse	r24, r1
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <deleteFingerInLibrary+0x48>
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <deleteFingerInLibrary+0x48>
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	89 2f       	mov	r24, r25
    2234:	08 95       	ret

00002236 <saveImageInBuffer>:
	
}

unsigned char saveImageInBuffer(unsigned char buffer){
	sendComand(save_image_buffer, buffer, 0, 0); //ÔÓÒ˚Î‡ÂÏ Á‡ÔÓÒ Ì‡ Á‡ÔËÒ¸ ÓÚÔÂ˜‡ÚÍ‡ ‚ ·ÛÙÂ
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	68 2f       	mov	r22, r24
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sendComand>
	USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â Á‡‰‡ÌÌÓÈ ‰ÎËÌ˚
    2244:	6c e0       	ldi	r22, 0x0C	; 12
    2246:	80 ef       	ldi	r24, 0xF0	; 240
    2248:	93 e0       	ldi	r25, 0x03	; 3
    224a:	0e 94 ba 13 	call	0x2774	; 0x2774 <USART_reading_in_array>
	return answerBuffer[9];
}
    224e:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <answerBuffer+0x9>
    2252:	08 95       	ret

00002254 <searchForFreeMemoryLocation>:

//---------ÔÓËÒÍ Ò‚Ó·Ó‰ÌÓÈ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ Á‡ÔÓÏËÌ‡ÌËˇ ÓÚÔÂ˜‡ÚÍ‡------
unsigned int searchForFreeMemoryLocation(char numLibrary){
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
	unsigned int library_begin; //Ì‡˜‡Î¸Ì˚È ÌÓÏÂ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ ı‡ÌÂÌËˇ ÓÚÔÂ˜‡ÚÍ‡
	unsigned int library_end; //ÍÓÌÂ˜Ì˚È ÌÓÏÂ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ ı‡ÌÂÌËˇ ÓÚÔÂ˜‡ÚÍ‡
	if (numLibrary == 1){
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	49 f0       	breq	.+18     	; 0x2272 <searchForFreeMemoryLocation+0x1e>
		library_begin = 0x01; //01
		library_end = 0x64; //100
	}
	else if(numLibrary == 2){
    2260:	82 30       	cpi	r24, 0x02	; 2
    2262:	61 f0       	breq	.+24     	; 0x227c <searchForFreeMemoryLocation+0x28>
		library_begin = 0x65; //101
		library_end = 0xC8; //200
	}
	else if(numLibrary == 3){
    2264:	83 30       	cpi	r24, 0x03	; 3
    2266:	71 f4       	brne	.+28     	; 0x2284 <searchForFreeMemoryLocation+0x30>
		library_begin = 0xC9; //201
		library_end = 0x12B; //299
    2268:	0b e2       	ldi	r16, 0x2B	; 43
    226a:	11 e0       	ldi	r17, 0x01	; 1
	else if(numLibrary == 2){
		library_begin = 0x65; //101
		library_end = 0xC8; //200
	}
	else if(numLibrary == 3){
		library_begin = 0xC9; //201
    226c:	c9 ec       	ldi	r28, 0xC9	; 201
    226e:	d0 e0       	ldi	r29, 0x00	; 0
    2270:	09 c0       	rjmp	.+18     	; 0x2284 <searchForFreeMemoryLocation+0x30>
unsigned int searchForFreeMemoryLocation(char numLibrary){
	unsigned int library_begin; //Ì‡˜‡Î¸Ì˚È ÌÓÏÂ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ ı‡ÌÂÌËˇ ÓÚÔÂ˜‡ÚÍ‡
	unsigned int library_end; //ÍÓÌÂ˜Ì˚È ÌÓÏÂ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ ı‡ÌÂÌËˇ ÓÚÔÂ˜‡ÚÍ‡
	if (numLibrary == 1){
		library_begin = 0x01; //01
		library_end = 0x64; //100
    2272:	04 e6       	ldi	r16, 0x64	; 100
    2274:	10 e0       	ldi	r17, 0x00	; 0
//---------ÔÓËÒÍ Ò‚Ó·Ó‰ÌÓÈ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ Á‡ÔÓÏËÌ‡ÌËˇ ÓÚÔÂ˜‡ÚÍ‡------
unsigned int searchForFreeMemoryLocation(char numLibrary){
	unsigned int library_begin; //Ì‡˜‡Î¸Ì˚È ÌÓÏÂ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ ı‡ÌÂÌËˇ ÓÚÔÂ˜‡ÚÍ‡
	unsigned int library_end; //ÍÓÌÂ˜Ì˚È ÌÓÏÂ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Îˇ ı‡ÌÂÌËˇ ÓÚÔÂ˜‡ÚÍ‡
	if (numLibrary == 1){
		library_begin = 0x01; //01
    2276:	c1 e0       	ldi	r28, 0x01	; 1
    2278:	d0 e0       	ldi	r29, 0x00	; 0
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <searchForFreeMemoryLocation+0x30>
		library_end = 0x64; //100
	}
	else if(numLibrary == 2){
		library_begin = 0x65; //101
		library_end = 0xC8; //200
    227c:	08 ec       	ldi	r16, 0xC8	; 200
    227e:	10 e0       	ldi	r17, 0x00	; 0
	if (numLibrary == 1){
		library_begin = 0x01; //01
		library_end = 0x64; //100
	}
	else if(numLibrary == 2){
		library_begin = 0x65; //101
    2280:	c5 e6       	ldi	r28, 0x65	; 101
    2282:	d0 e0       	ldi	r29, 0x00	; 0
		library_end = 0x12B; //299
	}
	 /*‚˚„ÛÊ‡ÂÏ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Ó ÚÂı ÔÓ ÔÓÍ‡ ÌÂ ‚ÒÚÂÚËÏ ÌÂ ÌÛÎÂ‚ÓÈ ÍÓ‰ ÔÓ‰Ú‚ÂÊ‰ÂÌËˇ
		 ˝ÚÓ ·Û‰ÂÚ ÁÌ‡˜ËÚ¸ ˜ÚÓ ˇ˜ÂÈÍ‡ ÔÛÒÚ‡ ÏÓÊÌÓ ‚ ÌÂÂ Á‡„ÛÊ‡Ú¸ ÓÚÔÂ˜‡ÚÓÍ*/
	do{
		++library_begin;
    2284:	21 96       	adiw	r28, 0x01	; 1
		if(library_begin >= library_end) return 0; //ÔÂÂÔÓÎÌÂÌËÂ ·Ë·ÎËÓÚÂÍË
    2286:	c0 17       	cp	r28, r16
    2288:	d1 07       	cpc	r29, r17
    228a:	90 f4       	brcc	.+36     	; 0x22b0 <searchForFreeMemoryLocation+0x5c>
		sendComand(load_out_library, buffer1_00, library_begin, 0); //Á‡„ÛÁÍ‡ ¯‡·ÎÓÌ‡ ‚ ÛÍ‡Á‡ÌÓÂ ÏÂÒÚÓ, ‚ÂÌÂÚ 0 ÂÒÎË ˇ˜ÂÈÍ‡ Ò‚Ó·Ó‰Ì‡
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	ae 01       	movw	r20, r28
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	87 e0       	ldi	r24, 0x07	; 7
    2294:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sendComand>
		USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â
    2298:	6c e0       	ldi	r22, 0x0C	; 12
    229a:	80 ef       	ldi	r24, 0xF0	; 240
    229c:	93 e0       	ldi	r25, 0x03	; 3
    229e:	0e 94 ba 13 	call	0x2774	; 0x2774 <USART_reading_in_array>
	} while (!answerBuffer[9]);  
    22a2:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <answerBuffer+0x9>
    22a6:	88 23       	and	r24, r24
    22a8:	69 f3       	breq	.-38     	; 0x2284 <searchForFreeMemoryLocation+0x30>
		library_end = 0x12B; //299
	}
	 /*‚˚„ÛÊ‡ÂÏ ˇ˜ÂÈÍË Ô‡ÏˇÚË ‰Ó ÚÂı ÔÓ ÔÓÍ‡ ÌÂ ‚ÒÚÂÚËÏ ÌÂ ÌÛÎÂ‚ÓÈ ÍÓ‰ ÔÓ‰Ú‚ÂÊ‰ÂÌËˇ
		 ˝ÚÓ ·Û‰ÂÚ ÁÌ‡˜ËÚ¸ ˜ÚÓ ˇ˜ÂÈÍ‡ ÔÛÒÚ‡ ÏÓÊÌÓ ‚ ÌÂÂ Á‡„ÛÊ‡Ú¸ ÓÚÔÂ˜‡ÚÓÍ*/
	do{
		++library_begin;
    22aa:	8c 2f       	mov	r24, r28
    22ac:	9d 2f       	mov	r25, r29
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <searchForFreeMemoryLocation+0x60>
		if(library_begin >= library_end) return 0; //ÔÂÂÔÓÎÌÂÌËÂ ·Ë·ÎËÓÚÂÍË
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
		sendComand(load_out_library, buffer1_00, library_begin, 0); //Á‡„ÛÁÍ‡ ¯‡·ÎÓÌ‡ ‚ ÛÍ‡Á‡ÌÓÂ ÏÂÒÚÓ, ‚ÂÌÂÚ 0 ÂÒÎË ˇ˜ÂÈÍ‡ Ò‚Ó·Ó‰Ì‡
		USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â
	} while (!answerBuffer[9]);  
	return library_begin;
}
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <searchFingerR300>:

//----------ÔÓËÒÍ ÓÚÔÂ˜‡ÚÍ‡ ÔÓÎÌ˚È ˆËÍÎ----------------
char searchFingerR300()
{
	unsigned char answer;
	answer = searchFingerInSensor(); //ÔÓÒ˚Î‡ÂÏ Á‡ÔÓÒ Ì‡ Ó·‡·ÓÚÍÛ ÔËÎÓÊÂÌÌÓ„Ó Ô‡Î¸ˆ‡
    22be:	0e 94 d7 10 	call	0x21ae	; 0x21ae <searchFingerInSensor>
	if(!answer && control_sum(answerBuffer)){
    22c2:	81 11       	cpse	r24, r1
    22c4:	1a c0       	rjmp	.+52     	; 0x22fa <searchFingerR300+0x3c>
    22c6:	80 ef       	ldi	r24, 0xF0	; 240
    22c8:	93 e0       	ldi	r25, 0x03	; 3
    22ca:	0e 94 a9 10 	call	0x2152	; 0x2152 <control_sum>
    22ce:	98 2f       	mov	r25, r24
    22d0:	88 23       	and	r24, r24
    22d2:	b1 f0       	breq	.+44     	; 0x2300 <searchFingerR300+0x42>
		answer = saveImageInBuffer(buffer1_00); //ÔÓÒ˚Î‡ÂÏ Á‡ÔÓÒ Ì‡ Á‡ÔËÒ¸ ÓÚÔÂ˜‡ÚÍ‡ ‚ 1 ·ÛÙÂ
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	0e 94 1b 11 	call	0x2236	; 0x2236 <saveImageInBuffer>
		if(!answer && control_sum(answerBuffer)){
    22da:	81 11       	cpse	r24, r1
    22dc:	10 c0       	rjmp	.+32     	; 0x22fe <searchFingerR300+0x40>
    22de:	80 ef       	ldi	r24, 0xF0	; 240
    22e0:	93 e0       	ldi	r25, 0x03	; 3
    22e2:	0e 94 a9 10 	call	0x2152	; 0x2152 <control_sum>
    22e6:	98 2f       	mov	r25, r24
    22e8:	88 23       	and	r24, r24
    22ea:	51 f0       	breq	.+20     	; 0x2300 <searchFingerR300+0x42>
			answer = searchFingerInLibrary(); //ÔÓÒ˚Î‡ÂÏ Á‡ÔÓÒ Ì‡ Ò‡‚ÌÂÌËÂ ÓÚÔÂ˜‡ÚÍ‡ Ò 1 ·ÛÙÂ‡ Ë ·Ë·ÎËÓÚÂÍË ÓÚÔÂ˜‡ÚÍÓ‚
    22ec:	0e 94 e6 10 	call	0x21cc	; 0x21cc <searchFingerInLibrary>
			if(!answer){
				//writeStatus(answer);
				return 1; //ÓÚÔÂ˜‡ÚÓÍ Ì‡È‰ÂÌ
    22f0:	91 e0       	ldi	r25, 0x01	; 1
    22f2:	88 23       	and	r24, r24
    22f4:	29 f0       	breq	.+10     	; 0x2300 <searchFingerR300+0x42>
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <searchFingerR300+0x42>
			 //writeStatus(answer);
			 return 0; // Ó¯Ë·Í‡ Á‡ÔËÒË ‚ ·ÛÙÂ 
		}
	}else{
		//writeStatus(answer);
		return 0; //Ô‡Î¸ˆ‡ Ì‡ ‰‡Ú˜ËÍÂ ÌÂÚ
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <searchFingerR300+0x42>
				//writeStatus(answer);
				return 0; //ÓÚÔÂ˜‡ÚÓÍ ÌÂ Ì‡È‰ÂÌ
			}
		}else{
			 //writeStatus(answer);
			 return 0; // Ó¯Ë·Í‡ Á‡ÔËÒË ‚ ·ÛÙÂ 
    22fe:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else{
		//writeStatus(answer);
		return 0; //Ô‡Î¸ˆ‡ Ì‡ ‰‡Ú˜ËÍÂ ÌÂÚ
	}
}
    2300:	89 2f       	mov	r24, r25
    2302:	08 95       	ret

00002304 <addingFingerR300>:
			
//-----------‰Ó·‡‚ÎÂÌËÂ ÓÚÔÂ˜‡ÚÍ‡ ‚ ·Ë·ÎËÓÚÂÍÛ-----------
char addingFingerR300(char numLibrary){
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
	unsigned char answer; //ÂÁÛÎ¸Ú‡Ú Á‡ÔÓÒ‡
	char buffer = 0x01; //ÔÓÏÂÊÛÚÓ˜Ì˚È ·ÛÙÂ ÔËÒ‚‡Â‚‡ÂÏ ÌÓÏÂ 1
	char count = 0; //Ò˜ÂÚ˜ËÍ ÔÓÔ˚ÚÓÍ Ò˜ËÚ˚‚‡ÌËˇ Ô‡Î¸ˆ‡
	
/*ÔÓÎÛ˜‡ÂÏ ÌÓÏÂ Ò‚Ó·Ó‰ÌÓÈ ˇ˜ÂÈÍË ·Ë·ÎËÓÚÂÍË*/
	 unsigned int library  = searchForFreeMemoryLocation(numLibrary);
    230c:	0e 94 2a 11 	call	0x2254	; 0x2254 <searchForFreeMemoryLocation>
    2310:	8c 01       	movw	r16, r24
	 if (library == 0) return 0; //ÔÂÂÔÓÎÌÂÌËÂ ·Ë·ÎËÓÚÂÍË
    2312:	89 2b       	or	r24, r25
    2314:	09 f4       	brne	.+2      	; 0x2318 <addingFingerR300+0x14>
    2316:	42 c0       	rjmp	.+132    	; 0x239c <addingFingerR300+0x98>
    2318:	c1 e0       	ldi	r28, 0x01	; 1
    231a:	d1 e0       	ldi	r29, 0x01	; 1
	
/* ÔÓËÒÍ Ô‡Î¸ˆ‡ Ë Á‡ÔËÒ¸ ‚ ·ÛÙÂ 1-4 ÔÓÍ‡ ÌÂ ‰ÓÈ‰ÂÏ ‰Ó 4 ·ÛÙÂ‡ ËÎË ÍÓ‰ ÔÓ‰Ú‚ÂÊ‰ÂÌËˇ ·Û‰ÂÚ ÌÂ 00*/
	do{
		answer = searchFingerInSensor();
    231c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <searchFingerInSensor>
		if(!answer && control_sum(answerBuffer)){ //ÂÒÎË ÓÍ Á‡ÔËÒ˚‚‡ÂÏ ‚ ·ÛÙÂ 1-4
    2320:	81 11       	cpse	r24, r1
    2322:	47 c0       	rjmp	.+142    	; 0x23b2 <addingFingerR300+0xae>
    2324:	80 ef       	ldi	r24, 0xF0	; 240
    2326:	93 e0       	ldi	r25, 0x03	; 3
    2328:	0e 94 a9 10 	call	0x2152	; 0x2152 <control_sum>
    232c:	88 23       	and	r24, r24
    232e:	f1 f1       	breq	.+124    	; 0x23ac <addingFingerR300+0xa8>
			answer = saveImageInBuffer(buffer); //ÔÓÒ˚Î‡ÂÏ Á‡ÔÓÒ Ì‡ Á‡ÔËÒ¸ ÓÚÔÂ˜‡ÚÍ‡ ‚ 1-4 ·ÛÙÂ
    2330:	8d 2f       	mov	r24, r29
    2332:	0e 94 1b 11 	call	0x2236	; 0x2236 <saveImageInBuffer>
			if(!answer)
    2336:	81 11       	cpse	r24, r1
    2338:	3c c0       	rjmp	.+120    	; 0x23b2 <addingFingerR300+0xae>
				++buffer;
    233a:	df 5f       	subi	r29, 0xFF	; 255
    233c:	37 c0       	rjmp	.+110    	; 0x23ac <addingFingerR300+0xa8>
    233e:	cf 5f       	subi	r28, 0xFF	; 255
		}
		++count;
		if (count > 21) //ÍÓÎË˜ÂÒÚ‚Ó ÔÓÔ˚ÚÓÍ Ò˜ËÚ‡Ú¸ Ô‡ÎÂˆ 20
			return 0;	
	} while (!answer && buffer < 5); 
    2340:	d5 30       	cpi	r29, 0x05	; 5
    2342:	60 f3       	brcs	.-40     	; 0x231c <addingFingerR300+0x18>
	
//ÒÓÁ‰‡ÌËÂ ¯‡·ÎÓÌ‡ Ë ÒÓı‡ÌÂÌËÂ ‚ ·Ë·ÎËÓÚÂÍÛ
	if(!answer && control_sum(answerBuffer)){
    2344:	80 ef       	ldi	r24, 0xF0	; 240
    2346:	93 e0       	ldi	r25, 0x03	; 3
    2348:	0e 94 a9 10 	call	0x2152	; 0x2152 <control_sum>
    234c:	88 23       	and	r24, r24
    234e:	29 f1       	breq	.+74     	; 0x239a <addingFingerR300+0x96>
		sendComand(shablon_is_buferov, 0, 0, 0); //ÒÓÁ‰‡ÂÏ ¯‡·ÎÓÌ ËÁ ·ÛÙÂÓ‚
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	85 e0       	ldi	r24, 0x05	; 5
    235a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sendComand>
		USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â
    235e:	6c e0       	ldi	r22, 0x0C	; 12
    2360:	80 ef       	ldi	r24, 0xF0	; 240
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	0e 94 ba 13 	call	0x2774	; 0x2774 <USART_reading_in_array>
		if(!answerBuffer[9] && control_sum(answerBuffer)){
    2368:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <answerBuffer+0x9>
    236c:	81 11       	cpse	r24, r1
    236e:	15 c0       	rjmp	.+42     	; 0x239a <addingFingerR300+0x96>
    2370:	80 ef       	ldi	r24, 0xF0	; 240
    2372:	93 e0       	ldi	r25, 0x03	; 3
    2374:	0e 94 a9 10 	call	0x2152	; 0x2152 <control_sum>
    2378:	88 23       	and	r24, r24
    237a:	79 f0       	breq	.+30     	; 0x239a <addingFingerR300+0x96>
			sendComand(store_shablon, buffer1_01, library, 0); //ÒÓı‡ÌÂÌËÂ ¯‡·ÎÓÌ‡ ‚ ˇ˜ÂÈÍÛ ·Ë·ÎËÓÚÂÍË Ô‡ÏˇÚË 
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	a8 01       	movw	r20, r16
    2380:	62 e0       	ldi	r22, 0x02	; 2
    2382:	86 e0       	ldi	r24, 0x06	; 6
    2384:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <sendComand>
			USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â
    2388:	6c e0       	ldi	r22, 0x0C	; 12
    238a:	80 ef       	ldi	r24, 0xF0	; 240
    238c:	93 e0       	ldi	r25, 0x03	; 3
    238e:	0e 94 ba 13 	call	0x2774	; 0x2774 <USART_reading_in_array>
			if(!answerBuffer[9]) 
    2392:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <answerBuffer+0x9>
    2396:	88 23       	and	r24, r24
    2398:	19 f0       	breq	.+6      	; 0x23a0 <addingFingerR300+0x9c>
				return 1;
		}
	}
    239a:	0e c0       	rjmp	.+28     	; 0x23b8 <addingFingerR300+0xb4>
	char buffer = 0x01; //ÔÓÏÂÊÛÚÓ˜Ì˚È ·ÛÙÂ ÔËÒ‚‡Â‚‡ÂÏ ÌÓÏÂ 1
	char count = 0; //Ò˜ÂÚ˜ËÍ ÔÓÔ˚ÚÓÍ Ò˜ËÚ˚‚‡ÌËˇ Ô‡Î¸ˆ‡
	
/*ÔÓÎÛ˜‡ÂÏ ÌÓÏÂ Ò‚Ó·Ó‰ÌÓÈ ˇ˜ÂÈÍË ·Ë·ÎËÓÚÂÍË*/
	 unsigned int library  = searchForFreeMemoryLocation(numLibrary);
	 if (library == 0) return 0; //ÔÂÂÔÓÎÌÂÌËÂ ·Ë·ÎËÓÚÂÍË
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	0c c0       	rjmp	.+24     	; 0x23b8 <addingFingerR300+0xb4>
		USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â
		if(!answerBuffer[9] && control_sum(answerBuffer)){
			sendComand(store_shablon, buffer1_01, library, 0); //ÒÓı‡ÌÂÌËÂ ¯‡·ÎÓÌ‡ ‚ ˇ˜ÂÈÍÛ ·Ë·ÎËÓÚÂÍË Ô‡ÏˇÚË 
			USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â
			if(!answerBuffer[9]) 
				return 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	0a c0       	rjmp	.+20     	; 0x23b8 <addingFingerR300+0xb4>
			if(!answer)
				++buffer;
		}
		++count;
		if (count > 21) //ÍÓÎË˜ÂÒÚ‚Ó ÔÓÔ˚ÚÓÍ Ò˜ËÚ‡Ú¸ Ô‡ÎÂˆ 20
			return 0;	
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	08 c0       	rjmp	.+16     	; 0x23b8 <addingFingerR300+0xb4>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	06 c0       	rjmp	.+12     	; 0x23b8 <addingFingerR300+0xb4>
			answer = saveImageInBuffer(buffer); //ÔÓÒ˚Î‡ÂÏ Á‡ÔÓÒ Ì‡ Á‡ÔËÒ¸ ÓÚÔÂ˜‡ÚÍ‡ ‚ 1-4 ·ÛÙÂ
			if(!answer)
				++buffer;
		}
		++count;
		if (count > 21) //ÍÓÎË˜ÂÒÚ‚Ó ÔÓÔ˚ÚÓÍ Ò˜ËÚ‡Ú¸ Ô‡ÎÂˆ 20
    23ac:	c6 31       	cpi	r28, 0x16	; 22
    23ae:	38 f2       	brcs	.-114    	; 0x233e <addingFingerR300+0x3a>
    23b0:	f9 cf       	rjmp	.-14     	; 0x23a4 <addingFingerR300+0xa0>
    23b2:	c6 31       	cpi	r28, 0x16	; 22
    23b4:	c8 f7       	brcc	.-14     	; 0x23a8 <addingFingerR300+0xa4>
    23b6:	f1 cf       	rjmp	.-30     	; 0x239a <addingFingerR300+0x96>
			USART_reading_in_array (answerBuffer, 12); //˜ËÚ‡ÂÏ ‚ Ï‡ÒÒË‚ ‚ıÓ‰ˇ˘ËÂ ‰‡ÌÌ˚Â
			if(!answerBuffer[9]) 
				return 1;
		}
	}
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	08 95       	ret

000023c2 <ssd1306_send_com>:


//	‘ÛÌÍˆËˇ ÔÂÂ‰‡˜Ë ÍÓÏ‡Ì‰˚ ‰ËÒÔÎÂ˛
//-------------------------------------------------------------------------
void ssd1306_send_com(char com)
{
    23c2:	cf 93       	push	r28
    23c4:	c8 2f       	mov	r28, r24
	I2C_StartCondition();
    23c6:	0e 94 9e 13 	call	0x273c	; 0x273c <I2C_StartCondition>
	I2C_SendByte(SSD1306_adress);
    23ca:	88 e7       	ldi	r24, 0x78	; 120
    23cc:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    23d0:	80 e8       	ldi	r24, 0x80	; 128
    23d2:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(com);
    23d6:	8c 2f       	mov	r24, r28
    23d8:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_StopCondition();
    23dc:	0e 94 a4 13 	call	0x2748	; 0x2748 <I2C_StopCondition>
}
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <ssd1306_send_data>:

//	‘ÛÌÍˆËˇ ÔÂÂ‰‡˜Ë ‰‡ÌÌ˚ı ‰ËÒÔÎÂ˛
//-------------------------------------------------------------------------
void ssd1306_send_data(char data)
{
    23e4:	cf 93       	push	r28
    23e6:	c8 2f       	mov	r28, r24
	I2C_StartCondition();
    23e8:	0e 94 9e 13 	call	0x273c	; 0x273c <I2C_StartCondition>
	I2C_SendByte(SSD1306_adress);
    23ec:	88 e7       	ldi	r24, 0x78	; 120
    23ee:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(DAT);
    23f2:	80 ec       	ldi	r24, 0xC0	; 192
    23f4:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(data);
    23f8:	8c 2f       	mov	r24, r28
    23fa:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_StopCondition();
    23fe:	0e 94 a4 13 	call	0x2748	; 0x2748 <I2C_StopCondition>
}
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret

00002406 <display_128x64_Init>:
    2406:	2f ef       	ldi	r18, 0xFF	; 255
    2408:	84 e3       	ldi	r24, 0x34	; 52
    240a:	9c e0       	ldi	r25, 0x0C	; 12
    240c:	21 50       	subi	r18, 0x01	; 1
    240e:	80 40       	sbci	r24, 0x00	; 0
    2410:	90 40       	sbci	r25, 0x00	; 0
    2412:	e1 f7       	brne	.-8      	; 0x240c <display_128x64_Init+0x6>
    2414:	00 c0       	rjmp	.+0      	; 0x2416 <display_128x64_Init+0x10>
    2416:	00 00       	nop
//	‘ÛÌÍˆËˇ ËÌËˆˆË‡ÎËÁËÛÂÚ ‰ËÒÔÎÂÈ. 
//-------------------------------------------------------------------------
void display_128x64_Init(void)
{
	_delay_ms(500);
	I2C_StartCondition();
    2418:	0e 94 9e 13 	call	0x273c	; 0x273c <I2C_StartCondition>
	I2C_SendByte(SSD1306_adress);
    241c:	88 e7       	ldi	r24, 0x78	; 120
    241e:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    2422:	80 e8       	ldi	r24, 0x80	; 128
    2424:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xAE);   //*‚˚ÍÎ˛˜ËÚ¸ ‰ËÒÔÎÂÈ
    2428:	8e ea       	ldi	r24, 0xAE	; 174
    242a:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    242e:	80 e8       	ldi	r24, 0x80	; 128
    2430:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xA8); //*ÛÒÚ‡ÌÓ‚ËÚ¸ multiplex ratio
    2434:	88 ea       	ldi	r24, 0xA8	; 168
    2436:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    243a:	80 e8       	ldi	r24, 0x80	; 128
    243c:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x3F);//0x3F*--1/64 duty (ÁÌ‡˜ÂÌËÂ ÔÓ ÛÏÓÎ˜‡ÌË˛)
    2440:	8f e3       	ldi	r24, 0x3F	; 63
    2442:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    2446:	80 e8       	ldi	r24, 0x80	; 128
    2448:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xD3); //”ÒÚ‡ÌÓ‚ËÚÂ ‚ÂÚËÍ‡Î¸Ì˚È Ò‰‚Ë„(—ÏÂ˘ÂÌËÂ ‰ËÒÔÎÂˇ (offset))
    244c:	83 ed       	ldi	r24, 0xD3	; 211
    244e:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    2452:	80 e8       	ldi	r24, 0x80	; 128
    2454:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x00); //”ÒÚ‡ÌÓ‚ÎË‚‡ÂÏ ‚ÂÚËÍ‡Î¸Ì˚È Ò‰‚Ë„ Ì‡ 00 (ÌÂÚ ÒÏÂ˘ÂÌËˇ)
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    245e:	80 e8       	ldi	r24, 0x80	; 128
    2460:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x40); //”ÒÚ‡ÌÓ‚ËÚ¸ Ì‡˜‡Î¸ÌÛ˛ ÒÚÓÍÛ ‰ËÒÔÎÂˇ(Ò Ì‡˜‡Î‡ RAM)
    2464:	80 e4       	ldi	r24, 0x40	; 64
    2466:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    246a:	80 e8       	ldi	r24, 0x80	; 128
    246c:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xA1); //–ÂÊËÏ ‡Á‚ÂÚÍË ÔÓ ÒÚ‡ÌËˆÂ (ÔÓ X) A1 - ÌÓÏ‡Î¸Ì˚È ÂÊËÏ (ÒÎÂ‚‡/Ì‡Ô‡‚Ó) A0 - Ó·‡ÚÌ˚È (ÒÔ‡‚‡/Ì‡ÎÂ‚Ó)
    2470:	81 ea       	ldi	r24, 0xA1	; 161
    2472:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    2476:	80 e8       	ldi	r24, 0x80	; 128
    2478:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xC8); //‚˚‚Ó‰ËÏ ‰‡ÌÌ˚Â ÔÓÒÚÓ˜ÌÓ C8-Ò‚ÂıÛ ‚ÌËÁ, —0-ÒÌËÁÛ ‚‚Âı, ÂÊËÏ ÒÍ‡ÌËÓ‚‡ÌËˇ ÓÁÛ ‰ËÒÔÎÂˇ //c0
    247c:	88 ec       	ldi	r24, 0xC8	; 200
    247e:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	// ‰Îˇ ËÁÏÂÌÂÌËˇ ÒËÒÚÂÏ˚ ÍÓÓ‰ËÌ‡Ú
	// —0 - ÒÌËÁÛ/‚Âı (Ì‡˜‡ÎÓ ÌËÊÌËÈ ÎÂ‚˚È Û„ÓÎ)
	// —8 - Ò‚ÂıÛ/‚ÌËÁ (Ì‡˜‡ÎÓ ‚ÂıÌËÈ ÎÂ‚˚È Û„ÓÎ)
	
	I2C_SendByte(COM);
    2482:	80 e8       	ldi	r24, 0x80	; 128
    2484:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xDA); //”ÒÚ‡ÌÓ‚ËÚ¸ ÍÓÌÙË„Û‡ˆË˛ Ó·ÓÛ‰Ó‚‡ÌËˇ COM-ÍÓÌÚ‡ÍÚÓ‚
    2488:	8a ed       	ldi	r24, 0xDA	; 218
    248a:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    248e:	80 e8       	ldi	r24, 0x80	; 128
    2490:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x12); //(—¡–Œ—), ‡Î¸ÚÂÌ‡ÚË‚Ì‡ˇ ÍÓÌÙË„Û‡ˆËˇ ÍÓÌÚ‡ÍÚÓ‚ COM
    2494:	82 e1       	ldi	r24, 0x12	; 18
    2496:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    249a:	80 e8       	ldi	r24, 0x80	; 128
    249c:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x81);  //”ÒÚ‡ÌÓ‚ËÚ¸ ÍÓÌÚÓÎ¸ ÍÓÌÚ‡ÒÚÌÓÒÚË
    24a0:	81 e8       	ldi	r24, 0x81	; 129
    24a2:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    24a6:	80 e8       	ldi	r24, 0x80	; 128
    24a8:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x70); // ÓÌÚ‡ÒÚÌÓÒÚ¸ Ï‡ÍÒËÏÛÏ FF (0-255)
    24ac:	80 e7       	ldi	r24, 0x70	; 112
    24ae:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    24b2:	80 e8       	ldi	r24, 0x80	; 128
    24b4:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xA4); //¬ÂÒ¸ ‰ËÒÔÎÂÈ ‚ÍÎ˛˜ÂÌ ¬ÓÁÓ·ÌÓ‚ËÚ¸ ÓÚÓ·‡ÊÂÌËÂ ÒÓ‰ÂÊËÏÓ„Ó Œ«” (—¡–Œ—)
    24b8:	84 ea       	ldi	r24, 0xA4	; 164
    24ba:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    24be:	80 e8       	ldi	r24, 0x80	; 128
    24c0:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xA6); //ÕÓÏ‡Î¸Ì˚È ‰ËÒÔÎÂÈ (—¡–Œ—) ÌÂÚ ËÌ‚ÂÒËË
    24c4:	86 ea       	ldi	r24, 0xA6	; 166
    24c6:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    24ca:	80 e8       	ldi	r24, 0x80	; 128
    24cc:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xD9);   //Ì‡ÒÚÓÈÍ‡ Ù‡Á DC/DC ÔÂÓ·‡ÁÓ‚‡ÚÂÎˇ
    24d0:	89 ed       	ldi	r24, 0xD9	; 217
    24d2:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    24d6:	80 e8       	ldi	r24, 0x80	; 128
    24d8:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xF1);   //0x22-VCC ÔÓ‰‡ÂÚÒˇ ËÁ‚ÌÂ / 0xF1 ‰Îˇ ‚ÌÛÚÂÌÌÂ„Ó
    24dc:	81 ef       	ldi	r24, 0xF1	; 241
    24de:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    24e2:	80 e8       	ldi	r24, 0x80	; 128
    24e4:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xD5); //”ÒÚ‡ÌÓ‚ËÚ¸ ÍÓ˝ÙÙËˆËÂÌÚ ‰ÂÎÂÌËˇ ˜‡ÒÚÓÚ˚ ‰ËÒÔÎÂˇ / ˜‡ÒÚÓÚÛ ÓÒˆËÎÎˇÚÓ‡
    24e8:	85 ed       	ldi	r24, 0xD5	; 213
    24ea:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    24ee:	80 e8       	ldi	r24, 0x80	; 128
    24f0:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x80); //”ÒÚ‡ÌÓ‚ËÚÂ ˜‡ÒÚÓÚÛ ÓÒˆËÎÎˇÚÓ‡, FOSC.(—¡–Œ—), ŒÔÂ‰ÂÎËÚÂ ÍÓ˝ÙÙËˆËÂÌÚ ‰ÂÎÂÌËˇ (D) ÓÚÓ·‡Ê‡ÂÏ˚ı ˜‡ÒÓ‚ (DCLK): RESET
    24f4:	80 e8       	ldi	r24, 0x80	; 128
    24f6:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    24fa:	80 e8       	ldi	r24, 0x80	; 128
    24fc:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x8D);// ”Ô‡‚ÎÂÌËÂ ‚ÌÛÚÂÌÌËÏ ÔÂÓ·‡ÁÓ‚‡ÚÂÎÂÏ
    2500:	8d e8       	ldi	r24, 0x8D	; 141
    2502:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    2506:	80 e8       	ldi	r24, 0x80	; 128
    2508:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x14);//0x10 - ÓÚÍÎ˛˜ËÚ¸ (VCC ÔÓ‰‡ÂÚÒˇ ËÁ‚ÌÂ) 0x14 - Á‡ÔÛÒÚËÚ¸ ‚ÌÛÚÂÌÌËÈ DC/DC
    250c:	84 e1       	ldi	r24, 0x14	; 20
    250e:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    2512:	80 e8       	ldi	r24, 0x80	; 128
    2514:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xDB);   // ”ÒÚ‡ÌÓ‚Í‡ VcomH
    2518:	8b ed       	ldi	r24, 0xDB	; 219
    251a:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(COM);
    251e:	80 e8       	ldi	r24, 0x80	; 128
    2520:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x40);   // ‚ÎËˇÂÚ Ì‡ ˇÍÓÒÚ¸ ‰ËÒÔÎÂˇ 0x30 (0x00-0x10-0x20-0x30-0x40-0x50-0x60-0x70)
    2524:	80 e4       	ldi	r24, 0x40	; 64
    2526:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	I2C_SendByte(COM);
    252a:	80 e8       	ldi	r24, 0x80	; 128
    252c:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x20);   // ÂÊËÏ‡ ‡‚ÚÓÏ‡ÚË˜ÂÒÍÓÈ ‡‰ÂÒ‡ˆËË
    2530:	80 e2       	ldi	r24, 0x20	; 32
    2532:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0x00);      // 0-ÔÓ „ÓËÁÓÌÚ‡ÎË Ò ÔÂÂıÓ‰ÓÏ Ì‡ ÌÓ‚Û˛ ÒÚ‡ÌËˆÛ (ÒÚÓÍÛ)
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	
	//    OLEDwrite_comm(0x21);        // ‡ÁÏÂ ‰ËÒÔÎÂˇ ÔÓ X
	//   OLEDwrite_comm(0);           // ÓÚ 0 ÍÓÎÓÌÍË
	//    OLEDwrite_comm(127);         // ‰Ó 127 ÍÓÎÓÌÍË
	
	I2C_SendByte(COM);
    253c:	80 e8       	ldi	r24, 0x80	; 128
    253e:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(0xAF); //ƒËÒÔÎÂÈ ‚ÍÎ˛˜ÂÌ ‚ ÌÓÏ‡Î¸ÌÓÏ ÂÊËÏÂ
    2542:	8f ea       	ldi	r24, 0xAF	; 175
    2544:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>

	I2C_StopCondition(); //—ÚÓÔ
    2548:	0e 94 a4 13 	call	0x2748	; 0x2748 <I2C_StopCondition>
    254c:	08 95       	ret

0000254e <displaySetPosition>:
}

//*************** ‘ÛÌÍˆËˇ ÛÒÚ‡ÌÓ‚ÍË ÔÓÁËˆËË ******************************
void displaySetPosition(char x, char y)
{
    254e:	cf 93       	push	r28
    2550:	c8 2f       	mov	r28, r24
	if((y >= 0) && (y <= 7)) // ÂÒÎË ‚ ‰Ë‡Ô‡ÁÓÌÂ 
    2552:	68 30       	cpi	r22, 0x08	; 8
    2554:	20 f4       	brcc	.+8      	; 0x255e <displaySetPosition+0x10>
	{
		ssd1306_send_com(y+0xB0); //˜ÚÓ ·˚ ÔÓÏÂÌˇÚ¸ ÒÚ‡ÌËˆ˚ ÏÂÒÚ‡ÏË 7- 0, 6- 1 Ë Ú. ‰.(7-y+0xB0)
    2556:	80 eb       	ldi	r24, 0xB0	; 176
    2558:	86 0f       	add	r24, r22
    255a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <ssd1306_send_com>
	}
	ssd1306_send_com(((x & 0xF0) >> 4) | 0x10);
    255e:	8c 2f       	mov	r24, r28
    2560:	82 95       	swap	r24
    2562:	8f 70       	andi	r24, 0x0F	; 15
    2564:	80 61       	ori	r24, 0x10	; 16
    2566:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <ssd1306_send_com>
	ssd1306_send_com((x & 0x0F) | 0x01);
    256a:	8c 2f       	mov	r24, r28
    256c:	8e 70       	andi	r24, 0x0E	; 14
    256e:	81 60       	ori	r24, 0x01	; 1
    2570:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <ssd1306_send_com>
}
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <displayClear>:

//*************** ‘ÛÌÍˆËˇ Ó˜ËÒÚÍË ‰ËÒÔÎÂˇ **********************************

void displayClear(void)
{
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
	displaySetPosition(0,7); //‚˚ÒÚ‡‚ÎˇÂÏ Ì‡ ÌÛÎÂ‚Û˛ ÔÓÁËˆË˛
    257c:	67 e0       	ldi	r22, 0x07	; 7
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	0e 94 a7 12 	call	0x254e	; 0x254e <displaySetPosition>
	I2C_StartCondition();
    2584:	0e 94 9e 13 	call	0x273c	; 0x273c <I2C_StartCondition>
	I2C_SendByte(SSD1306_adress); //ÔÓÒ˚Î‡ÂÏ ‡‰ÂÒÒ ÛÒÚÓÈÒÚ‚‡
    2588:	88 e7       	ldi	r24, 0x78	; 120
    258a:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(DATS);
    258e:	80 e4       	ldi	r24, 0x40	; 64
    2590:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
    2594:	c0 e0       	ldi	r28, 0x00	; 0
    2596:	d4 e0       	ldi	r29, 0x04	; 4
	for (int n = 0; n < 1024; ++n)
		I2C_SendByte(0x00); //Á‡ÔÓÎÌˇÂÏ ‚ÒÂ ÔÓÒÚ‡ÌÒÚ‚Ó ÌÛÎˇÏË
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
    259e:	21 97       	sbiw	r28, 0x01	; 1
{
	displaySetPosition(0,7); //‚˚ÒÚ‡‚ÎˇÂÏ Ì‡ ÌÛÎÂ‚Û˛ ÔÓÁËˆË˛
	I2C_StartCondition();
	I2C_SendByte(SSD1306_adress); //ÔÓÒ˚Î‡ÂÏ ‡‰ÂÒÒ ÛÒÚÓÈÒÚ‚‡
	I2C_SendByte(DATS);
	for (int n = 0; n < 1024; ++n)
    25a0:	d9 f7       	brne	.-10     	; 0x2598 <displayClear+0x20>
		I2C_SendByte(0x00); //Á‡ÔÓÎÌˇÂÏ ‚ÒÂ ÔÓÒÚ‡ÌÒÚ‚Ó ÌÛÎˇÏË
	I2C_StopCondition(); //ÒÚÓÔ
    25a2:	0e 94 a4 13 	call	0x2748	; 0x2748 <I2C_StopCondition>
}
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	08 95       	ret

000025ac <displayClearString>:

//*************** ‘ÛÌÍˆËˇ Ó˜ËÒÚÍË Ó‰ÌÓÈ ÒÚÓÍË **********************************
void displayClearString(char numString){
    25ac:	cf 93       	push	r28
	displaySetPosition(0,numString); //‚˚ÒÚ‡‚ÎˇÂÏ Ì‡ ÒÚÓÍÛ
    25ae:	68 2f       	mov	r22, r24
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	0e 94 a7 12 	call	0x254e	; 0x254e <displaySetPosition>
	I2C_StartCondition();
    25b6:	0e 94 9e 13 	call	0x273c	; 0x273c <I2C_StartCondition>
	I2C_SendByte(SSD1306_adress); //ÔÓÒ˚Î‡ÂÏ ‡‰ÂÒÒ ÛÒÚÓÈÒÚ‚‡
    25ba:	88 e7       	ldi	r24, 0x78	; 120
    25bc:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
	I2C_SendByte(DATS);
    25c0:	80 e4       	ldi	r24, 0x40	; 64
    25c2:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
    25c6:	c0 e0       	ldi	r28, 0x00	; 0
	for (char n = 0; n < 128; ++n)
	I2C_SendByte(0x00); //Á‡ÔÓÎÌˇÂÏ ‚ÒÂ ÔÓÒÚ‡ÌÒÚ‚Ó ÌÛÎˇÏË
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_SendByte>
void displayClearString(char numString){
	displaySetPosition(0,numString); //‚˚ÒÚ‡‚ÎˇÂÏ Ì‡ ÒÚÓÍÛ
	I2C_StartCondition();
	I2C_SendByte(SSD1306_adress); //ÔÓÒ˚Î‡ÂÏ ‡‰ÂÒÒ ÛÒÚÓÈÒÚ‚‡
	I2C_SendByte(DATS);
	for (char n = 0; n < 128; ++n)
    25ce:	cf 5f       	subi	r28, 0xFF	; 255
    25d0:	c0 38       	cpi	r28, 0x80	; 128
    25d2:	d1 f7       	brne	.-12     	; 0x25c8 <displayClearString+0x1c>
	I2C_SendByte(0x00); //Á‡ÔÓÎÌˇÂÏ ‚ÒÂ ÔÓÒÚ‡ÌÒÚ‚Ó ÌÛÎˇÏË
	I2C_StopCondition(); //ÒÚÓÔ
    25d4:	0e 94 a4 13 	call	0x2748	; 0x2748 <I2C_StopCondition>
}
    25d8:	cf 91       	pop	r28
    25da:	08 95       	ret

000025dc <displayGotoPosition>:

//************	‘ÛÌÍˆËˇ ÛÒÚ‡ÌÓ‚ÍË ÍÛÒÓ‡ (ÓÚÒÚÛÔ Ì‡ ÍÓÎ˜ÂÒÚ‚‡ ÒËÏ‚ÓÎÓ‚) *********************

void displayGotoPosition(char x, char y)
{
	if(x > 15) x = 21;
    25dc:	80 31       	cpi	r24, 0x10	; 16
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <displayGotoPosition+0x6>
    25e0:	85 e1       	ldi	r24, 0x15	; 21
	if(y > 7) y = 7;
	displaySetPosition((x*6), y);
    25e2:	68 30       	cpi	r22, 0x08	; 8
    25e4:	08 f0       	brcs	.+2      	; 0x25e8 <displayGotoPosition+0xc>
    25e6:	67 e0       	ldi	r22, 0x07	; 7
    25e8:	98 2f       	mov	r25, r24
    25ea:	99 0f       	add	r25, r25
    25ec:	89 0f       	add	r24, r25
    25ee:	88 0f       	add	r24, r24
    25f0:	0e 94 a7 12 	call	0x254e	; 0x254e <displaySetPosition>
    25f4:	08 95       	ret

000025f6 <displayShowChar>:
}

//**************** ‘ÛÌÍˆËˇ ‚˚‚Ó‰‡ ÒËÏ‚ÓÎ‡ **************************************************

void displayShowChar(char chr)
{	
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
	if ((chr < 0x20)||((chr > 0x7E)&&(chr < 0xC0)))
    25fe:	80 32       	cpi	r24, 0x20	; 32
    2600:	58 f0       	brcs	.+22     	; 0x2618 <displayShowChar+0x22>
    2602:	91 e8       	ldi	r25, 0x81	; 129
    2604:	98 0f       	add	r25, r24
    2606:	91 34       	cpi	r25, 0x41	; 65
    2608:	48 f0       	brcs	.+18     	; 0x261c <displayShowChar+0x26>
			chr = 0x00; //Ò˜ËÚ‡ÂÏ ÁÌ‡Í ‡‚Ì˚Ï 0x00 Ë ‚˚‚Â‰ÂÏ Â„Ó Í‡Í ÔÓ·ÂÎ 
	else if ((chr >= 0x20)&&(chr <= 0x7E))
    260a:	c0 ee       	ldi	r28, 0xE0	; 224
    260c:	c8 0f       	add	r28, r24
    260e:	cf 35       	cpi	r28, 0x5F	; 95
    2610:	30 f0       	brcs	.+12     	; 0x261e <displayShowChar+0x28>
			chr -= 0x20; //ÂÒÎË ÁÌ‡Í ÒËÏ‚ÓÎ‡ ·ÓÎ¸¯Â 0x20 (ÔÓ·ÂÎ) ÔÓ Ú‡·ÎËˆÂ ASCII Ë ‰Ó 0x7E(ÚËÎ¸‰˚)
			else chr -= 0x61; //‰Îˇ ‚˚‚Ó‰‡ ÍËËÎËˆ˚ (‡·ÓÚ‡ÂÚ Ò Ì‡¯ËÏ Ï‡ÒË‚ÓÏ ¯ËÙÚ‡)
    2612:	cf e9       	ldi	r28, 0x9F	; 159
    2614:	c8 0f       	add	r28, r24
    2616:	03 c0       	rjmp	.+6      	; 0x261e <displayShowChar+0x28>
//**************** ‘ÛÌÍˆËˇ ‚˚‚Ó‰‡ ÒËÏ‚ÓÎ‡ **************************************************

void displayShowChar(char chr)
{	
	if ((chr < 0x20)||((chr > 0x7E)&&(chr < 0xC0)))
			chr = 0x00; //Ò˜ËÚ‡ÂÏ ÁÌ‡Í ‡‚Ì˚Ï 0x00 Ë ‚˚‚Â‰ÂÏ Â„Ó Í‡Í ÔÓ·ÂÎ 
    2618:	c0 e0       	ldi	r28, 0x00	; 0
    261a:	01 c0       	rjmp	.+2      	; 0x261e <displayShowChar+0x28>
    261c:	c0 e0       	ldi	r28, 0x00	; 0
    261e:	8c 2f       	mov	r24, r28
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	ec 01       	movw	r28, r24
    2624:	cc 0f       	add	r28, r28
    2626:	dd 1f       	adc	r29, r29
    2628:	cc 0f       	add	r28, r28
    262a:	dd 1f       	adc	r29, r29
    262c:	c8 0f       	add	r28, r24
    262e:	d9 1f       	adc	r29, r25
    2630:	8e 01       	movw	r16, r28
    2632:	0b 5f       	subi	r16, 0xFB	; 251
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
			else chr -= 0x61; //‰Îˇ ‚˚‚Ó‰‡ ÍËËÎËˆ˚ (‡·ÓÚ‡ÂÚ Ò Ì‡¯ËÏ Ï‡ÒË‚ÓÏ ¯ËÙÚ‡)
	
	 	for(char i=0; i<5; i++)
				 //Ò˜ËÚ‡ÂÏ „‰Â Ì‡˜‡ÎÓ (ÌÓÏÂ ÁÌ‡Í‡ ÛÏÌÓÊÂÌÌ˚È Ì‡ 5 ÒÚÓ˜ÂÍ ‚ Ï‡ÒÒË‚Â ‚˚‚Ó‰‡ ÁÌ‡Í‡)  
	 			//ssd1306_send_data(font6x8[(chr*5)+i]); //ËÚÚÂ‡ˆËˇ ‚˚‚Ó‰‡ Ï‡ÒÒË‚‡ ¯ËÙÚ‡
				 ssd1306_send_data(EEPROM_read_word((chr*5)+i)); //‚˚‚Ó‰ ˜ÂÂÁ EEPROM
    2636:	ce 01       	movw	r24, r28
    2638:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
    263c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <ssd1306_send_data>
    2640:	21 96       	adiw	r28, 0x01	; 1
			chr = 0x00; //Ò˜ËÚ‡ÂÏ ÁÌ‡Í ‡‚Ì˚Ï 0x00 Ë ‚˚‚Â‰ÂÏ Â„Ó Í‡Í ÔÓ·ÂÎ 
	else if ((chr >= 0x20)&&(chr <= 0x7E))
			chr -= 0x20; //ÂÒÎË ÁÌ‡Í ÒËÏ‚ÓÎ‡ ·ÓÎ¸¯Â 0x20 (ÔÓ·ÂÎ) ÔÓ Ú‡·ÎËˆÂ ASCII Ë ‰Ó 0x7E(ÚËÎ¸‰˚)
			else chr -= 0x61; //‰Îˇ ‚˚‚Ó‰‡ ÍËËÎËˆ˚ (‡·ÓÚ‡ÂÚ Ò Ì‡¯ËÏ Ï‡ÒË‚ÓÏ ¯ËÙÚ‡)
	
	 	for(char i=0; i<5; i++)
    2642:	c0 17       	cp	r28, r16
    2644:	d1 07       	cpc	r29, r17
    2646:	b9 f7       	brne	.-18     	; 0x2636 <displayShowChar+0x40>
				 //Ò˜ËÚ‡ÂÏ „‰Â Ì‡˜‡ÎÓ (ÌÓÏÂ ÁÌ‡Í‡ ÛÏÌÓÊÂÌÌ˚È Ì‡ 5 ÒÚÓ˜ÂÍ ‚ Ï‡ÒÒË‚Â ‚˚‚Ó‰‡ ÁÌ‡Í‡)  
	 			//ssd1306_send_data(font6x8[(chr*5)+i]); //ËÚÚÂ‡ˆËˇ ‚˚‚Ó‰‡ Ï‡ÒÒË‚‡ ¯ËÙÚ‡
				 ssd1306_send_data(EEPROM_read_word((chr*5)+i)); //‚˚‚Ó‰ ˜ÂÂÁ EEPROM
	ssd1306_send_data(0x00); //‰Ó·‡‚ÎˇÂÏ ÔÛÒÚÓÈ ÒÚÓÎ·Âˆ
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <ssd1306_send_data>
}
    264e:	df 91       	pop	r29
    2650:	cf 91       	pop	r28
    2652:	1f 91       	pop	r17
    2654:	0f 91       	pop	r16
    2656:	08 95       	ret

00002658 <displayShowStr>:
 
//******************* ‘ÛÌÍˆËˇ ‚˚‚Ó‰‡ ÒÚÓÍË Ì‡ ÔÓÁËˆË˛************************************************

void displayShowStr(char x, char y, char *str) // ‚‚Ó‰ËÏ ÍÓÓ‰ËÌ‡Ú˚ ‡ Á‡ÚÂÏ ÚÂÍÒÚ
{
    2658:	0f 93       	push	r16
    265a:	1f 93       	push	r17
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	d6 2f       	mov	r29, r22
    2662:	8a 01       	movw	r16, r20
	displayGotoPosition(x, y); //ÔÓÁËˆËÓÌËÛÂÏ Ì‡˜‡ÎÓ 
    2664:	0e 94 ee 12 	call	0x25dc	; 0x25dc <displayGotoPosition>
	char length = 0; //Ò˜ÂÚ˜ËÍ ‚˚‚Â‰ÂÌÌ˚ı ÒËÏ‚ÓÎÓ‚
	while(*str)
    2668:	f8 01       	movw	r30, r16
    266a:	80 81       	ld	r24, Z
    266c:	81 11       	cpse	r24, r1
    266e:	13 c0       	rjmp	.+38     	; 0x2696 <displayShowStr+0x3e>
    2670:	1d c0       	rjmp	.+58     	; 0x26ac <displayShowStr+0x54>
	{
		if (length >= 21) //ÂÒÎË ‚˚‚ÂÎË 21 ÒËÏ‚ÓÎ ‚ ÒÚÓÍÂ
    2672:	c5 31       	cpi	r28, 0x15	; 21
    2674:	88 f0       	brcs	.+34     	; 0x2698 <displayShowStr+0x40>
		{
			if(y >= 7) //ÔÓ‚ÂˇÂÏ ÌÂ ÔÓÒÎÂ‰Ìˇˇ ÎË ˝ÚÓ ÒÚÓÍ‡
    2676:	d7 30       	cpi	r29, 0x07	; 7
    2678:	38 f0       	brcs	.+14     	; 0x2688 <displayShowStr+0x30>
			displayGotoPosition(0, y = 0); //ÂÒÎË ÔÓÒÎÂÌˇˇ ÒÚÓÍ‡ ÔÂÂıÓ‰ËÏ Ì‡ ÌÛÎÂ‚Û˛ ÒÚÓÍÛ
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <displayGotoPosition>
			else displayGotoPosition(0, ++y); //ÂÒÎË ÌÂ ÔÓÒÎÂ‰Ìˇˇ ÒÚÓÍ‡ ÔÂÂıÓ‰ËÏ Ì‡ ÒÎÂ‰Û˛˘Û˛ ÒÚÓÍÛ Ë ÒÚ‡ÂÏ Ì‡ Ì‡˜‡ÎÓ 
			length = 0; //Ò·‡Ò˚‚‡ÂÏ Ò˜ÂÚ˜ËÍ ÍÓ„‰‡ ‰ÓıÓ‰ËÏ ‰Ó ÍÓÌˆ‡ ÒÚÓÍË
    2682:	c0 e0       	ldi	r28, 0x00	; 0
	while(*str)
	{
		if (length >= 21) //ÂÒÎË ‚˚‚ÂÎË 21 ÒËÏ‚ÓÎ ‚ ÒÚÓÍÂ
		{
			if(y >= 7) //ÔÓ‚ÂˇÂÏ ÌÂ ÔÓÒÎÂ‰Ìˇˇ ÎË ˝ÚÓ ÒÚÓÍ‡
			displayGotoPosition(0, y = 0); //ÂÒÎË ÔÓÒÎÂÌˇˇ ÒÚÓÍ‡ ÔÂÂıÓ‰ËÏ Ì‡ ÌÛÎÂ‚Û˛ ÒÚÓÍÛ
    2684:	d0 e0       	ldi	r29, 0x00	; 0
    2686:	08 c0       	rjmp	.+16     	; 0x2698 <displayShowStr+0x40>
			else displayGotoPosition(0, ++y); //ÂÒÎË ÌÂ ÔÓÒÎÂ‰Ìˇˇ ÒÚÓÍ‡ ÔÂÂıÓ‰ËÏ Ì‡ ÒÎÂ‰Û˛˘Û˛ ÒÚÓÍÛ Ë ÒÚ‡ÂÏ Ì‡ Ì‡˜‡ÎÓ 
    2688:	df 5f       	subi	r29, 0xFF	; 255
    268a:	6d 2f       	mov	r22, r29
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <displayGotoPosition>
			length = 0; //Ò·‡Ò˚‚‡ÂÏ Ò˜ÂÚ˜ËÍ ÍÓ„‰‡ ‰ÓıÓ‰ËÏ ‰Ó ÍÓÌˆ‡ ÒÚÓÍË
    2692:	c0 e0       	ldi	r28, 0x00	; 0
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <displayShowStr+0x40>

void displayShowStr(char x, char y, char *str) // ‚‚Ó‰ËÏ ÍÓÓ‰ËÌ‡Ú˚ ‡ Á‡ÚÂÏ ÚÂÍÒÚ
{
	displayGotoPosition(x, y); //ÔÓÁËˆËÓÌËÛÂÏ Ì‡˜‡ÎÓ 
	char length = 0; //Ò˜ÂÚ˜ËÍ ‚˚‚Â‰ÂÌÌ˚ı ÒËÏ‚ÓÎÓ‚
	while(*str)
    2696:	c0 e0       	ldi	r28, 0x00	; 0
			if(y >= 7) //ÔÓ‚ÂˇÂÏ ÌÂ ÔÓÒÎÂ‰Ìˇˇ ÎË ˝ÚÓ ÒÚÓÍ‡
			displayGotoPosition(0, y = 0); //ÂÒÎË ÔÓÒÎÂÌˇˇ ÒÚÓÍ‡ ÔÂÂıÓ‰ËÏ Ì‡ ÌÛÎÂ‚Û˛ ÒÚÓÍÛ
			else displayGotoPosition(0, ++y); //ÂÒÎË ÌÂ ÔÓÒÎÂ‰Ìˇˇ ÒÚÓÍ‡ ÔÂÂıÓ‰ËÏ Ì‡ ÒÎÂ‰Û˛˘Û˛ ÒÚÓÍÛ Ë ÒÚ‡ÂÏ Ì‡ Ì‡˜‡ÎÓ 
			length = 0; //Ò·‡Ò˚‚‡ÂÏ Ò˜ÂÚ˜ËÍ ÍÓ„‰‡ ‰ÓıÓ‰ËÏ ‰Ó ÍÓÌˆ‡ ÒÚÓÍË
		}
		displayShowChar(*str); //‚˚‚Ó‰ËÏ ÒËÏ‚ÓÎ
    2698:	f8 01       	movw	r30, r16
    269a:	81 91       	ld	r24, Z+
    269c:	8f 01       	movw	r16, r30
    269e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <displayShowChar>
		str++;
		++length;
    26a2:	cf 5f       	subi	r28, 0xFF	; 255

void displayShowStr(char x, char y, char *str) // ‚‚Ó‰ËÏ ÍÓÓ‰ËÌ‡Ú˚ ‡ Á‡ÚÂÏ ÚÂÍÒÚ
{
	displayGotoPosition(x, y); //ÔÓÁËˆËÓÌËÛÂÏ Ì‡˜‡ÎÓ 
	char length = 0; //Ò˜ÂÚ˜ËÍ ‚˚‚Â‰ÂÌÌ˚ı ÒËÏ‚ÓÎÓ‚
	while(*str)
    26a4:	f8 01       	movw	r30, r16
    26a6:	80 81       	ld	r24, Z
    26a8:	81 11       	cpse	r24, r1
    26aa:	e3 cf       	rjmp	.-58     	; 0x2672 <displayShowStr+0x1a>
		}
		displayShowChar(*str); //‚˚‚Ó‰ËÏ ÒËÏ‚ÓÎ
		str++;
		++length;
	}
}
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	08 95       	ret

000026b6 <getTimerCount>:
//void setTimerEnd(unsigned int tic){
	//
//}

//***********ÔÓÎÛ˜ÂÌËÂ ÚÛÍÛ˘Â„Ó ÁÌ‡˜ÂÌËˇ Ú‡ÈÏÂ‡*************
char getTimerCount(){ return timerCount; }
    26b6:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <timerCount>
    26ba:	08 95       	ret

000026bc <setTimerCount>:
	
//*************ÛÒÚ‡ÌÓ‚Í‡ ÚÂÍÛ˘Â„Ó ÁÌ‡˜ÂÌËˇ Ú‡ÈÏÂ‡***************
void setTimerCount(unsigned int num){ timerCount = num; }
    26bc:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <timerCount+0x1>
    26c0:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <timerCount>
    26c4:	08 95       	ret

000026c6 <timer_ini>:

//*********************ËÌËˆË‡ÎËÁ‡ˆËˇ Ú‡ÈÏÂ‡**************************
void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // ÛÒÚ‡Ì‡‚ÎË‚‡ÂÏ ÂÊËÏ —“— (Ò·ÓÒ ÔÓ ÒÓ‚Ô‡‰ÂÌË˛)
    26c6:	8e b5       	in	r24, 0x2e	; 46
    26c8:	88 60       	ori	r24, 0x08	; 8
    26ca:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A); //ÛÒÚ‡Ì‡‚ÎË‚‡ÂÏ ·ËÚ ‡ÁÂ¯ÂÌËˇ ÔÂ˚‚‡ÌËˇ 1Ó„Ó Ò˜ÂÚ˜ËÍ‡ ÔÓ ÒÓ‚Ô‡‰ÂÌË˛ Ò OCR1A(H Ë L)
    26cc:	89 b7       	in	r24, 0x39	; 57
    26ce:	80 61       	ori	r24, 0x10	; 16
    26d0:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b10011000; //Á‡ÔËÒ˚‚‡ÂÏ ‚ Â„ËÒÚ ˜ËÒÎÓ 62500 ‰Îˇ Ò‡‚ÌÂÌËˇ. 0b11110100(8ÒÂÍ) 0b01111010(4ÒÂÍ) 0b10011000(5c)
    26d2:	88 e9       	ldi	r24, 0x98	; 152
    26d4:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b10010110; // 0b00100100(8ÒÂÍ) 0b00010010(4ÒÂÍ) 0b10010110(5c)
    26d6:	86 e9       	ldi	r24, 0x96	; 150
    26d8:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS12)|(1<<CS10);//ÛÒÚ‡ÌÓ‚ËÏ ‰ÂÎËÚÂÎ¸ Ì‡ 1024, ‚˚ÒÚ‡‚ËÏ ·ËÚ CS12 Ë CS10 ‚ 1. Ì‡ ˝ÚÓÚ ‰ÂÎËÚÂÎ¸ Ï˚ ÔÓ‰ÂÎËÏ 8000000
    26da:	8e b5       	in	r24, 0x2e	; 46
    26dc:	85 60       	ori	r24, 0x05	; 5
    26de:	8e bd       	out	0x2e, r24	; 46
    26e0:	08 95       	ret

000026e2 <__vector_7>:
}
//***********************Ó·‡·ÓÚ˜ËÍ ÔÂ˚‚‡ÌËÈ ÓÚ Ú‡ÈÏÂ‡****************
ISR (TIMER1_COMPA_vect)
{
    26e2:	1f 92       	push	r1
    26e4:	0f 92       	push	r0
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	0f 92       	push	r0
    26ea:	11 24       	eor	r1, r1
    26ec:	2f 93       	push	r18
    26ee:	3f 93       	push	r19
    26f0:	8f 93       	push	r24
    26f2:	9f 93       	push	r25
	if(timerCount > timerEnd) timerCount=0; 
    26f4:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <timerCount>
    26f8:	30 91 da 03 	lds	r19, 0x03DA	; 0x8003da <timerCount+0x1>
    26fc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <timerEnd>
    2700:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <timerEnd+0x1>
    2704:	82 17       	cp	r24, r18
    2706:	93 07       	cpc	r25, r19
    2708:	20 f4       	brcc	.+8      	; 0x2712 <__vector_7+0x30>
    270a:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <timerCount+0x1>
    270e:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <timerCount>
	timerCount++;
    2712:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <timerCount>
    2716:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <timerCount+0x1>
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <timerCount+0x1>
    2720:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <timerCount>
    2724:	9f 91       	pop	r25
    2726:	8f 91       	pop	r24
    2728:	3f 91       	pop	r19
    272a:	2f 91       	pop	r18
    272c:	0f 90       	pop	r0
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	0f 90       	pop	r0
    2732:	1f 90       	pop	r1
    2734:	18 95       	reti

00002736 <I2C_Init>:
Ôªø#include "twi.h"

void I2C_Init(void)
{
	TWBR=0x20; // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∏ 8–ú–ì—Ü —É –Ω–∞—Å 100–ö–ì—Ü
    2736:	80 e2       	ldi	r24, 0x20	; 32
    2738:	80 b9       	out	0x00, r24	; 0
    273a:	08 95       	ret

0000273c <I2C_StartCondition>:
}
//-----------------------------------------------
void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    273c:	84 ea       	ldi	r24, 0xA4	; 164
    273e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));// –ü–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è TWINT(–æ–ø—Ä–∞—à–∏–≤–∞–µ–º)
    2740:	06 b6       	in	r0, 0x36	; 54
    2742:	07 fe       	sbrs	r0, 7
    2744:	fd cf       	rjmp	.-6      	; 0x2740 <I2C_StartCondition+0x4>
}
    2746:	08 95       	ret

00002748 <I2C_StopCondition>:
//-----------------------------------------------
void I2C_StopCondition(void)
{
TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    2748:	84 e9       	ldi	r24, 0x94	; 148
    274a:	86 bf       	out	0x36, r24	; 54
    274c:	08 95       	ret

0000274e <I2C_SendByte>:
}
//-----------------------------------------------
void I2C_SendByte(unsigned char c)
{
TWDR=c;// –ó–∞–ø–∏—à–µ–º –±–∞–π—Ç –≤ —Ä–µ–≥–∏—Å—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
    274e:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT)|(1<<TWEN);// –≤–∫–ª—é—á–∏–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö
    2750:	84 e8       	ldi	r24, 0x84	; 132
    2752:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));// –ü–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è TWINT(–æ–ø—Ä–∞—à–∏–≤–∞–µ–º)
    2754:	06 b6       	in	r0, 0x36	; 54
    2756:	07 fe       	sbrs	r0, 7
    2758:	fd cf       	rjmp	.-6      	; 0x2754 <I2C_SendByte+0x6>
}
    275a:	08 95       	ret

0000275c <USART_Init>:

unsigned char USART_Receive(void) //—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
{
	while ( !(UCSRA & (1<<RXC)) ); //–æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–≥–¥–∞ –≤ –ø—Ä–∏–µ–º–Ω–æ–º –±—É—Ñ–µ—Ä–µ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
	return UDR; //–≤–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö  —Å –±—É—Ñ–µ—Ä–∞
}
    275c:	90 bd       	out	0x20, r25	; 32
    275e:	89 b9       	out	0x09, r24	; 9
    2760:	88 e1       	ldi	r24, 0x18	; 24
    2762:	8a b9       	out	0x0a, r24	; 10
    2764:	59 9a       	sbi	0x0b, 1	; 11
    2766:	86 e8       	ldi	r24, 0x86	; 134
    2768:	80 bd       	out	0x20, r24	; 32
    276a:	08 95       	ret

0000276c <USART_Transmit>:
    276c:	5d 9b       	sbis	0x0b, 5	; 11
    276e:	fe cf       	rjmp	.-4      	; 0x276c <USART_Transmit>
    2770:	8c b9       	out	0x0c, r24	; 12
    2772:	08 95       	ret

00002774 <USART_reading_in_array>:

void USART_reading_in_array (unsigned char * data, char length) //—Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤ –º–∞—Å—Å–∏–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
{
	for (char i = 0; i< length; ++i) //–≤ —Ü–∏–∫–ª–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—É data
    2774:	66 23       	and	r22, r22
    2776:	79 f0       	breq	.+30     	; 0x2796 <USART_reading_in_array+0x22>
    2778:	fc 01       	movw	r30, r24
    277a:	61 50       	subi	r22, 0x01	; 1
    277c:	26 2f       	mov	r18, r22
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	2f 5f       	subi	r18, 0xFF	; 255
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	28 0f       	add	r18, r24
    2786:	39 1f       	adc	r19, r25
	{
		while (!(UCSRA & (1<<RXC))); //–æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–≥–¥–∞ –≤ –ø—Ä–∏–µ–º–Ω–æ–º –±—É—Ñ–µ—Ä–µ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    2788:	5f 9b       	sbis	0x0b, 7	; 11
    278a:	fe cf       	rjmp	.-4      	; 0x2788 <USART_reading_in_array+0x14>
		data [i]= UDR;
    278c:	9c b1       	in	r25, 0x0c	; 12
    278e:	91 93       	st	Z+, r25
	return UDR; //–≤–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö  —Å –±—É—Ñ–µ—Ä–∞
}

void USART_reading_in_array (unsigned char * data, char length) //—Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤ –º–∞—Å—Å–∏–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
{
	for (char i = 0; i< length; ++i) //–≤ —Ü–∏–∫–ª–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—É data
    2790:	e2 17       	cp	r30, r18
    2792:	f3 07       	cpc	r31, r19
    2794:	c9 f7       	brne	.-14     	; 0x2788 <USART_reading_in_array+0x14>
    2796:	08 95       	ret

00002798 <readBatteryVoltage>:
#define isButtonChargePresed !(PINB&button_charge)

//----------------—˜ËÚ˚‚‡ÂÏ ÁÌ‡˜ÂÌËˇ Ì‡ÔˇÊÂÌËÈ Ò ¿÷œ------------------------
void readBatteryVoltage(){
	//‚ÍÎ˛˜‡ÂÏ ‚ıÓ‰ ADC0 ADMUX = 11000000;
	ADMUX &=~(1<<MUX1);
    2798:	39 98       	cbi	0x07, 1	; 7
	ADMUX &=~(1<<MUX0);
    279a:	38 98       	cbi	0x07, 0	; 7
    279c:	8f e1       	ldi	r24, 0x1F	; 31
    279e:	9e e4       	ldi	r25, 0x4E	; 78
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <readBatteryVoltage+0x8>
    27a4:	00 c0       	rjmp	.+0      	; 0x27a6 <readBatteryVoltage+0xe>
    27a6:	00 00       	nop
	_delay_ms(10);
	bat1 = (unsigned int)get_ADC_value();
    27a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <get_ADC_value>
    27ac:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <bat1+0x1>
    27b0:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <bat1>
	//‚ÍÎ˛˜‡ÂÏ ‚ıÓ‰ ADC2 ADMUX = 11000010;
	ADMUX &=~(1<<MUX0);
    27b4:	38 98       	cbi	0x07, 0	; 7
	ADMUX |=(1<<MUX1);
    27b6:	39 9a       	sbi	0x07, 1	; 7
    27b8:	8f e1       	ldi	r24, 0x1F	; 31
    27ba:	9e e4       	ldi	r25, 0x4E	; 78
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <readBatteryVoltage+0x24>
    27c0:	00 c0       	rjmp	.+0      	; 0x27c2 <readBatteryVoltage+0x2a>
    27c2:	00 00       	nop
	_delay_ms(10);
	bat2 = (unsigned int)get_ADC_value();
    27c4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <get_ADC_value>
    27c8:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <bat2+0x1>
    27cc:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <bat2>
	//‚ÍÎ˛˜‡ÂÏ ‚ıÓ‰ ADC1 ADMUX = 11000001;
	ADMUX &=~(1<<MUX1);
    27d0:	39 98       	cbi	0x07, 1	; 7
	ADMUX |=(1<<MUX0);
    27d2:	38 9a       	sbi	0x07, 0	; 7
    27d4:	8f e1       	ldi	r24, 0x1F	; 31
    27d6:	9e e4       	ldi	r25, 0x4E	; 78
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <readBatteryVoltage+0x40>
    27dc:	00 c0       	rjmp	.+0      	; 0x27de <readBatteryVoltage+0x46>
    27de:	00 00       	nop
	_delay_ms(10);
	bat3 = (unsigned int)get_ADC_value();
    27e0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <get_ADC_value>
    27e4:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <bat3+0x1>
    27e8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <bat3>
    27ec:	08 95       	ret

000027ee <changeBattery>:
}

//****************œÓ‚ÂˇÂÏ ·‡Ú‡ÂË Ì‡ ‡Áˇ‰**********************
void changeBattery(){
	if (bat1<minimumValueForDischargingBat1) //ÔÓ‚ÂˇÂÏ Ì‡ÔˇÊÂÌËÂ Ì‡ ·‡Ú‡ÂÂ ¬1 ÏÂÌ¸¯Â 2.75¬
    27ee:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <bat1>
    27f2:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <bat1+0x1>
    27f6:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <minimumValueForDischargingBat1>
    27fa:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <minimumValueForDischargingBat1+0x1>
    27fe:	28 17       	cp	r18, r24
    2800:	39 07       	cpc	r19, r25
    2802:	20 f4       	brcc	.+8      	; 0x280c <changeBattery+0x1e>
	{
		charge_mode=1; //ÏÂÌˇÂÏ ÒÚ‡ÚÛÒ Ì‡ 1
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <charge_mode>
		rele_charge_on;//‚ÍÎ˛˜‡ÂÏ ÂÎÂ Á‡ˇ‰ÍË  1
    280a:	db 9a       	sbi	0x1b, 3	; 27
	}
	if (bat2-bat1<minimumValueForDischargingBat2) //ÔÓ‚ÂˇÂÏ Ì‡ÔˇÊÂÌËÂ Ì‡ ·‡Ú‡ÂÂ ¬2
    280c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <bat2>
    2810:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <bat2+0x1>
    2814:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <bat1>
    2818:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <bat1+0x1>
    281c:	82 1b       	sub	r24, r18
    281e:	93 0b       	sbc	r25, r19
    2820:	20 91 27 04 	lds	r18, 0x0427	; 0x800427 <minimumValueForDischargingBat2>
    2824:	30 91 28 04 	lds	r19, 0x0428	; 0x800428 <minimumValueForDischargingBat2+0x1>
    2828:	82 17       	cp	r24, r18
    282a:	93 07       	cpc	r25, r19
    282c:	20 f4       	brcc	.+8      	; 0x2836 <changeBattery+0x48>
	{
		charge_mode=1; //ÏÂÌˇÂÏ ÒÚ‡ÚÛÒ Ì‡ 1
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <charge_mode>
		rele_charge_on;//‚ÍÎ˛˜‡ÂÏ ÂÎÂ Á‡ˇ‰ÍË  1
    2834:	db 9a       	sbi	0x1b, 3	; 27
	}
	if (bat3-bat2<minimumValueForDischargingBat3) //ÔÓ‚ÂˇÂÏ Ì‡ÔˇÊÂÌËÂ Ì‡ ·‡Ú‡ÂÂ ¬3
    2836:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <bat3>
    283a:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <bat3+0x1>
    283e:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <bat2>
    2842:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <bat2+0x1>
    2846:	82 1b       	sub	r24, r18
    2848:	93 0b       	sbc	r25, r19
    284a:	20 91 35 04 	lds	r18, 0x0435	; 0x800435 <minimumValueForDischargingBat3>
    284e:	30 91 36 04 	lds	r19, 0x0436	; 0x800436 <minimumValueForDischargingBat3+0x1>
    2852:	82 17       	cp	r24, r18
    2854:	93 07       	cpc	r25, r19
    2856:	20 f4       	brcc	.+8      	; 0x2860 <changeBattery+0x72>
	{
		charge_mode=1; //ÏÂÌˇÂÏ ÒÚ‡ÚÛÒ Ì‡ 1
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <charge_mode>
		rele_charge_on;//‚ÍÎ˛˜‡ÂÏ ÂÎÂ Á‡ˇ‰ÍË  1
    285e:	db 9a       	sbi	0x1b, 3	; 27
    2860:	08 95       	ret

00002862 <workBypass>:
	}
}

//**********************–Â‡ÎËÁÛÂÏ ·‡Î‡ÌÒË ·‡Ú‡ÂÈ*****************
void workBypass(){
	if (charge_mode == 1){ //ÂÒÎË ‚ÍÎ˛˜ÂÌ ÂÊËÏ Á‡ˇ‰ÍË
    2862:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <charge_mode>
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	09 f0       	breq	.+2      	; 0x286c <workBypass+0xa>
    286a:	45 c0       	rjmp	.+138    	; 0x28f6 <workBypass+0x94>
		if (bat1 > maximumValueForChargingBat1){//ÔÓ‚ÂˇÂÏ Ì‡ÔˇÊÂÌËÂ Ì‡ ·‡Ú‡ÂËË ¬1
    286c:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <bat1>
    2870:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <bat1+0x1>
    2874:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <maximumValueForChargingBat1>
    2878:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <maximumValueForChargingBat1+0x1>
    287c:	82 17       	cp	r24, r18
    287e:	93 07       	cpc	r25, r19
    2880:	28 f4       	brcc	.+10     	; 0x288c <workBypass+0x2a>
			bypassMode1 = 1; //‚˚ÒÚ‡‚ÎˇÂÏ ÒÚ‡ÚÛÒ 1 Ë ‚ÍÎ˛˜‡ÂÏ ·‡ÈÔ‡Ò ·‡Ú‡ÂË
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <bypassMode1>
			bypass_BAT1_on;
    2888:	c1 9a       	sbi	0x18, 1	; 24
    288a:	03 c0       	rjmp	.+6      	; 0x2892 <workBypass+0x30>
		}else{
			bypassMode1 = 0; //‚˚ÒÚ‡‚ÎˇÂÏ ÒÚ‡ÚÛÒ 0 Ë ‚˚ÍÎ˛˜‡ÂÏ ·‡ÈÔ‡Ò ·‡Ú‡ÂË
    288c:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <bypassMode1>
			bypass_BAT1_off;
    2890:	c1 98       	cbi	0x18, 1	; 24
		}
		if (bat2 - bat1 > maximumValueForChargingBat2){ //ÔÓ‚ÂˇÂÏ Ì‡ÔˇÊÂÌËÂ Ì‡ ·‡Ú‡ÂËË ¬2
    2892:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <bat2>
    2896:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <bat2+0x1>
    289a:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <bat1>
    289e:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <bat1+0x1>
    28a2:	82 1b       	sub	r24, r18
    28a4:	93 0b       	sbc	r25, r19
    28a6:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <maximumValueForChargingBat2>
    28aa:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <maximumValueForChargingBat2+0x1>
    28ae:	28 17       	cp	r18, r24
    28b0:	39 07       	cpc	r19, r25
    28b2:	28 f4       	brcc	.+10     	; 0x28be <workBypass+0x5c>
			bypassMode2 = 1; //‚˚ÒÚ‡‚ÎˇÂÏ ÒÚ‡ÚÛÒ 1 Ë ‚ÍÎ˛˜‡ÂÏ ·‡ÈÔ‡Ò ·‡Ú‡ÂË
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <bypassMode2>
			bypass_BAT2_on;
    28ba:	c0 9a       	sbi	0x18, 0	; 24
    28bc:	03 c0       	rjmp	.+6      	; 0x28c4 <workBypass+0x62>
		}else{
			bypassMode2 = 0; //‚˚ÒÚ‡‚ÎˇÂÏ ÒÚ‡ÚÛÒ 0 Ë ‚˚ÍÎ˛˜‡ÂÏ ·‡ÈÔ‡Ò ·‡Ú‡ÂË
    28be:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <bypassMode2>
			bypass_BAT2_off;
    28c2:	c0 98       	cbi	0x18, 0	; 24
		}
		if (bat3 - bat2 > maximumValueForChargingBat3){ //ÔÓ‚ÂˇÂÏ Ì‡ÔˇÊÂÌËÂ Ì‡ ·‡Ú‡ÂËË ¬3
    28c4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <bat3>
    28c8:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <bat3+0x1>
    28cc:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <bat2>
    28d0:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <bat2+0x1>
    28d4:	82 1b       	sub	r24, r18
    28d6:	93 0b       	sbc	r25, r19
    28d8:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <maximumValueForChargingBat3>
    28dc:	30 91 32 04 	lds	r19, 0x0432	; 0x800432 <maximumValueForChargingBat3+0x1>
    28e0:	28 17       	cp	r18, r24
    28e2:	39 07       	cpc	r19, r25
    28e4:	28 f4       	brcc	.+10     	; 0x28f0 <workBypass+0x8e>
			bypassMode3 = 1; //‚˚ÒÚ‡‚ÎˇÂÏ ÒÚ‡ÚÛÒ 1 Ë ‚ÍÎ˛˜‡ÂÏ ·‡ÈÔ‡Ò ·‡Ú‡ÂË
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <bypassMode3>
			bypass_BAT3_on;
    28ec:	c2 9a       	sbi	0x18, 2	; 24
    28ee:	08 95       	ret
		}else{
			bypassMode3 = 0; //‚˚ÒÚ‡‚ÎˇÂÏ ÒÚ‡ÚÛÒ 0 Ë ‚˚ÍÎ˛˜‡ÂÏ ·‡ÈÔ‡Ò ·‡Ú‡ÂË
    28f0:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <bypassMode3>
			bypass_BAT3_off;
    28f4:	c2 98       	cbi	0x18, 2	; 24
    28f6:	08 95       	ret

000028f8 <pushButtonCharging>:
	}	
}

//****************¬Î˛˜‡ÂÏ-‚˚ÍÎ˛˜‡ÂÏ Á‡ˇ‰ÍÛ ·‡Ú‡ÂÈ ÔÓ Ì‡Ê‡ÚË˛ Ì‡ ÍÌÓÔÍÛ********
void pushButtonCharging(){ 
	if (charge_mode == 0 && isButtonChargePresed)
    28f8:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <charge_mode>
    28fc:	81 11       	cpse	r24, r1
    28fe:	09 c0       	rjmp	.+18     	; 0x2912 <pushButtonCharging+0x1a>
    2900:	b3 99       	sbic	0x16, 3	; 22
    2902:	10 c0       	rjmp	.+32     	; 0x2924 <pushButtonCharging+0x2c>
	{
			while (isButtonChargePresed); //Ê‰ÂÏ ÓÚÔÛÒÍ‡ÌËˇ ÍÌÓÔÍË
    2904:	b3 9b       	sbis	0x16, 3	; 22
    2906:	fe cf       	rjmp	.-4      	; 0x2904 <pushButtonCharging+0xc>
			rele_charge_on;
    2908:	db 9a       	sbi	0x1b, 3	; 27
			charge_mode = 1;
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <charge_mode>
    2910:	08 95       	ret
	}
	else if (charge_mode == 1 && isButtonChargePresed)
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	39 f4       	brne	.+14     	; 0x2924 <pushButtonCharging+0x2c>
    2916:	b3 99       	sbic	0x16, 3	; 22
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <pushButtonCharging+0x2c>
	{
		while (isButtonChargePresed); //Ê‰ÂÏ ÓÚÔÛÒÍ‡ÌËˇ ÍÌÓÔÍË
    291a:	b3 9b       	sbis	0x16, 3	; 22
    291c:	fe cf       	rjmp	.-4      	; 0x291a <pushButtonCharging+0x22>
		rele_charge_off;
    291e:	db 98       	cbi	0x1b, 3	; 27
		charge_mode = 0; 
    2920:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <charge_mode>
    2924:	08 95       	ret

00002926 <endOfChargeControl>:
}

//****************ÍÓÌÚÓÎ¸ Á‡ˇ‰‡ ·‡Ú‡ÂÈ****************************
void endOfChargeControl(){
//œÓ‚ÂˇÂÏ Ì‡ÔˇÊÂÌËÂ ‚ÒÂÈ ·‡Ú‡ÂË
	if (charge_mode && bat3 > maximumValueForCharging){
    2926:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <charge_mode>
    292a:	88 23       	and	r24, r24
    292c:	b9 f0       	breq	.+46     	; 0x295c <endOfChargeControl+0x36>
    292e:	20 91 29 04 	lds	r18, 0x0429	; 0x800429 <bat3>
    2932:	30 91 2a 04 	lds	r19, 0x042A	; 0x80042a <bat3+0x1>
    2936:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <maximumValueForCharging>
    293a:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <maximumValueForCharging+0x1>
    293e:	82 17       	cp	r24, r18
    2940:	93 07       	cpc	r25, r19
    2942:	60 f4       	brcc	.+24     	; 0x295c <endOfChargeControl+0x36>
		rele_charge_off;
    2944:	db 98       	cbi	0x1b, 3	; 27
		charge_mode = 0; //ÏÂÌˇÂÏ ÒÚ‡ÚÛÒ Ì‡ 0
    2946:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <charge_mode>
		bypass_BAT1_off; //ŒÚÍÎ˛˜‡ÂÏ ·‡ÈÔ‡Ò˚ ·‡Ú‡ÂÈ
    294a:	c1 98       	cbi	0x18, 1	; 24
		bypass_BAT2_off;
    294c:	c0 98       	cbi	0x18, 0	; 24
		bypass_BAT3_off;
    294e:	c2 98       	cbi	0x18, 2	; 24
		bypassMode1 = 0;
    2950:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <bypassMode1>
		bypassMode2 = 0;
    2954:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <bypassMode2>
		bypassMode3 = 0;
    2958:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <bypassMode3>
    295c:	08 95       	ret

0000295e <recordOfCoefficientsEEPROM>:
	}	
}	

//*******Á‡ÔËÒ¸ ÍÓ∫ÙËˆËÂÌÚÓ‚ ÔÂÓ·‡ÁÓ‚‡ÌËˇ ÁÌ‡˜ÂÌËˇ ¿÷œ-Ì‡ÔÊÂÌËÂ ‚ eeprom*******
void recordOfCoefficientsEEPROM(float voltage, char numBatery){
    295e:	8f 92       	push	r8
    2960:	9f 92       	push	r9
    2962:	af 92       	push	r10
    2964:	bf 92       	push	r11
    2966:	cf 92       	push	r12
    2968:	df 92       	push	r13
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	6b 01       	movw	r12, r22
    2974:	7c 01       	movw	r14, r24
    2976:	c4 2f       	mov	r28, r20
	readBatteryVoltage();
    2978:	0e 94 cc 13 	call	0x2798	; 0x2798 <readBatteryVoltage>
	unsigned int address = 0;
	unsigned int batteryADC = 0;
	unsigned int word = 0;
	float coefficient = 0;
	switch(numBatery)
    297c:	c2 30       	cpi	r28, 0x02	; 2
    297e:	59 f0       	breq	.+22     	; 0x2996 <recordOfCoefficientsEEPROM+0x38>
    2980:	c3 30       	cpi	r28, 0x03	; 3
    2982:	b1 f0       	breq	.+44     	; 0x29b0 <recordOfCoefficientsEEPROM+0x52>
    2984:	c1 30       	cpi	r28, 0x01	; 1
    2986:	09 f5       	brne	.+66     	; 0x29ca <recordOfCoefficientsEEPROM+0x6c>
	{
		case 1: address = 800;
				batteryADC = bat1;
    2988:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <bat1>
    298c:	70 91 34 04 	lds	r23, 0x0434	; 0x800434 <bat1+0x1>
	unsigned int batteryADC = 0;
	unsigned int word = 0;
	float coefficient = 0;
	switch(numBatery)
	{
		case 1: address = 800;
    2990:	c0 e2       	ldi	r28, 0x20	; 32
    2992:	d3 e0       	ldi	r29, 0x03	; 3
				batteryADC = bat1;
				break;
    2994:	1e c0       	rjmp	.+60     	; 0x29d2 <recordOfCoefficientsEEPROM+0x74>
		case 2: address = 804; 
				batteryADC = bat2 - bat1;
    2996:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <bat2>
    299a:	70 91 26 04 	lds	r23, 0x0426	; 0x800426 <bat2+0x1>
    299e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <bat1>
    29a2:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <bat1+0x1>
    29a6:	68 1b       	sub	r22, r24
    29a8:	79 0b       	sbc	r23, r25
	switch(numBatery)
	{
		case 1: address = 800;
				batteryADC = bat1;
				break;
		case 2: address = 804; 
    29aa:	c4 e2       	ldi	r28, 0x24	; 36
    29ac:	d3 e0       	ldi	r29, 0x03	; 3
				batteryADC = bat2 - bat1;
				break;
    29ae:	11 c0       	rjmp	.+34     	; 0x29d2 <recordOfCoefficientsEEPROM+0x74>
		case 3: address = 808; 
				batteryADC = bat3 - bat2;
    29b0:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <bat3>
    29b4:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <bat3+0x1>
    29b8:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <bat2>
    29bc:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <bat2+0x1>
    29c0:	68 1b       	sub	r22, r24
    29c2:	79 0b       	sbc	r23, r25
				batteryADC = bat1;
				break;
		case 2: address = 804; 
				batteryADC = bat2 - bat1;
				break;
		case 3: address = 808; 
    29c4:	c8 e2       	ldi	r28, 0x28	; 40
    29c6:	d3 e0       	ldi	r29, 0x03	; 3
				batteryADC = bat3 - bat2;
				break;
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <recordOfCoefficientsEEPROM+0x74>

//*******Á‡ÔËÒ¸ ÍÓ∫ÙËˆËÂÌÚÓ‚ ÔÂÓ·‡ÁÓ‚‡ÌËˇ ÁÌ‡˜ÂÌËˇ ¿÷œ-Ì‡ÔÊÂÌËÂ ‚ eeprom*******
void recordOfCoefficientsEEPROM(float voltage, char numBatery){
	readBatteryVoltage();
	unsigned int address = 0;
	unsigned int batteryADC = 0;
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	70 e0       	ldi	r23, 0x00	; 0
}	

//*******Á‡ÔËÒ¸ ÍÓ∫ÙËˆËÂÌÚÓ‚ ÔÂÓ·‡ÁÓ‚‡ÌËˇ ÁÌ‡˜ÂÌËˇ ¿÷œ-Ì‡ÔÊÂÌËÂ ‚ eeprom*******
void recordOfCoefficientsEEPROM(float voltage, char numBatery){
	readBatteryVoltage();
	unsigned int address = 0;
    29ce:	c0 e0       	ldi	r28, 0x00	; 0
    29d0:	d0 e0       	ldi	r29, 0x00	; 0
				break;
		case 3: address = 808; 
				batteryADC = bat3 - bat2;
				break;
	}
	coefficient = (float)batteryADC / voltage;
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    29da:	a7 01       	movw	r20, r14
    29dc:	96 01       	movw	r18, r12
    29de:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    29e2:	4b 01       	movw	r8, r22
    29e4:	5c 01       	movw	r10, r24
	word = (int)coefficient; //Ó·ÂÁ‡ÂÏ Ë Á‡ÔËÒ˚‚‡ÂÏ ˆÂÎÛ˛ ˜‡ÒÚ¸
    29e6:	0e 94 25 19 	call	0x324a	; 0x324a <__fixsfsi>
    29ea:	6b 01       	movw	r12, r22
    29ec:	7c 01       	movw	r14, r24
	EEPROM_write_word(address, word);
    29ee:	ce 01       	movw	r24, r28
    29f0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write_word>
	coefficient -= word; 
	word = coefficient * 10000; //ÔÓÎÛ˜‡ÂÏ ‰Ó·ÌÛ˛ ˜‡ÒÚ¸ Ë Á‡ÔËÒ˚‚‡ÂÏ Â∏
    29f4:	b6 01       	movw	r22, r12
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    29fe:	9b 01       	movw	r18, r22
    2a00:	ac 01       	movw	r20, r24
    2a02:	c5 01       	movw	r24, r10
    2a04:	b4 01       	movw	r22, r8
    2a06:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e4       	ldi	r19, 0x40	; 64
    2a0e:	4c e1       	ldi	r20, 0x1C	; 28
    2a10:	56 e4       	ldi	r21, 0x46	; 70
    2a12:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
	EEPROM_write_word(address + 2, word);
    2a16:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	02 96       	adiw	r24, 0x02	; 2
    2a1e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <EEPROM_write_word>
}
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	ff 90       	pop	r15
    2a28:	ef 90       	pop	r14
    2a2a:	df 90       	pop	r13
    2a2c:	cf 90       	pop	r12
    2a2e:	bf 90       	pop	r11
    2a30:	af 90       	pop	r10
    2a32:	9f 90       	pop	r9
    2a34:	8f 90       	pop	r8
    2a36:	08 95       	ret

00002a38 <readingCoefficientsEEPROM>:

//**************˜ÚÂÌËÂ ÍÓ˝ÙËˆËÂÌÚÓ‚ ËÁ EEPROM **********************
void readingCoefficientsEEPROM(){
    2a38:	cf 92       	push	r12
    2a3a:	df 92       	push	r13
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	cf 93       	push	r28
    2a42:	df 93       	push	r29
	coefficientBat1 = EEPROM_read_word(800) + (float)EEPROM_read_word(802)/10000.0;
    2a44:	80 e2       	ldi	r24, 0x20	; 32
    2a46:	93 e0       	ldi	r25, 0x03	; 3
    2a48:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
    2a4c:	ec 01       	movw	r28, r24
    2a4e:	82 e2       	ldi	r24, 0x22	; 34
    2a50:	93 e0       	ldi	r25, 0x03	; 3
    2a52:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
    2a56:	bc 01       	movw	r22, r24
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e4       	ldi	r19, 0x40	; 64
    2a64:	4c e1       	ldi	r20, 0x1C	; 28
    2a66:	56 e4       	ldi	r21, 0x46	; 70
    2a68:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2a6c:	6b 01       	movw	r12, r22
    2a6e:	7c 01       	movw	r14, r24
    2a70:	be 01       	movw	r22, r28
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2a7a:	9b 01       	movw	r18, r22
    2a7c:	ac 01       	movw	r20, r24
    2a7e:	c7 01       	movw	r24, r14
    2a80:	b6 01       	movw	r22, r12
    2a82:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    2a86:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <coefficientBat1>
    2a8a:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <coefficientBat1+0x1>
    2a8e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <coefficientBat1+0x2>
    2a92:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <coefficientBat1+0x3>
	coefficientBat2 = EEPROM_read_word(804) + (float)(EEPROM_read_word(806)/10000.0);
    2a96:	84 e2       	ldi	r24, 0x24	; 36
    2a98:	93 e0       	ldi	r25, 0x03	; 3
    2a9a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
    2a9e:	ec 01       	movw	r28, r24
    2aa0:	86 e2       	ldi	r24, 0x26	; 38
    2aa2:	93 e0       	ldi	r25, 0x03	; 3
    2aa4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e4       	ldi	r19, 0x40	; 64
    2ab6:	4c e1       	ldi	r20, 0x1C	; 28
    2ab8:	56 e4       	ldi	r21, 0x46	; 70
    2aba:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2abe:	6b 01       	movw	r12, r22
    2ac0:	7c 01       	movw	r14, r24
    2ac2:	be 01       	movw	r22, r28
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2acc:	9b 01       	movw	r18, r22
    2ace:	ac 01       	movw	r20, r24
    2ad0:	c7 01       	movw	r24, r14
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    2ad8:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <coefficientBat2>
    2adc:	70 93 22 04 	sts	0x0422, r23	; 0x800422 <coefficientBat2+0x1>
    2ae0:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <coefficientBat2+0x2>
    2ae4:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <coefficientBat2+0x3>
	coefficientBat3 = EEPROM_read_word(808) + (float)(EEPROM_read_word(810)/10000.0);
    2ae8:	88 e2       	ldi	r24, 0x28	; 40
    2aea:	93 e0       	ldi	r25, 0x03	; 3
    2aec:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
    2af0:	ec 01       	movw	r28, r24
    2af2:	8a e2       	ldi	r24, 0x2A	; 42
    2af4:	93 e0       	ldi	r25, 0x03	; 3
    2af6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EEPROM_read_word>
    2afa:	bc 01       	movw	r22, r24
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e4       	ldi	r19, 0x40	; 64
    2b08:	4c e1       	ldi	r20, 0x1C	; 28
    2b0a:	56 e4       	ldi	r21, 0x46	; 70
    2b0c:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2b10:	6b 01       	movw	r12, r22
    2b12:	7c 01       	movw	r14, r24
    2b14:	be 01       	movw	r22, r28
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2b1e:	9b 01       	movw	r18, r22
    2b20:	ac 01       	movw	r20, r24
    2b22:	c7 01       	movw	r24, r14
    2b24:	b6 01       	movw	r22, r12
    2b26:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    2b2a:	60 93 39 04 	sts	0x0439, r22	; 0x800439 <coefficientBat3>
    2b2e:	70 93 3a 04 	sts	0x043A, r23	; 0x80043a <coefficientBat3+0x1>
    2b32:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <coefficientBat3+0x2>
    2b36:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <coefficientBat3+0x3>
	minimumVoltage =  EEPROM_read(812) + (float)(EEPROM_read(813)/100.0);
    2b3a:	8c e2       	ldi	r24, 0x2C	; 44
    2b3c:	93 e0       	ldi	r25, 0x03	; 3
    2b3e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
    2b42:	c8 2f       	mov	r28, r24
    2b44:	8d e2       	ldi	r24, 0x2D	; 45
    2b46:	93 e0       	ldi	r25, 0x03	; 3
    2b48:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
    2b4c:	68 2f       	mov	r22, r24
    2b4e:	70 e0       	ldi	r23, 0x00	; 0
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	48 ec       	ldi	r20, 0xC8	; 200
    2b5e:	52 e4       	ldi	r21, 0x42	; 66
    2b60:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2b64:	6b 01       	movw	r12, r22
    2b66:	7c 01       	movw	r14, r24
    2b68:	6c 2f       	mov	r22, r28
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
    2b74:	9b 01       	movw	r18, r22
    2b76:	ac 01       	movw	r20, r24
    2b78:	c7 01       	movw	r24, r14
    2b7a:	b6 01       	movw	r22, r12
    2b7c:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    2b80:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <minimumVoltage>
    2b84:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <minimumVoltage+0x1>
    2b88:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <minimumVoltage+0x2>
    2b8c:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <minimumVoltage+0x3>
	maximumVoltage = EEPROM_read(814) + (float)(EEPROM_read(815)/100.0); 
    2b90:	8e e2       	ldi	r24, 0x2E	; 46
    2b92:	93 e0       	ldi	r25, 0x03	; 3
    2b94:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
    2b98:	c8 2f       	mov	r28, r24
    2b9a:	8f e2       	ldi	r24, 0x2F	; 47
    2b9c:	93 e0       	ldi	r25, 0x03	; 3
    2b9e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EEPROM_read>
    2ba2:	68 2f       	mov	r22, r24
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	48 ec       	ldi	r20, 0xC8	; 200
    2bb4:	52 e4       	ldi	r21, 0x42	; 66
    2bb6:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2bba:	6b 01       	movw	r12, r22
    2bbc:	7c 01       	movw	r14, r24
    2bbe:	6c 2f       	mov	r22, r28
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
    2bca:	9b 01       	movw	r18, r22
    2bcc:	ac 01       	movw	r20, r24
    2bce:	c7 01       	movw	r24, r14
    2bd0:	b6 01       	movw	r22, r12
    2bd2:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    2bd6:	60 93 3f 04 	sts	0x043F, r22	; 0x80043f <maximumVoltage>
    2bda:	70 93 40 04 	sts	0x0440, r23	; 0x800440 <maximumVoltage+0x1>
    2bde:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <maximumVoltage+0x2>
    2be2:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <maximumVoltage+0x3>
}
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	08 95       	ret

00002bf4 <initWorkBattery>:

//****************ËÌËˆË‡ÎËÁ‡ˆËˇ ‡·ÓÚ˚ Ò ·‡Ú‡ÂˇÏË*******************
void initWorkBattery(){
    2bf4:	4f 92       	push	r4
    2bf6:	5f 92       	push	r5
    2bf8:	6f 92       	push	r6
    2bfa:	7f 92       	push	r7
    2bfc:	8f 92       	push	r8
    2bfe:	9f 92       	push	r9
    2c00:	af 92       	push	r10
    2c02:	bf 92       	push	r11
    2c04:	cf 92       	push	r12
    2c06:	df 92       	push	r13
    2c08:	ef 92       	push	r14
    2c0a:	ff 92       	push	r15
    2c0c:	cf 93       	push	r28
    2c0e:	df 93       	push	r29
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <initWorkBattery+0x1e>
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <initWorkBattery+0x20>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
	readingCoefficientsEEPROM();
    2c18:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <readingCoefficientsEEPROM>
	minimumValueForDischargingBat1 = coefficientBat1 * minimumVoltage;
    2c1c:	40 90 2d 04 	lds	r4, 0x042D	; 0x80042d <coefficientBat1>
    2c20:	50 90 2e 04 	lds	r5, 0x042E	; 0x80042e <coefficientBat1+0x1>
    2c24:	60 90 2f 04 	lds	r6, 0x042F	; 0x80042f <coefficientBat1+0x2>
    2c28:	70 90 30 04 	lds	r7, 0x0430	; 0x800430 <coefficientBat1+0x3>
    2c2c:	c0 90 45 04 	lds	r12, 0x0445	; 0x800445 <minimumVoltage>
    2c30:	d0 90 46 04 	lds	r13, 0x0446	; 0x800446 <minimumVoltage+0x1>
    2c34:	e0 90 47 04 	lds	r14, 0x0447	; 0x800447 <minimumVoltage+0x2>
    2c38:	f0 90 48 04 	lds	r15, 0x0448	; 0x800448 <minimumVoltage+0x3>
    2c3c:	a7 01       	movw	r20, r14
    2c3e:	96 01       	movw	r18, r12
    2c40:	c3 01       	movw	r24, r6
    2c42:	b2 01       	movw	r22, r4
    2c44:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2c48:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2c4c:	70 93 38 04 	sts	0x0438, r23	; 0x800438 <minimumValueForDischargingBat1+0x1>
    2c50:	60 93 37 04 	sts	0x0437, r22	; 0x800437 <minimumValueForDischargingBat1>
	minimumValueForDischargingBat2 = coefficientBat2 * minimumVoltage;
    2c54:	80 90 21 04 	lds	r8, 0x0421	; 0x800421 <coefficientBat2>
    2c58:	90 90 22 04 	lds	r9, 0x0422	; 0x800422 <coefficientBat2+0x1>
    2c5c:	a0 90 23 04 	lds	r10, 0x0423	; 0x800423 <coefficientBat2+0x2>
    2c60:	b0 90 24 04 	lds	r11, 0x0424	; 0x800424 <coefficientBat2+0x3>
    2c64:	a5 01       	movw	r20, r10
    2c66:	94 01       	movw	r18, r8
    2c68:	c7 01       	movw	r24, r14
    2c6a:	b6 01       	movw	r22, r12
    2c6c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2c70:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2c74:	70 93 28 04 	sts	0x0428, r23	; 0x800428 <minimumValueForDischargingBat2+0x1>
    2c78:	60 93 27 04 	sts	0x0427, r22	; 0x800427 <minimumValueForDischargingBat2>
	minimumValueForDischargingBat3 = coefficientBat3 * minimumVoltage;
    2c7c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <coefficientBat3>
    2c80:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <coefficientBat3+0x1>
    2c84:	a0 91 3b 04 	lds	r26, 0x043B	; 0x80043b <coefficientBat3+0x2>
    2c88:	b0 91 3c 04 	lds	r27, 0x043C	; 0x80043c <coefficientBat3+0x3>
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	ab 83       	std	Y+3, r26	; 0x03
    2c92:	bc 83       	std	Y+4, r27	; 0x04
    2c94:	9c 01       	movw	r18, r24
    2c96:	ad 01       	movw	r20, r26
    2c98:	c7 01       	movw	r24, r14
    2c9a:	b6 01       	movw	r22, r12
    2c9c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2ca0:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2ca4:	70 93 36 04 	sts	0x0436, r23	; 0x800436 <minimumValueForDischargingBat3+0x1>
    2ca8:	60 93 35 04 	sts	0x0435, r22	; 0x800435 <minimumValueForDischargingBat3>
	maximumValueForChargingBat1 = coefficientBat1 * maximumVoltage;
    2cac:	c0 90 3f 04 	lds	r12, 0x043F	; 0x80043f <maximumVoltage>
    2cb0:	d0 90 40 04 	lds	r13, 0x0440	; 0x800440 <maximumVoltage+0x1>
    2cb4:	e0 90 41 04 	lds	r14, 0x0441	; 0x800441 <maximumVoltage+0x2>
    2cb8:	f0 90 42 04 	lds	r15, 0x0442	; 0x800442 <maximumVoltage+0x3>
    2cbc:	a7 01       	movw	r20, r14
    2cbe:	96 01       	movw	r18, r12
    2cc0:	c3 01       	movw	r24, r6
    2cc2:	b2 01       	movw	r22, r4
    2cc4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2cc8:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2ccc:	2b 01       	movw	r4, r22
    2cce:	3c 01       	movw	r6, r24
    2cd0:	70 93 3e 04 	sts	0x043E, r23	; 0x80043e <maximumValueForChargingBat1+0x1>
    2cd4:	60 93 3d 04 	sts	0x043D, r22	; 0x80043d <maximumValueForChargingBat1>
	maximumValueForChargingBat2 = coefficientBat2 * maximumVoltage;
    2cd8:	a7 01       	movw	r20, r14
    2cda:	96 01       	movw	r18, r12
    2cdc:	c5 01       	movw	r24, r10
    2cde:	b4 01       	movw	r22, r8
    2ce0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2ce4:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2ce8:	4b 01       	movw	r8, r22
    2cea:	5c 01       	movw	r10, r24
    2cec:	70 93 44 04 	sts	0x0444, r23	; 0x800444 <maximumValueForChargingBat2+0x1>
    2cf0:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <maximumValueForChargingBat2>
	maximumValueForChargingBat3 = coefficientBat3 * maximumVoltage;
    2cf4:	a7 01       	movw	r20, r14
    2cf6:	96 01       	movw	r18, r12
    2cf8:	69 81       	ldd	r22, Y+1	; 0x01
    2cfa:	7a 81       	ldd	r23, Y+2	; 0x02
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2d04:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2d08:	70 93 32 04 	sts	0x0432, r23	; 0x800432 <maximumValueForChargingBat3+0x1>
    2d0c:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <maximumValueForChargingBat3>
	//Ï‡ÍÒËÏ‡Î¸ÌÓÂ Ì‡ÔˇÊÂÌËÂ ˝ÚÓ 99% ÓÚ ÒÛÏÏ˚ Ì‡ÔˇÊÂÌËÈ Ì‡ 3 ·‡Ú‡Âˇı
	maximumValueForCharging = ((maximumValueForChargingBat1 +
    2d10:	84 0c       	add	r8, r4
    2d12:	95 1c       	adc	r9, r5
    2d14:	68 0d       	add	r22, r8
    2d16:	79 1d       	adc	r23, r9
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2d20:	24 ea       	ldi	r18, 0xA4	; 164
    2d22:	30 e7       	ldi	r19, 0x70	; 112
    2d24:	4d e7       	ldi	r20, 0x7D	; 125
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2d2c:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    2d30:	70 93 2c 04 	sts	0x042C, r23	; 0x80042c <maximumValueForCharging+0x1>
    2d34:	60 93 2b 04 	sts	0x042B, r22	; 0x80042b <maximumValueForCharging>
								maximumValueForChargingBat2 +
								maximumValueForChargingBat3) * 0.99);
}
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	ff 90       	pop	r15
    2d46:	ef 90       	pop	r14
    2d48:	df 90       	pop	r13
    2d4a:	cf 90       	pop	r12
    2d4c:	bf 90       	pop	r11
    2d4e:	af 90       	pop	r10
    2d50:	9f 90       	pop	r9
    2d52:	8f 90       	pop	r8
    2d54:	7f 90       	pop	r7
    2d56:	6f 90       	pop	r6
    2d58:	5f 90       	pop	r5
    2d5a:	4f 90       	pop	r4
    2d5c:	08 95       	ret

00002d5e <workWithBatteries>:

//**********************‡·ÓÚ‡ Ò ‡ÍÍÛÏÛÎˇÚÓ‡ÏË***********************
void workWithBatteries(){
	readBatteryVoltage(); //˜ËÚ‡ÂÏ Ì‡ÔˇÊÂÌËÂ
    2d5e:	0e 94 cc 13 	call	0x2798	; 0x2798 <readBatteryVoltage>
	pushButtonCharging(); //Ó·‡·‡Ú˚‚‡ÂÏ ÍÌÓÔÍÛ
    2d62:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <pushButtonCharging>
	changeBattery(); //ÔÓ‚ÂˇÂÏ ·‡Ú‡Â˛ ‚ÍÎ˛˜ÂÌËÂ Á‡ˇ‰ÍË
    2d66:	0e 94 f7 13 	call	0x27ee	; 0x27ee <changeBattery>
	workBypass(); //‡·ÓÚ‡ ·‡ÈÔ‡Ò‡
    2d6a:	0e 94 31 14 	call	0x2862	; 0x2862 <workBypass>
	endOfChargeControl(); //ÔÓ‚ÂÍ‡ ÓÍÓÌ˜‡ÌËˇ Á‡ˇ‰ÍË
    2d6e:	0e 94 93 14 	call	0x2926	; 0x2926 <endOfChargeControl>
    2d72:	08 95       	ret

00002d74 <getVoltage>:
}

//*****************************getVoltage*****************************
float getVoltage(char numBatery){
    2d74:	8f 92       	push	r8
    2d76:	9f 92       	push	r9
    2d78:	af 92       	push	r10
    2d7a:	bf 92       	push	r11
    2d7c:	cf 92       	push	r12
    2d7e:	df 92       	push	r13
    2d80:	ef 92       	push	r14
    2d82:	ff 92       	push	r15
	unsigned int batteryADC = 0;
	float coefficient = 0 ;
	switch(numBatery)
    2d84:	82 30       	cpi	r24, 0x02	; 2
    2d86:	b1 f0       	breq	.+44     	; 0x2db4 <getVoltage+0x40>
    2d88:	18 f4       	brcc	.+6      	; 0x2d90 <getVoltage+0x1c>
    2d8a:	81 30       	cpi	r24, 0x01	; 1
    2d8c:	31 f0       	breq	.+12     	; 0x2d9a <getVoltage+0x26>
    2d8e:	85 c0       	rjmp	.+266    	; 0x2e9a <getVoltage+0x126>
    2d90:	83 30       	cpi	r24, 0x03	; 3
    2d92:	19 f1       	breq	.+70     	; 0x2dda <getVoltage+0x66>
    2d94:	84 30       	cpi	r24, 0x04	; 4
    2d96:	a1 f1       	breq	.+104    	; 0x2e00 <getVoltage+0x8c>
    2d98:	80 c0       	rjmp	.+256    	; 0x2e9a <getVoltage+0x126>
	{
		case 1: coefficient = coefficientBat1;
    2d9a:	c0 90 2d 04 	lds	r12, 0x042D	; 0x80042d <coefficientBat1>
    2d9e:	d0 90 2e 04 	lds	r13, 0x042E	; 0x80042e <coefficientBat1+0x1>
    2da2:	e0 90 2f 04 	lds	r14, 0x042F	; 0x80042f <coefficientBat1+0x2>
    2da6:	f0 90 30 04 	lds	r15, 0x0430	; 0x800430 <coefficientBat1+0x3>
				batteryADC = bat1;
    2daa:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <bat1>
    2dae:	70 91 34 04 	lds	r23, 0x0434	; 0x800434 <bat1+0x1>
				break;
    2db2:	78 c0       	rjmp	.+240    	; 0x2ea4 <getVoltage+0x130>
		case 2: coefficient = coefficientBat2;
    2db4:	c0 90 21 04 	lds	r12, 0x0421	; 0x800421 <coefficientBat2>
    2db8:	d0 90 22 04 	lds	r13, 0x0422	; 0x800422 <coefficientBat2+0x1>
    2dbc:	e0 90 23 04 	lds	r14, 0x0423	; 0x800423 <coefficientBat2+0x2>
    2dc0:	f0 90 24 04 	lds	r15, 0x0424	; 0x800424 <coefficientBat2+0x3>
				batteryADC = bat2 - bat1;
    2dc4:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <bat2>
    2dc8:	70 91 26 04 	lds	r23, 0x0426	; 0x800426 <bat2+0x1>
    2dcc:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <bat1>
    2dd0:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <bat1+0x1>
    2dd4:	68 1b       	sub	r22, r24
    2dd6:	79 0b       	sbc	r23, r25
				break;
    2dd8:	65 c0       	rjmp	.+202    	; 0x2ea4 <getVoltage+0x130>
		case 3: coefficient = coefficientBat3;
    2dda:	c0 90 39 04 	lds	r12, 0x0439	; 0x800439 <coefficientBat3>
    2dde:	d0 90 3a 04 	lds	r13, 0x043A	; 0x80043a <coefficientBat3+0x1>
    2de2:	e0 90 3b 04 	lds	r14, 0x043B	; 0x80043b <coefficientBat3+0x2>
    2de6:	f0 90 3c 04 	lds	r15, 0x043C	; 0x80043c <coefficientBat3+0x3>
				batteryADC = bat3 - bat2;
    2dea:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <bat3>
    2dee:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <bat3+0x1>
    2df2:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <bat2>
    2df6:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <bat2+0x1>
    2dfa:	68 1b       	sub	r22, r24
    2dfc:	79 0b       	sbc	r23, r25
				break;
    2dfe:	52 c0       	rjmp	.+164    	; 0x2ea4 <getVoltage+0x130>
		case 4: return (float)bat1/coefficientBat1+ 
    2e00:	e0 90 33 04 	lds	r14, 0x0433	; 0x800433 <bat1>
    2e04:	f0 90 34 04 	lds	r15, 0x0434	; 0x800434 <bat1+0x1>
				(float)(bat2-bat1) / coefficientBat2 +
    2e08:	c0 90 25 04 	lds	r12, 0x0425	; 0x800425 <bat2>
    2e0c:	d0 90 26 04 	lds	r13, 0x0426	; 0x800426 <bat2+0x1>
				batteryADC = bat2 - bat1;
				break;
		case 3: coefficient = coefficientBat3;
				batteryADC = bat3 - bat2;
				break;
		case 4: return (float)bat1/coefficientBat1+ 
    2e10:	b6 01       	movw	r22, r12
    2e12:	6e 19       	sub	r22, r14
    2e14:	7f 09       	sbc	r23, r15
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2e1e:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <coefficientBat2>
    2e22:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <coefficientBat2+0x1>
    2e26:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <coefficientBat2+0x2>
    2e2a:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <coefficientBat2+0x3>
    2e2e:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2e32:	4b 01       	movw	r8, r22
    2e34:	5c 01       	movw	r10, r24
    2e36:	b7 01       	movw	r22, r14
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2e40:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <coefficientBat1>
    2e44:	30 91 2e 04 	lds	r19, 0x042E	; 0x80042e <coefficientBat1+0x1>
    2e48:	40 91 2f 04 	lds	r20, 0x042F	; 0x80042f <coefficientBat1+0x2>
    2e4c:	50 91 30 04 	lds	r21, 0x0430	; 0x800430 <coefficientBat1+0x3>
    2e50:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2e54:	9b 01       	movw	r18, r22
    2e56:	ac 01       	movw	r20, r24
    2e58:	c5 01       	movw	r24, r10
    2e5a:	b4 01       	movw	r22, r8
    2e5c:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    2e60:	4b 01       	movw	r8, r22
    2e62:	5c 01       	movw	r10, r24
    2e64:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <bat3>
    2e68:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <bat3+0x1>
    2e6c:	6c 19       	sub	r22, r12
    2e6e:	7d 09       	sbc	r23, r13
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2e78:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <coefficientBat3>
    2e7c:	30 91 3a 04 	lds	r19, 0x043A	; 0x80043a <coefficientBat3+0x1>
    2e80:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <coefficientBat3+0x2>
    2e84:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <coefficientBat3+0x3>
    2e88:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2e8c:	9b 01       	movw	r18, r22
    2e8e:	ac 01       	movw	r20, r24
    2e90:	c5 01       	movw	r24, r10
    2e92:	b4 01       	movw	r22, r8
    2e94:	0e 94 47 18 	call	0x308e	; 0x308e <__addsf3>
    2e98:	0d c0       	rjmp	.+26     	; 0x2eb4 <getVoltage+0x140>
}

//*****************************getVoltage*****************************
float getVoltage(char numBatery){
	unsigned int batteryADC = 0;
	float coefficient = 0 ;
    2e9a:	c1 2c       	mov	r12, r1
    2e9c:	d1 2c       	mov	r13, r1
    2e9e:	76 01       	movw	r14, r12
	endOfChargeControl(); //ÔÓ‚ÂÍ‡ ÓÍÓÌ˜‡ÌËˇ Á‡ˇ‰ÍË
}

//*****************************getVoltage*****************************
float getVoltage(char numBatery){
	unsigned int batteryADC = 0;
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
		case 4: return (float)bat1/coefficientBat1+ 
				(float)(bat2-bat1) / coefficientBat2 +
				(float)(bat3-bat2) / coefficientBat3;
				break;
	}
	return batteryADC / coefficient;
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2eac:	a7 01       	movw	r20, r14
    2eae:	96 01       	movw	r18, r12
    2eb0:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
}
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	df 90       	pop	r13
    2eba:	cf 90       	pop	r12
    2ebc:	bf 90       	pop	r11
    2ebe:	af 90       	pop	r10
    2ec0:	9f 90       	pop	r9
    2ec2:	8f 90       	pop	r8
    2ec4:	08 95       	ret

00002ec6 <getChargeMode>:

//**************** ÒÓÒÚÓˇÌËÂ ÂÊËÏ‡ Á‡ˇ‰ÍË **********************
char getChargeMode(){return charge_mode;}
    2ec6:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <charge_mode>
    2eca:	08 95       	ret

00002ecc <getBypassMode>:
	
//**************** ÒÓÒÚÓˇÌËÂ ·‡ÈÔ‡ÒÓ‚ ****************************
char getBypassMode(char numBatery){
	char bypass = 0;
	switch(numBatery)
    2ecc:	82 30       	cpi	r24, 0x02	; 2
    2ece:	39 f0       	breq	.+14     	; 0x2ede <getBypassMode+0x12>
    2ed0:	83 30       	cpi	r24, 0x03	; 3
    2ed2:	41 f0       	breq	.+16     	; 0x2ee4 <getBypassMode+0x18>
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	49 f4       	brne	.+18     	; 0x2eea <getBypassMode+0x1e>
	{
		case 1: bypass = bypassMode1;
    2ed8:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <bypassMode1>
				break;
    2edc:	08 95       	ret
		case 2: bypass = bypassMode2;
    2ede:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <bypassMode2>
				break;
    2ee2:	08 95       	ret
		case 3: bypass = bypassMode3;
    2ee4:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bypassMode3>
				break;
    2ee8:	08 95       	ret
//**************** ÒÓÒÚÓˇÌËÂ ÂÊËÏ‡ Á‡ˇ‰ÍË **********************
char getChargeMode(){return charge_mode;}
	
//**************** ÒÓÒÚÓˇÌËÂ ·‡ÈÔ‡ÒÓ‚ ****************************
char getBypassMode(char numBatery){
	char bypass = 0;
    2eea:	80 e0       	ldi	r24, 0x00	; 0
				break;
		case 3: bypass = bypassMode3;
				break;
	}
	return bypass;
}
    2eec:	08 95       	ret

00002eee <setCoefficient>:

//***************ÛÒÚ‡ÌÓ‚Í‡ ÍÓÂÙËˆËÂÌÚ‡ **************************
void setCoefficient(float voltage, char numBatery){
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	6b 01       	movw	r12, r22
    2ef8:	7c 01       	movw	r14, r24
	if (numBatery == 1){
    2efa:	41 30       	cpi	r20, 0x01	; 1
    2efc:	b9 f4       	brne	.+46     	; 0x2f2c <setCoefficient+0x3e>
		recordOfCoefficientsEEPROM(voltage, 1);
    2efe:	0e 94 af 14 	call	0x295e	; 0x295e <recordOfCoefficientsEEPROM>
		coefficientBat1 = bat1 / voltage;
    2f02:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <bat1>
    2f06:	70 91 34 04 	lds	r23, 0x0434	; 0x800434 <bat1+0x1>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2f12:	a7 01       	movw	r20, r14
    2f14:	96 01       	movw	r18, r12
    2f16:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2f1a:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <coefficientBat1>
    2f1e:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <coefficientBat1+0x1>
    2f22:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <coefficientBat1+0x2>
    2f26:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <coefficientBat1+0x3>
    2f2a:	3d c0       	rjmp	.+122    	; 0x2fa6 <setCoefficient+0xb8>
	}
	else if(numBatery == 2){
    2f2c:	42 30       	cpi	r20, 0x02	; 2
    2f2e:	e9 f4       	brne	.+58     	; 0x2f6a <setCoefficient+0x7c>
		recordOfCoefficientsEEPROM(voltage, 2);
    2f30:	0e 94 af 14 	call	0x295e	; 0x295e <recordOfCoefficientsEEPROM>
		coefficientBat2 = (bat2-bat1) / voltage;
    2f34:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <bat2>
    2f38:	70 91 26 04 	lds	r23, 0x0426	; 0x800426 <bat2+0x1>
    2f3c:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <bat1>
    2f40:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <bat1+0x1>
    2f44:	68 1b       	sub	r22, r24
    2f46:	79 0b       	sbc	r23, r25
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2f50:	a7 01       	movw	r20, r14
    2f52:	96 01       	movw	r18, r12
    2f54:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2f58:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <coefficientBat2>
    2f5c:	70 93 22 04 	sts	0x0422, r23	; 0x800422 <coefficientBat2+0x1>
    2f60:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <coefficientBat2+0x2>
    2f64:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <coefficientBat2+0x3>
    2f68:	1e c0       	rjmp	.+60     	; 0x2fa6 <setCoefficient+0xb8>
	}
	else if (numBatery == 3){
    2f6a:	43 30       	cpi	r20, 0x03	; 3
    2f6c:	e1 f4       	brne	.+56     	; 0x2fa6 <setCoefficient+0xb8>
		recordOfCoefficientsEEPROM(voltage, 3);
    2f6e:	0e 94 af 14 	call	0x295e	; 0x295e <recordOfCoefficientsEEPROM>
		coefficientBat3 = (bat3-bat2) / voltage;
    2f72:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <bat3>
    2f76:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <bat3+0x1>
    2f7a:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <bat2>
    2f7e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <bat2+0x1>
    2f82:	68 1b       	sub	r22, r24
    2f84:	79 0b       	sbc	r23, r25
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__floatunsisf>
    2f8e:	a7 01       	movw	r20, r14
    2f90:	96 01       	movw	r18, r12
    2f92:	0e 94 b3 18 	call	0x3166	; 0x3166 <__divsf3>
    2f96:	60 93 39 04 	sts	0x0439, r22	; 0x800439 <coefficientBat3>
    2f9a:	70 93 3a 04 	sts	0x043A, r23	; 0x80043a <coefficientBat3+0x1>
    2f9e:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <coefficientBat3+0x2>
    2fa2:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <coefficientBat3+0x3>
	}
}
    2fa6:	ff 90       	pop	r15
    2fa8:	ef 90       	pop	r14
    2faa:	df 90       	pop	r13
    2fac:	cf 90       	pop	r12
    2fae:	08 95       	ret

00002fb0 <setMinimumVoltage>:

//***************ÛÒÚ‡ÌÓ‚Í‡ ÏËÌËÏ‡Î¸ÌÓ„Ó Ì‡ÔˇÊÂÌËˇ ‡Áˇ‰‡ ****************
void setMinimumVoltage(float voltage){
    2fb0:	8f 92       	push	r8
    2fb2:	9f 92       	push	r9
    2fb4:	af 92       	push	r10
    2fb6:	bf 92       	push	r11
    2fb8:	cf 92       	push	r12
    2fba:	df 92       	push	r13
    2fbc:	ef 92       	push	r14
    2fbe:	ff 92       	push	r15
    2fc0:	4b 01       	movw	r8, r22
    2fc2:	5c 01       	movw	r10, r24
	unsigned char data = (int)voltage; //Ó·ÂÁ‡ÂÏ Ë Á‡ÔËÒ˚‚‡ÂÏ ˆÂÎÛ˛ ˜‡ÒÚ¸
    2fc4:	0e 94 25 19 	call	0x324a	; 0x324a <__fixsfsi>
    2fc8:	6b 01       	movw	r12, r22
    2fca:	7c 01       	movw	r14, r24
	EEPROM_write(812, data);
    2fcc:	8c e2       	ldi	r24, 0x2C	; 44
    2fce:	93 e0       	ldi	r25, 0x03	; 3
    2fd0:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
	voltage -= data;
	data = voltage * 100; //ÔÓÎÛ˜‡ÂÏ ‰Ó·ÌÛ˛ ˜‡ÒÚ¸ Ë Á‡ÔËÒ˚‚‡ÂÏ Â∏
	EEPROM_write(813, data);
    2fd4:	b6 01       	movw	r22, r12
    2fd6:	77 27       	eor	r23, r23
    2fd8:	07 2e       	mov	r0, r23
    2fda:	00 0c       	add	r0, r0
    2fdc:	88 0b       	sbc	r24, r24
    2fde:	99 0b       	sbc	r25, r25
    2fe0:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
    2fe4:	9b 01       	movw	r18, r22
    2fe6:	ac 01       	movw	r20, r24
    2fe8:	c5 01       	movw	r24, r10
    2fea:	b4 01       	movw	r22, r8
    2fec:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	48 ec       	ldi	r20, 0xC8	; 200
    2ff6:	52 e4       	ldi	r21, 0x42	; 66
    2ff8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    2ffc:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    3000:	8d e2       	ldi	r24, 0x2D	; 45
    3002:	93 e0       	ldi	r25, 0x03	; 3
    3004:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
	initWorkBattery();
    3008:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <initWorkBattery>
}
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	df 90       	pop	r13
    3012:	cf 90       	pop	r12
    3014:	bf 90       	pop	r11
    3016:	af 90       	pop	r10
    3018:	9f 90       	pop	r9
    301a:	8f 90       	pop	r8
    301c:	08 95       	ret

0000301e <setMaximumVoltage>:

//***************ÛÒÚ‡ÌÓ‚Í‡ Ï‡ÍÒËÏ‡Î¸ÌÓ„Ó Ì‡ÔˇÊÂÌËˇ Á‡ˇ‰‡ *********
void setMaximumVoltage(float voltage){
    301e:	8f 92       	push	r8
    3020:	9f 92       	push	r9
    3022:	af 92       	push	r10
    3024:	bf 92       	push	r11
    3026:	cf 92       	push	r12
    3028:	df 92       	push	r13
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	4b 01       	movw	r8, r22
    3030:	5c 01       	movw	r10, r24
	unsigned char data = (int)voltage; //Ó·ÂÁ‡ÂÏ Ë Á‡ÔËÒ˚‚‡ÂÏ ˆÂÎÛ˛ ˜‡ÒÚ¸
    3032:	0e 94 25 19 	call	0x324a	; 0x324a <__fixsfsi>
    3036:	6b 01       	movw	r12, r22
    3038:	7c 01       	movw	r14, r24
	EEPROM_write(814, data);
    303a:	8e e2       	ldi	r24, 0x2E	; 46
    303c:	93 e0       	ldi	r25, 0x03	; 3
    303e:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
	voltage -= data;
	data = voltage * 100; //ÔÓÎÛ˜‡ÂÏ ‰Ó·ÌÛ˛ ˜‡ÒÚ¸ Ë Á‡ÔËÒ˚‚‡ÂÏ Â∏
	EEPROM_write(815, data);
    3042:	b6 01       	movw	r22, r12
    3044:	77 27       	eor	r23, r23
    3046:	07 2e       	mov	r0, r23
    3048:	00 0c       	add	r0, r0
    304a:	88 0b       	sbc	r24, r24
    304c:	99 0b       	sbc	r25, r25
    304e:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__floatsisf>
    3052:	9b 01       	movw	r18, r22
    3054:	ac 01       	movw	r20, r24
    3056:	c5 01       	movw	r24, r10
    3058:	b4 01       	movw	r22, r8
    305a:	0e 94 46 18 	call	0x308c	; 0x308c <__subsf3>
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	48 ec       	ldi	r20, 0xC8	; 200
    3064:	52 e4       	ldi	r21, 0x42	; 66
    3066:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__mulsf3>
    306a:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    306e:	8f e2       	ldi	r24, 0x2F	; 47
    3070:	93 e0       	ldi	r25, 0x03	; 3
    3072:	0e 94 c9 01 	call	0x392	; 0x392 <EEPROM_write>
	initWorkBattery();
    3076:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <initWorkBattery>
    307a:	ff 90       	pop	r15
    307c:	ef 90       	pop	r14
    307e:	df 90       	pop	r13
    3080:	cf 90       	pop	r12
    3082:	bf 90       	pop	r11
    3084:	af 90       	pop	r10
    3086:	9f 90       	pop	r9
    3088:	8f 90       	pop	r8
    308a:	08 95       	ret

0000308c <__subsf3>:
    308c:	50 58       	subi	r21, 0x80	; 128

0000308e <__addsf3>:
    308e:	bb 27       	eor	r27, r27
    3090:	aa 27       	eor	r26, r26
    3092:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__addsf3x>
    3096:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_round>
    309a:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fp_pscA>
    309e:	38 f0       	brcs	.+14     	; 0x30ae <__addsf3+0x20>
    30a0:	0e 94 a8 19 	call	0x3350	; 0x3350 <__fp_pscB>
    30a4:	20 f0       	brcs	.+8      	; 0x30ae <__addsf3+0x20>
    30a6:	39 f4       	brne	.+14     	; 0x30b6 <__addsf3+0x28>
    30a8:	9f 3f       	cpi	r25, 0xFF	; 255
    30aa:	19 f4       	brne	.+6      	; 0x30b2 <__addsf3+0x24>
    30ac:	26 f4       	brtc	.+8      	; 0x30b6 <__addsf3+0x28>
    30ae:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__fp_nan>
    30b2:	0e f4       	brtc	.+2      	; 0x30b6 <__addsf3+0x28>
    30b4:	e0 95       	com	r30
    30b6:	e7 fb       	bst	r30, 7
    30b8:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__fp_inf>

000030bc <__addsf3x>:
    30bc:	e9 2f       	mov	r30, r25
    30be:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fp_split3>
    30c2:	58 f3       	brcs	.-42     	; 0x309a <__addsf3+0xc>
    30c4:	ba 17       	cp	r27, r26
    30c6:	62 07       	cpc	r22, r18
    30c8:	73 07       	cpc	r23, r19
    30ca:	84 07       	cpc	r24, r20
    30cc:	95 07       	cpc	r25, r21
    30ce:	20 f0       	brcs	.+8      	; 0x30d8 <__addsf3x+0x1c>
    30d0:	79 f4       	brne	.+30     	; 0x30f0 <__addsf3x+0x34>
    30d2:	a6 f5       	brtc	.+104    	; 0x313c <__addsf3x+0x80>
    30d4:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__fp_zero>
    30d8:	0e f4       	brtc	.+2      	; 0x30dc <__addsf3x+0x20>
    30da:	e0 95       	com	r30
    30dc:	0b 2e       	mov	r0, r27
    30de:	ba 2f       	mov	r27, r26
    30e0:	a0 2d       	mov	r26, r0
    30e2:	0b 01       	movw	r0, r22
    30e4:	b9 01       	movw	r22, r18
    30e6:	90 01       	movw	r18, r0
    30e8:	0c 01       	movw	r0, r24
    30ea:	ca 01       	movw	r24, r20
    30ec:	a0 01       	movw	r20, r0
    30ee:	11 24       	eor	r1, r1
    30f0:	ff 27       	eor	r31, r31
    30f2:	59 1b       	sub	r21, r25
    30f4:	99 f0       	breq	.+38     	; 0x311c <__addsf3x+0x60>
    30f6:	59 3f       	cpi	r21, 0xF9	; 249
    30f8:	50 f4       	brcc	.+20     	; 0x310e <__addsf3x+0x52>
    30fa:	50 3e       	cpi	r21, 0xE0	; 224
    30fc:	68 f1       	brcs	.+90     	; 0x3158 <__addsf3x+0x9c>
    30fe:	1a 16       	cp	r1, r26
    3100:	f0 40       	sbci	r31, 0x00	; 0
    3102:	a2 2f       	mov	r26, r18
    3104:	23 2f       	mov	r18, r19
    3106:	34 2f       	mov	r19, r20
    3108:	44 27       	eor	r20, r20
    310a:	58 5f       	subi	r21, 0xF8	; 248
    310c:	f3 cf       	rjmp	.-26     	; 0x30f4 <__addsf3x+0x38>
    310e:	46 95       	lsr	r20
    3110:	37 95       	ror	r19
    3112:	27 95       	ror	r18
    3114:	a7 95       	ror	r26
    3116:	f0 40       	sbci	r31, 0x00	; 0
    3118:	53 95       	inc	r21
    311a:	c9 f7       	brne	.-14     	; 0x310e <__addsf3x+0x52>
    311c:	7e f4       	brtc	.+30     	; 0x313c <__addsf3x+0x80>
    311e:	1f 16       	cp	r1, r31
    3120:	ba 0b       	sbc	r27, r26
    3122:	62 0b       	sbc	r22, r18
    3124:	73 0b       	sbc	r23, r19
    3126:	84 0b       	sbc	r24, r20
    3128:	ba f0       	brmi	.+46     	; 0x3158 <__addsf3x+0x9c>
    312a:	91 50       	subi	r25, 0x01	; 1
    312c:	a1 f0       	breq	.+40     	; 0x3156 <__addsf3x+0x9a>
    312e:	ff 0f       	add	r31, r31
    3130:	bb 1f       	adc	r27, r27
    3132:	66 1f       	adc	r22, r22
    3134:	77 1f       	adc	r23, r23
    3136:	88 1f       	adc	r24, r24
    3138:	c2 f7       	brpl	.-16     	; 0x312a <__addsf3x+0x6e>
    313a:	0e c0       	rjmp	.+28     	; 0x3158 <__addsf3x+0x9c>
    313c:	ba 0f       	add	r27, r26
    313e:	62 1f       	adc	r22, r18
    3140:	73 1f       	adc	r23, r19
    3142:	84 1f       	adc	r24, r20
    3144:	48 f4       	brcc	.+18     	; 0x3158 <__addsf3x+0x9c>
    3146:	87 95       	ror	r24
    3148:	77 95       	ror	r23
    314a:	67 95       	ror	r22
    314c:	b7 95       	ror	r27
    314e:	f7 95       	ror	r31
    3150:	9e 3f       	cpi	r25, 0xFE	; 254
    3152:	08 f0       	brcs	.+2      	; 0x3156 <__addsf3x+0x9a>
    3154:	b0 cf       	rjmp	.-160    	; 0x30b6 <__addsf3+0x28>
    3156:	93 95       	inc	r25
    3158:	88 0f       	add	r24, r24
    315a:	08 f0       	brcs	.+2      	; 0x315e <__addsf3x+0xa2>
    315c:	99 27       	eor	r25, r25
    315e:	ee 0f       	add	r30, r30
    3160:	97 95       	ror	r25
    3162:	87 95       	ror	r24
    3164:	08 95       	ret

00003166 <__divsf3>:
    3166:	0e 94 c7 18 	call	0x318e	; 0x318e <__divsf3x>
    316a:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_round>
    316e:	0e 94 a8 19 	call	0x3350	; 0x3350 <__fp_pscB>
    3172:	58 f0       	brcs	.+22     	; 0x318a <__divsf3+0x24>
    3174:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fp_pscA>
    3178:	40 f0       	brcs	.+16     	; 0x318a <__divsf3+0x24>
    317a:	29 f4       	brne	.+10     	; 0x3186 <__divsf3+0x20>
    317c:	5f 3f       	cpi	r21, 0xFF	; 255
    317e:	29 f0       	breq	.+10     	; 0x318a <__divsf3+0x24>
    3180:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__fp_inf>
    3184:	51 11       	cpse	r21, r1
    3186:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_szero>
    318a:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__fp_nan>

0000318e <__divsf3x>:
    318e:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fp_split3>
    3192:	68 f3       	brcs	.-38     	; 0x316e <__divsf3+0x8>

00003194 <__divsf3_pse>:
    3194:	99 23       	and	r25, r25
    3196:	b1 f3       	breq	.-20     	; 0x3184 <__divsf3+0x1e>
    3198:	55 23       	and	r21, r21
    319a:	91 f3       	breq	.-28     	; 0x3180 <__divsf3+0x1a>
    319c:	95 1b       	sub	r25, r21
    319e:	55 0b       	sbc	r21, r21
    31a0:	bb 27       	eor	r27, r27
    31a2:	aa 27       	eor	r26, r26
    31a4:	62 17       	cp	r22, r18
    31a6:	73 07       	cpc	r23, r19
    31a8:	84 07       	cpc	r24, r20
    31aa:	38 f0       	brcs	.+14     	; 0x31ba <__divsf3_pse+0x26>
    31ac:	9f 5f       	subi	r25, 0xFF	; 255
    31ae:	5f 4f       	sbci	r21, 0xFF	; 255
    31b0:	22 0f       	add	r18, r18
    31b2:	33 1f       	adc	r19, r19
    31b4:	44 1f       	adc	r20, r20
    31b6:	aa 1f       	adc	r26, r26
    31b8:	a9 f3       	breq	.-22     	; 0x31a4 <__divsf3_pse+0x10>
    31ba:	35 d0       	rcall	.+106    	; 0x3226 <__divsf3_pse+0x92>
    31bc:	0e 2e       	mov	r0, r30
    31be:	3a f0       	brmi	.+14     	; 0x31ce <__divsf3_pse+0x3a>
    31c0:	e0 e8       	ldi	r30, 0x80	; 128
    31c2:	32 d0       	rcall	.+100    	; 0x3228 <__divsf3_pse+0x94>
    31c4:	91 50       	subi	r25, 0x01	; 1
    31c6:	50 40       	sbci	r21, 0x00	; 0
    31c8:	e6 95       	lsr	r30
    31ca:	00 1c       	adc	r0, r0
    31cc:	ca f7       	brpl	.-14     	; 0x31c0 <__divsf3_pse+0x2c>
    31ce:	2b d0       	rcall	.+86     	; 0x3226 <__divsf3_pse+0x92>
    31d0:	fe 2f       	mov	r31, r30
    31d2:	29 d0       	rcall	.+82     	; 0x3226 <__divsf3_pse+0x92>
    31d4:	66 0f       	add	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	88 1f       	adc	r24, r24
    31da:	bb 1f       	adc	r27, r27
    31dc:	26 17       	cp	r18, r22
    31de:	37 07       	cpc	r19, r23
    31e0:	48 07       	cpc	r20, r24
    31e2:	ab 07       	cpc	r26, r27
    31e4:	b0 e8       	ldi	r27, 0x80	; 128
    31e6:	09 f0       	breq	.+2      	; 0x31ea <__divsf3_pse+0x56>
    31e8:	bb 0b       	sbc	r27, r27
    31ea:	80 2d       	mov	r24, r0
    31ec:	bf 01       	movw	r22, r30
    31ee:	ff 27       	eor	r31, r31
    31f0:	93 58       	subi	r25, 0x83	; 131
    31f2:	5f 4f       	sbci	r21, 0xFF	; 255
    31f4:	3a f0       	brmi	.+14     	; 0x3204 <__divsf3_pse+0x70>
    31f6:	9e 3f       	cpi	r25, 0xFE	; 254
    31f8:	51 05       	cpc	r21, r1
    31fa:	78 f0       	brcs	.+30     	; 0x321a <__divsf3_pse+0x86>
    31fc:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__fp_inf>
    3200:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_szero>
    3204:	5f 3f       	cpi	r21, 0xFF	; 255
    3206:	e4 f3       	brlt	.-8      	; 0x3200 <__divsf3_pse+0x6c>
    3208:	98 3e       	cpi	r25, 0xE8	; 232
    320a:	d4 f3       	brlt	.-12     	; 0x3200 <__divsf3_pse+0x6c>
    320c:	86 95       	lsr	r24
    320e:	77 95       	ror	r23
    3210:	67 95       	ror	r22
    3212:	b7 95       	ror	r27
    3214:	f7 95       	ror	r31
    3216:	9f 5f       	subi	r25, 0xFF	; 255
    3218:	c9 f7       	brne	.-14     	; 0x320c <__divsf3_pse+0x78>
    321a:	88 0f       	add	r24, r24
    321c:	91 1d       	adc	r25, r1
    321e:	96 95       	lsr	r25
    3220:	87 95       	ror	r24
    3222:	97 f9       	bld	r25, 7
    3224:	08 95       	ret
    3226:	e1 e0       	ldi	r30, 0x01	; 1
    3228:	66 0f       	add	r22, r22
    322a:	77 1f       	adc	r23, r23
    322c:	88 1f       	adc	r24, r24
    322e:	bb 1f       	adc	r27, r27
    3230:	62 17       	cp	r22, r18
    3232:	73 07       	cpc	r23, r19
    3234:	84 07       	cpc	r24, r20
    3236:	ba 07       	cpc	r27, r26
    3238:	20 f0       	brcs	.+8      	; 0x3242 <__divsf3_pse+0xae>
    323a:	62 1b       	sub	r22, r18
    323c:	73 0b       	sbc	r23, r19
    323e:	84 0b       	sbc	r24, r20
    3240:	ba 0b       	sbc	r27, r26
    3242:	ee 1f       	adc	r30, r30
    3244:	88 f7       	brcc	.-30     	; 0x3228 <__divsf3_pse+0x94>
    3246:	e0 95       	com	r30
    3248:	08 95       	ret

0000324a <__fixsfsi>:
    324a:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixunssfsi>
    324e:	68 94       	set
    3250:	b1 11       	cpse	r27, r1
    3252:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_szero>
    3256:	08 95       	ret

00003258 <__fixunssfsi>:
    3258:	0e 94 c8 19 	call	0x3390	; 0x3390 <__fp_splitA>
    325c:	88 f0       	brcs	.+34     	; 0x3280 <__fixunssfsi+0x28>
    325e:	9f 57       	subi	r25, 0x7F	; 127
    3260:	98 f0       	brcs	.+38     	; 0x3288 <__fixunssfsi+0x30>
    3262:	b9 2f       	mov	r27, r25
    3264:	99 27       	eor	r25, r25
    3266:	b7 51       	subi	r27, 0x17	; 23
    3268:	b0 f0       	brcs	.+44     	; 0x3296 <__fixunssfsi+0x3e>
    326a:	e1 f0       	breq	.+56     	; 0x32a4 <__fixunssfsi+0x4c>
    326c:	66 0f       	add	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	88 1f       	adc	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	1a f0       	brmi	.+6      	; 0x327c <__fixunssfsi+0x24>
    3276:	ba 95       	dec	r27
    3278:	c9 f7       	brne	.-14     	; 0x326c <__fixunssfsi+0x14>
    327a:	14 c0       	rjmp	.+40     	; 0x32a4 <__fixunssfsi+0x4c>
    327c:	b1 30       	cpi	r27, 0x01	; 1
    327e:	91 f0       	breq	.+36     	; 0x32a4 <__fixunssfsi+0x4c>
    3280:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__fp_zero>
    3284:	b1 e0       	ldi	r27, 0x01	; 1
    3286:	08 95       	ret
    3288:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__fp_zero>
    328c:	67 2f       	mov	r22, r23
    328e:	78 2f       	mov	r23, r24
    3290:	88 27       	eor	r24, r24
    3292:	b8 5f       	subi	r27, 0xF8	; 248
    3294:	39 f0       	breq	.+14     	; 0x32a4 <__fixunssfsi+0x4c>
    3296:	b9 3f       	cpi	r27, 0xF9	; 249
    3298:	cc f3       	brlt	.-14     	; 0x328c <__fixunssfsi+0x34>
    329a:	86 95       	lsr	r24
    329c:	77 95       	ror	r23
    329e:	67 95       	ror	r22
    32a0:	b3 95       	inc	r27
    32a2:	d9 f7       	brne	.-10     	; 0x329a <__fixunssfsi+0x42>
    32a4:	3e f4       	brtc	.+14     	; 0x32b4 <__fixunssfsi+0x5c>
    32a6:	90 95       	com	r25
    32a8:	80 95       	com	r24
    32aa:	70 95       	com	r23
    32ac:	61 95       	neg	r22
    32ae:	7f 4f       	sbci	r23, 0xFF	; 255
    32b0:	8f 4f       	sbci	r24, 0xFF	; 255
    32b2:	9f 4f       	sbci	r25, 0xFF	; 255
    32b4:	08 95       	ret

000032b6 <__floatunsisf>:
    32b6:	e8 94       	clt
    32b8:	09 c0       	rjmp	.+18     	; 0x32cc <__floatsisf+0x12>

000032ba <__floatsisf>:
    32ba:	97 fb       	bst	r25, 7
    32bc:	3e f4       	brtc	.+14     	; 0x32cc <__floatsisf+0x12>
    32be:	90 95       	com	r25
    32c0:	80 95       	com	r24
    32c2:	70 95       	com	r23
    32c4:	61 95       	neg	r22
    32c6:	7f 4f       	sbci	r23, 0xFF	; 255
    32c8:	8f 4f       	sbci	r24, 0xFF	; 255
    32ca:	9f 4f       	sbci	r25, 0xFF	; 255
    32cc:	99 23       	and	r25, r25
    32ce:	a9 f0       	breq	.+42     	; 0x32fa <__floatsisf+0x40>
    32d0:	f9 2f       	mov	r31, r25
    32d2:	96 e9       	ldi	r25, 0x96	; 150
    32d4:	bb 27       	eor	r27, r27
    32d6:	93 95       	inc	r25
    32d8:	f6 95       	lsr	r31
    32da:	87 95       	ror	r24
    32dc:	77 95       	ror	r23
    32de:	67 95       	ror	r22
    32e0:	b7 95       	ror	r27
    32e2:	f1 11       	cpse	r31, r1
    32e4:	f8 cf       	rjmp	.-16     	; 0x32d6 <__floatsisf+0x1c>
    32e6:	fa f4       	brpl	.+62     	; 0x3326 <__floatsisf+0x6c>
    32e8:	bb 0f       	add	r27, r27
    32ea:	11 f4       	brne	.+4      	; 0x32f0 <__floatsisf+0x36>
    32ec:	60 ff       	sbrs	r22, 0
    32ee:	1b c0       	rjmp	.+54     	; 0x3326 <__floatsisf+0x6c>
    32f0:	6f 5f       	subi	r22, 0xFF	; 255
    32f2:	7f 4f       	sbci	r23, 0xFF	; 255
    32f4:	8f 4f       	sbci	r24, 0xFF	; 255
    32f6:	9f 4f       	sbci	r25, 0xFF	; 255
    32f8:	16 c0       	rjmp	.+44     	; 0x3326 <__floatsisf+0x6c>
    32fa:	88 23       	and	r24, r24
    32fc:	11 f0       	breq	.+4      	; 0x3302 <__floatsisf+0x48>
    32fe:	96 e9       	ldi	r25, 0x96	; 150
    3300:	11 c0       	rjmp	.+34     	; 0x3324 <__floatsisf+0x6a>
    3302:	77 23       	and	r23, r23
    3304:	21 f0       	breq	.+8      	; 0x330e <__floatsisf+0x54>
    3306:	9e e8       	ldi	r25, 0x8E	; 142
    3308:	87 2f       	mov	r24, r23
    330a:	76 2f       	mov	r23, r22
    330c:	05 c0       	rjmp	.+10     	; 0x3318 <__floatsisf+0x5e>
    330e:	66 23       	and	r22, r22
    3310:	71 f0       	breq	.+28     	; 0x332e <__floatsisf+0x74>
    3312:	96 e8       	ldi	r25, 0x86	; 134
    3314:	86 2f       	mov	r24, r22
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	2a f0       	brmi	.+10     	; 0x3326 <__floatsisf+0x6c>
    331c:	9a 95       	dec	r25
    331e:	66 0f       	add	r22, r22
    3320:	77 1f       	adc	r23, r23
    3322:	88 1f       	adc	r24, r24
    3324:	da f7       	brpl	.-10     	; 0x331c <__floatsisf+0x62>
    3326:	88 0f       	add	r24, r24
    3328:	96 95       	lsr	r25
    332a:	87 95       	ror	r24
    332c:	97 f9       	bld	r25, 7
    332e:	08 95       	ret

00003330 <__fp_inf>:
    3330:	97 f9       	bld	r25, 7
    3332:	9f 67       	ori	r25, 0x7F	; 127
    3334:	80 e8       	ldi	r24, 0x80	; 128
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	08 95       	ret

0000333c <__fp_nan>:
    333c:	9f ef       	ldi	r25, 0xFF	; 255
    333e:	80 ec       	ldi	r24, 0xC0	; 192
    3340:	08 95       	ret

00003342 <__fp_pscA>:
    3342:	00 24       	eor	r0, r0
    3344:	0a 94       	dec	r0
    3346:	16 16       	cp	r1, r22
    3348:	17 06       	cpc	r1, r23
    334a:	18 06       	cpc	r1, r24
    334c:	09 06       	cpc	r0, r25
    334e:	08 95       	ret

00003350 <__fp_pscB>:
    3350:	00 24       	eor	r0, r0
    3352:	0a 94       	dec	r0
    3354:	12 16       	cp	r1, r18
    3356:	13 06       	cpc	r1, r19
    3358:	14 06       	cpc	r1, r20
    335a:	05 06       	cpc	r0, r21
    335c:	08 95       	ret

0000335e <__fp_round>:
    335e:	09 2e       	mov	r0, r25
    3360:	03 94       	inc	r0
    3362:	00 0c       	add	r0, r0
    3364:	11 f4       	brne	.+4      	; 0x336a <__fp_round+0xc>
    3366:	88 23       	and	r24, r24
    3368:	52 f0       	brmi	.+20     	; 0x337e <__fp_round+0x20>
    336a:	bb 0f       	add	r27, r27
    336c:	40 f4       	brcc	.+16     	; 0x337e <__fp_round+0x20>
    336e:	bf 2b       	or	r27, r31
    3370:	11 f4       	brne	.+4      	; 0x3376 <__fp_round+0x18>
    3372:	60 ff       	sbrs	r22, 0
    3374:	04 c0       	rjmp	.+8      	; 0x337e <__fp_round+0x20>
    3376:	6f 5f       	subi	r22, 0xFF	; 255
    3378:	7f 4f       	sbci	r23, 0xFF	; 255
    337a:	8f 4f       	sbci	r24, 0xFF	; 255
    337c:	9f 4f       	sbci	r25, 0xFF	; 255
    337e:	08 95       	ret

00003380 <__fp_split3>:
    3380:	57 fd       	sbrc	r21, 7
    3382:	90 58       	subi	r25, 0x80	; 128
    3384:	44 0f       	add	r20, r20
    3386:	55 1f       	adc	r21, r21
    3388:	59 f0       	breq	.+22     	; 0x33a0 <__fp_splitA+0x10>
    338a:	5f 3f       	cpi	r21, 0xFF	; 255
    338c:	71 f0       	breq	.+28     	; 0x33aa <__fp_splitA+0x1a>
    338e:	47 95       	ror	r20

00003390 <__fp_splitA>:
    3390:	88 0f       	add	r24, r24
    3392:	97 fb       	bst	r25, 7
    3394:	99 1f       	adc	r25, r25
    3396:	61 f0       	breq	.+24     	; 0x33b0 <__fp_splitA+0x20>
    3398:	9f 3f       	cpi	r25, 0xFF	; 255
    339a:	79 f0       	breq	.+30     	; 0x33ba <__fp_splitA+0x2a>
    339c:	87 95       	ror	r24
    339e:	08 95       	ret
    33a0:	12 16       	cp	r1, r18
    33a2:	13 06       	cpc	r1, r19
    33a4:	14 06       	cpc	r1, r20
    33a6:	55 1f       	adc	r21, r21
    33a8:	f2 cf       	rjmp	.-28     	; 0x338e <__fp_split3+0xe>
    33aa:	46 95       	lsr	r20
    33ac:	f1 df       	rcall	.-30     	; 0x3390 <__fp_splitA>
    33ae:	08 c0       	rjmp	.+16     	; 0x33c0 <__fp_splitA+0x30>
    33b0:	16 16       	cp	r1, r22
    33b2:	17 06       	cpc	r1, r23
    33b4:	18 06       	cpc	r1, r24
    33b6:	99 1f       	adc	r25, r25
    33b8:	f1 cf       	rjmp	.-30     	; 0x339c <__fp_splitA+0xc>
    33ba:	86 95       	lsr	r24
    33bc:	71 05       	cpc	r23, r1
    33be:	61 05       	cpc	r22, r1
    33c0:	08 94       	sec
    33c2:	08 95       	ret

000033c4 <__fp_zero>:
    33c4:	e8 94       	clt

000033c6 <__fp_szero>:
    33c6:	bb 27       	eor	r27, r27
    33c8:	66 27       	eor	r22, r22
    33ca:	77 27       	eor	r23, r23
    33cc:	cb 01       	movw	r24, r22
    33ce:	97 f9       	bld	r25, 7
    33d0:	08 95       	ret

000033d2 <__mulsf3>:
    33d2:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <__mulsf3x>
    33d6:	0c 94 af 19 	jmp	0x335e	; 0x335e <__fp_round>
    33da:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fp_pscA>
    33de:	38 f0       	brcs	.+14     	; 0x33ee <__mulsf3+0x1c>
    33e0:	0e 94 a8 19 	call	0x3350	; 0x3350 <__fp_pscB>
    33e4:	20 f0       	brcs	.+8      	; 0x33ee <__mulsf3+0x1c>
    33e6:	95 23       	and	r25, r21
    33e8:	11 f0       	breq	.+4      	; 0x33ee <__mulsf3+0x1c>
    33ea:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__fp_inf>
    33ee:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__fp_nan>
    33f2:	11 24       	eor	r1, r1
    33f4:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_szero>

000033f8 <__mulsf3x>:
    33f8:	0e 94 c0 19 	call	0x3380	; 0x3380 <__fp_split3>
    33fc:	70 f3       	brcs	.-36     	; 0x33da <__mulsf3+0x8>

000033fe <__mulsf3_pse>:
    33fe:	95 9f       	mul	r25, r21
    3400:	c1 f3       	breq	.-16     	; 0x33f2 <__mulsf3+0x20>
    3402:	95 0f       	add	r25, r21
    3404:	50 e0       	ldi	r21, 0x00	; 0
    3406:	55 1f       	adc	r21, r21
    3408:	62 9f       	mul	r22, r18
    340a:	f0 01       	movw	r30, r0
    340c:	72 9f       	mul	r23, r18
    340e:	bb 27       	eor	r27, r27
    3410:	f0 0d       	add	r31, r0
    3412:	b1 1d       	adc	r27, r1
    3414:	63 9f       	mul	r22, r19
    3416:	aa 27       	eor	r26, r26
    3418:	f0 0d       	add	r31, r0
    341a:	b1 1d       	adc	r27, r1
    341c:	aa 1f       	adc	r26, r26
    341e:	64 9f       	mul	r22, r20
    3420:	66 27       	eor	r22, r22
    3422:	b0 0d       	add	r27, r0
    3424:	a1 1d       	adc	r26, r1
    3426:	66 1f       	adc	r22, r22
    3428:	82 9f       	mul	r24, r18
    342a:	22 27       	eor	r18, r18
    342c:	b0 0d       	add	r27, r0
    342e:	a1 1d       	adc	r26, r1
    3430:	62 1f       	adc	r22, r18
    3432:	73 9f       	mul	r23, r19
    3434:	b0 0d       	add	r27, r0
    3436:	a1 1d       	adc	r26, r1
    3438:	62 1f       	adc	r22, r18
    343a:	83 9f       	mul	r24, r19
    343c:	a0 0d       	add	r26, r0
    343e:	61 1d       	adc	r22, r1
    3440:	22 1f       	adc	r18, r18
    3442:	74 9f       	mul	r23, r20
    3444:	33 27       	eor	r19, r19
    3446:	a0 0d       	add	r26, r0
    3448:	61 1d       	adc	r22, r1
    344a:	23 1f       	adc	r18, r19
    344c:	84 9f       	mul	r24, r20
    344e:	60 0d       	add	r22, r0
    3450:	21 1d       	adc	r18, r1
    3452:	82 2f       	mov	r24, r18
    3454:	76 2f       	mov	r23, r22
    3456:	6a 2f       	mov	r22, r26
    3458:	11 24       	eor	r1, r1
    345a:	9f 57       	subi	r25, 0x7F	; 127
    345c:	50 40       	sbci	r21, 0x00	; 0
    345e:	9a f0       	brmi	.+38     	; 0x3486 <__mulsf3_pse+0x88>
    3460:	f1 f0       	breq	.+60     	; 0x349e <__mulsf3_pse+0xa0>
    3462:	88 23       	and	r24, r24
    3464:	4a f0       	brmi	.+18     	; 0x3478 <__mulsf3_pse+0x7a>
    3466:	ee 0f       	add	r30, r30
    3468:	ff 1f       	adc	r31, r31
    346a:	bb 1f       	adc	r27, r27
    346c:	66 1f       	adc	r22, r22
    346e:	77 1f       	adc	r23, r23
    3470:	88 1f       	adc	r24, r24
    3472:	91 50       	subi	r25, 0x01	; 1
    3474:	50 40       	sbci	r21, 0x00	; 0
    3476:	a9 f7       	brne	.-22     	; 0x3462 <__mulsf3_pse+0x64>
    3478:	9e 3f       	cpi	r25, 0xFE	; 254
    347a:	51 05       	cpc	r21, r1
    347c:	80 f0       	brcs	.+32     	; 0x349e <__mulsf3_pse+0xa0>
    347e:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__fp_inf>
    3482:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__fp_szero>
    3486:	5f 3f       	cpi	r21, 0xFF	; 255
    3488:	e4 f3       	brlt	.-8      	; 0x3482 <__mulsf3_pse+0x84>
    348a:	98 3e       	cpi	r25, 0xE8	; 232
    348c:	d4 f3       	brlt	.-12     	; 0x3482 <__mulsf3_pse+0x84>
    348e:	86 95       	lsr	r24
    3490:	77 95       	ror	r23
    3492:	67 95       	ror	r22
    3494:	b7 95       	ror	r27
    3496:	f7 95       	ror	r31
    3498:	e7 95       	ror	r30
    349a:	9f 5f       	subi	r25, 0xFF	; 255
    349c:	c1 f7       	brne	.-16     	; 0x348e <__mulsf3_pse+0x90>
    349e:	fe 2b       	or	r31, r30
    34a0:	88 0f       	add	r24, r24
    34a2:	91 1d       	adc	r25, r1
    34a4:	96 95       	lsr	r25
    34a6:	87 95       	ror	r24
    34a8:	97 f9       	bld	r25, 7
    34aa:	08 95       	ret

000034ac <vfprintf>:
    34ac:	a0 e1       	ldi	r26, 0x10	; 16
    34ae:	b0 e0       	ldi	r27, 0x00	; 0
    34b0:	ec e5       	ldi	r30, 0x5C	; 92
    34b2:	fa e1       	ldi	r31, 0x1A	; 26
    34b4:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <__prologue_saves__>
    34b8:	7c 01       	movw	r14, r24
    34ba:	1b 01       	movw	r2, r22
    34bc:	6a 01       	movw	r12, r20
    34be:	fc 01       	movw	r30, r24
    34c0:	17 82       	std	Z+7, r1	; 0x07
    34c2:	16 82       	std	Z+6, r1	; 0x06
    34c4:	83 81       	ldd	r24, Z+3	; 0x03
    34c6:	81 ff       	sbrs	r24, 1
    34c8:	44 c3       	rjmp	.+1672   	; 0x3b52 <vfprintf+0x6a6>
    34ca:	9e 01       	movw	r18, r28
    34cc:	2f 5f       	subi	r18, 0xFF	; 255
    34ce:	3f 4f       	sbci	r19, 0xFF	; 255
    34d0:	39 01       	movw	r6, r18
    34d2:	f7 01       	movw	r30, r14
    34d4:	93 81       	ldd	r25, Z+3	; 0x03
    34d6:	f1 01       	movw	r30, r2
    34d8:	93 fd       	sbrc	r25, 3
    34da:	85 91       	lpm	r24, Z+
    34dc:	93 ff       	sbrs	r25, 3
    34de:	81 91       	ld	r24, Z+
    34e0:	1f 01       	movw	r2, r30
    34e2:	88 23       	and	r24, r24
    34e4:	09 f4       	brne	.+2      	; 0x34e8 <vfprintf+0x3c>
    34e6:	31 c3       	rjmp	.+1634   	; 0x3b4a <vfprintf+0x69e>
    34e8:	85 32       	cpi	r24, 0x25	; 37
    34ea:	39 f4       	brne	.+14     	; 0x34fa <vfprintf+0x4e>
    34ec:	93 fd       	sbrc	r25, 3
    34ee:	85 91       	lpm	r24, Z+
    34f0:	93 ff       	sbrs	r25, 3
    34f2:	81 91       	ld	r24, Z+
    34f4:	1f 01       	movw	r2, r30
    34f6:	85 32       	cpi	r24, 0x25	; 37
    34f8:	39 f4       	brne	.+14     	; 0x3508 <vfprintf+0x5c>
    34fa:	b7 01       	movw	r22, r14
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3502:	56 01       	movw	r10, r12
    3504:	65 01       	movw	r12, r10
    3506:	e5 cf       	rjmp	.-54     	; 0x34d2 <vfprintf+0x26>
    3508:	10 e0       	ldi	r17, 0x00	; 0
    350a:	51 2c       	mov	r5, r1
    350c:	91 2c       	mov	r9, r1
    350e:	ff e1       	ldi	r31, 0x1F	; 31
    3510:	f9 15       	cp	r31, r9
    3512:	d8 f0       	brcs	.+54     	; 0x354a <vfprintf+0x9e>
    3514:	8b 32       	cpi	r24, 0x2B	; 43
    3516:	79 f0       	breq	.+30     	; 0x3536 <vfprintf+0x8a>
    3518:	38 f4       	brcc	.+14     	; 0x3528 <vfprintf+0x7c>
    351a:	80 32       	cpi	r24, 0x20	; 32
    351c:	79 f0       	breq	.+30     	; 0x353c <vfprintf+0x90>
    351e:	83 32       	cpi	r24, 0x23	; 35
    3520:	a1 f4       	brne	.+40     	; 0x354a <vfprintf+0x9e>
    3522:	f9 2d       	mov	r31, r9
    3524:	f0 61       	ori	r31, 0x10	; 16
    3526:	2e c0       	rjmp	.+92     	; 0x3584 <vfprintf+0xd8>
    3528:	8d 32       	cpi	r24, 0x2D	; 45
    352a:	61 f0       	breq	.+24     	; 0x3544 <vfprintf+0x98>
    352c:	80 33       	cpi	r24, 0x30	; 48
    352e:	69 f4       	brne	.+26     	; 0x354a <vfprintf+0x9e>
    3530:	29 2d       	mov	r18, r9
    3532:	21 60       	ori	r18, 0x01	; 1
    3534:	2d c0       	rjmp	.+90     	; 0x3590 <vfprintf+0xe4>
    3536:	39 2d       	mov	r19, r9
    3538:	32 60       	ori	r19, 0x02	; 2
    353a:	93 2e       	mov	r9, r19
    353c:	89 2d       	mov	r24, r9
    353e:	84 60       	ori	r24, 0x04	; 4
    3540:	98 2e       	mov	r9, r24
    3542:	2a c0       	rjmp	.+84     	; 0x3598 <vfprintf+0xec>
    3544:	e9 2d       	mov	r30, r9
    3546:	e8 60       	ori	r30, 0x08	; 8
    3548:	15 c0       	rjmp	.+42     	; 0x3574 <vfprintf+0xc8>
    354a:	97 fc       	sbrc	r9, 7
    354c:	2d c0       	rjmp	.+90     	; 0x35a8 <vfprintf+0xfc>
    354e:	20 ed       	ldi	r18, 0xD0	; 208
    3550:	28 0f       	add	r18, r24
    3552:	2a 30       	cpi	r18, 0x0A	; 10
    3554:	88 f4       	brcc	.+34     	; 0x3578 <vfprintf+0xcc>
    3556:	96 fe       	sbrs	r9, 6
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <vfprintf+0xba>
    355a:	3a e0       	ldi	r19, 0x0A	; 10
    355c:	13 9f       	mul	r17, r19
    355e:	20 0d       	add	r18, r0
    3560:	11 24       	eor	r1, r1
    3562:	12 2f       	mov	r17, r18
    3564:	19 c0       	rjmp	.+50     	; 0x3598 <vfprintf+0xec>
    3566:	8a e0       	ldi	r24, 0x0A	; 10
    3568:	58 9e       	mul	r5, r24
    356a:	20 0d       	add	r18, r0
    356c:	11 24       	eor	r1, r1
    356e:	52 2e       	mov	r5, r18
    3570:	e9 2d       	mov	r30, r9
    3572:	e0 62       	ori	r30, 0x20	; 32
    3574:	9e 2e       	mov	r9, r30
    3576:	10 c0       	rjmp	.+32     	; 0x3598 <vfprintf+0xec>
    3578:	8e 32       	cpi	r24, 0x2E	; 46
    357a:	31 f4       	brne	.+12     	; 0x3588 <vfprintf+0xdc>
    357c:	96 fc       	sbrc	r9, 6
    357e:	e5 c2       	rjmp	.+1482   	; 0x3b4a <vfprintf+0x69e>
    3580:	f9 2d       	mov	r31, r9
    3582:	f0 64       	ori	r31, 0x40	; 64
    3584:	9f 2e       	mov	r9, r31
    3586:	08 c0       	rjmp	.+16     	; 0x3598 <vfprintf+0xec>
    3588:	8c 36       	cpi	r24, 0x6C	; 108
    358a:	21 f4       	brne	.+8      	; 0x3594 <vfprintf+0xe8>
    358c:	29 2d       	mov	r18, r9
    358e:	20 68       	ori	r18, 0x80	; 128
    3590:	92 2e       	mov	r9, r18
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <vfprintf+0xec>
    3594:	88 36       	cpi	r24, 0x68	; 104
    3596:	41 f4       	brne	.+16     	; 0x35a8 <vfprintf+0xfc>
    3598:	f1 01       	movw	r30, r2
    359a:	93 fd       	sbrc	r25, 3
    359c:	85 91       	lpm	r24, Z+
    359e:	93 ff       	sbrs	r25, 3
    35a0:	81 91       	ld	r24, Z+
    35a2:	1f 01       	movw	r2, r30
    35a4:	81 11       	cpse	r24, r1
    35a6:	b3 cf       	rjmp	.-154    	; 0x350e <vfprintf+0x62>
    35a8:	9b eb       	ldi	r25, 0xBB	; 187
    35aa:	98 0f       	add	r25, r24
    35ac:	93 30       	cpi	r25, 0x03	; 3
    35ae:	20 f4       	brcc	.+8      	; 0x35b8 <vfprintf+0x10c>
    35b0:	99 2d       	mov	r25, r9
    35b2:	90 61       	ori	r25, 0x10	; 16
    35b4:	80 5e       	subi	r24, 0xE0	; 224
    35b6:	07 c0       	rjmp	.+14     	; 0x35c6 <vfprintf+0x11a>
    35b8:	9b e9       	ldi	r25, 0x9B	; 155
    35ba:	98 0f       	add	r25, r24
    35bc:	93 30       	cpi	r25, 0x03	; 3
    35be:	08 f0       	brcs	.+2      	; 0x35c2 <vfprintf+0x116>
    35c0:	66 c1       	rjmp	.+716    	; 0x388e <vfprintf+0x3e2>
    35c2:	99 2d       	mov	r25, r9
    35c4:	9f 7e       	andi	r25, 0xEF	; 239
    35c6:	96 ff       	sbrs	r25, 6
    35c8:	16 e0       	ldi	r17, 0x06	; 6
    35ca:	9f 73       	andi	r25, 0x3F	; 63
    35cc:	99 2e       	mov	r9, r25
    35ce:	85 36       	cpi	r24, 0x65	; 101
    35d0:	19 f4       	brne	.+6      	; 0x35d8 <vfprintf+0x12c>
    35d2:	90 64       	ori	r25, 0x40	; 64
    35d4:	99 2e       	mov	r9, r25
    35d6:	08 c0       	rjmp	.+16     	; 0x35e8 <vfprintf+0x13c>
    35d8:	86 36       	cpi	r24, 0x66	; 102
    35da:	21 f4       	brne	.+8      	; 0x35e4 <vfprintf+0x138>
    35dc:	39 2f       	mov	r19, r25
    35de:	30 68       	ori	r19, 0x80	; 128
    35e0:	93 2e       	mov	r9, r19
    35e2:	02 c0       	rjmp	.+4      	; 0x35e8 <vfprintf+0x13c>
    35e4:	11 11       	cpse	r17, r1
    35e6:	11 50       	subi	r17, 0x01	; 1
    35e8:	97 fe       	sbrs	r9, 7
    35ea:	07 c0       	rjmp	.+14     	; 0x35fa <vfprintf+0x14e>
    35ec:	1c 33       	cpi	r17, 0x3C	; 60
    35ee:	50 f4       	brcc	.+20     	; 0x3604 <vfprintf+0x158>
    35f0:	44 24       	eor	r4, r4
    35f2:	43 94       	inc	r4
    35f4:	41 0e       	add	r4, r17
    35f6:	27 e0       	ldi	r18, 0x07	; 7
    35f8:	0b c0       	rjmp	.+22     	; 0x3610 <vfprintf+0x164>
    35fa:	18 30       	cpi	r17, 0x08	; 8
    35fc:	38 f0       	brcs	.+14     	; 0x360c <vfprintf+0x160>
    35fe:	27 e0       	ldi	r18, 0x07	; 7
    3600:	17 e0       	ldi	r17, 0x07	; 7
    3602:	05 c0       	rjmp	.+10     	; 0x360e <vfprintf+0x162>
    3604:	27 e0       	ldi	r18, 0x07	; 7
    3606:	9c e3       	ldi	r25, 0x3C	; 60
    3608:	49 2e       	mov	r4, r25
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <vfprintf+0x164>
    360c:	21 2f       	mov	r18, r17
    360e:	41 2c       	mov	r4, r1
    3610:	56 01       	movw	r10, r12
    3612:	84 e0       	ldi	r24, 0x04	; 4
    3614:	a8 0e       	add	r10, r24
    3616:	b1 1c       	adc	r11, r1
    3618:	f6 01       	movw	r30, r12
    361a:	60 81       	ld	r22, Z
    361c:	71 81       	ldd	r23, Z+1	; 0x01
    361e:	82 81       	ldd	r24, Z+2	; 0x02
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	04 2d       	mov	r16, r4
    3624:	a3 01       	movw	r20, r6
    3626:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <__ftoa_engine>
    362a:	6c 01       	movw	r12, r24
    362c:	f9 81       	ldd	r31, Y+1	; 0x01
    362e:	fc 87       	std	Y+12, r31	; 0x0c
    3630:	f0 ff       	sbrs	r31, 0
    3632:	02 c0       	rjmp	.+4      	; 0x3638 <vfprintf+0x18c>
    3634:	f3 ff       	sbrs	r31, 3
    3636:	06 c0       	rjmp	.+12     	; 0x3644 <vfprintf+0x198>
    3638:	91 fc       	sbrc	r9, 1
    363a:	06 c0       	rjmp	.+12     	; 0x3648 <vfprintf+0x19c>
    363c:	92 fe       	sbrs	r9, 2
    363e:	06 c0       	rjmp	.+12     	; 0x364c <vfprintf+0x1a0>
    3640:	00 e2       	ldi	r16, 0x20	; 32
    3642:	05 c0       	rjmp	.+10     	; 0x364e <vfprintf+0x1a2>
    3644:	0d e2       	ldi	r16, 0x2D	; 45
    3646:	03 c0       	rjmp	.+6      	; 0x364e <vfprintf+0x1a2>
    3648:	0b e2       	ldi	r16, 0x2B	; 43
    364a:	01 c0       	rjmp	.+2      	; 0x364e <vfprintf+0x1a2>
    364c:	00 e0       	ldi	r16, 0x00	; 0
    364e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3650:	8c 70       	andi	r24, 0x0C	; 12
    3652:	19 f0       	breq	.+6      	; 0x365a <vfprintf+0x1ae>
    3654:	01 11       	cpse	r16, r1
    3656:	5a c2       	rjmp	.+1204   	; 0x3b0c <vfprintf+0x660>
    3658:	9b c2       	rjmp	.+1334   	; 0x3b90 <vfprintf+0x6e4>
    365a:	97 fe       	sbrs	r9, 7
    365c:	10 c0       	rjmp	.+32     	; 0x367e <vfprintf+0x1d2>
    365e:	4c 0c       	add	r4, r12
    3660:	fc 85       	ldd	r31, Y+12	; 0x0c
    3662:	f4 ff       	sbrs	r31, 4
    3664:	04 c0       	rjmp	.+8      	; 0x366e <vfprintf+0x1c2>
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	81 33       	cpi	r24, 0x31	; 49
    366a:	09 f4       	brne	.+2      	; 0x366e <vfprintf+0x1c2>
    366c:	4a 94       	dec	r4
    366e:	14 14       	cp	r1, r4
    3670:	74 f5       	brge	.+92     	; 0x36ce <vfprintf+0x222>
    3672:	28 e0       	ldi	r18, 0x08	; 8
    3674:	24 15       	cp	r18, r4
    3676:	78 f5       	brcc	.+94     	; 0x36d6 <vfprintf+0x22a>
    3678:	88 e0       	ldi	r24, 0x08	; 8
    367a:	48 2e       	mov	r4, r24
    367c:	2c c0       	rjmp	.+88     	; 0x36d6 <vfprintf+0x22a>
    367e:	96 fc       	sbrc	r9, 6
    3680:	2a c0       	rjmp	.+84     	; 0x36d6 <vfprintf+0x22a>
    3682:	81 2f       	mov	r24, r17
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	8c 15       	cp	r24, r12
    3688:	9d 05       	cpc	r25, r13
    368a:	9c f0       	brlt	.+38     	; 0x36b2 <vfprintf+0x206>
    368c:	3c ef       	ldi	r19, 0xFC	; 252
    368e:	c3 16       	cp	r12, r19
    3690:	3f ef       	ldi	r19, 0xFF	; 255
    3692:	d3 06       	cpc	r13, r19
    3694:	74 f0       	brlt	.+28     	; 0x36b2 <vfprintf+0x206>
    3696:	89 2d       	mov	r24, r9
    3698:	80 68       	ori	r24, 0x80	; 128
    369a:	98 2e       	mov	r9, r24
    369c:	0a c0       	rjmp	.+20     	; 0x36b2 <vfprintf+0x206>
    369e:	e2 e0       	ldi	r30, 0x02	; 2
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	ec 0f       	add	r30, r28
    36a4:	fd 1f       	adc	r31, r29
    36a6:	e1 0f       	add	r30, r17
    36a8:	f1 1d       	adc	r31, r1
    36aa:	80 81       	ld	r24, Z
    36ac:	80 33       	cpi	r24, 0x30	; 48
    36ae:	19 f4       	brne	.+6      	; 0x36b6 <vfprintf+0x20a>
    36b0:	11 50       	subi	r17, 0x01	; 1
    36b2:	11 11       	cpse	r17, r1
    36b4:	f4 cf       	rjmp	.-24     	; 0x369e <vfprintf+0x1f2>
    36b6:	97 fe       	sbrs	r9, 7
    36b8:	0e c0       	rjmp	.+28     	; 0x36d6 <vfprintf+0x22a>
    36ba:	44 24       	eor	r4, r4
    36bc:	43 94       	inc	r4
    36be:	41 0e       	add	r4, r17
    36c0:	81 2f       	mov	r24, r17
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	c8 16       	cp	r12, r24
    36c6:	d9 06       	cpc	r13, r25
    36c8:	2c f4       	brge	.+10     	; 0x36d4 <vfprintf+0x228>
    36ca:	1c 19       	sub	r17, r12
    36cc:	04 c0       	rjmp	.+8      	; 0x36d6 <vfprintf+0x22a>
    36ce:	44 24       	eor	r4, r4
    36d0:	43 94       	inc	r4
    36d2:	01 c0       	rjmp	.+2      	; 0x36d6 <vfprintf+0x22a>
    36d4:	10 e0       	ldi	r17, 0x00	; 0
    36d6:	97 fe       	sbrs	r9, 7
    36d8:	06 c0       	rjmp	.+12     	; 0x36e6 <vfprintf+0x23a>
    36da:	1c 14       	cp	r1, r12
    36dc:	1d 04       	cpc	r1, r13
    36de:	34 f4       	brge	.+12     	; 0x36ec <vfprintf+0x240>
    36e0:	c6 01       	movw	r24, r12
    36e2:	01 96       	adiw	r24, 0x01	; 1
    36e4:	05 c0       	rjmp	.+10     	; 0x36f0 <vfprintf+0x244>
    36e6:	85 e0       	ldi	r24, 0x05	; 5
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <vfprintf+0x244>
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	01 11       	cpse	r16, r1
    36f2:	01 96       	adiw	r24, 0x01	; 1
    36f4:	11 23       	and	r17, r17
    36f6:	31 f0       	breq	.+12     	; 0x3704 <vfprintf+0x258>
    36f8:	21 2f       	mov	r18, r17
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	2f 5f       	subi	r18, 0xFF	; 255
    36fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3700:	82 0f       	add	r24, r18
    3702:	93 1f       	adc	r25, r19
    3704:	25 2d       	mov	r18, r5
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	82 17       	cp	r24, r18
    370a:	93 07       	cpc	r25, r19
    370c:	14 f4       	brge	.+4      	; 0x3712 <vfprintf+0x266>
    370e:	58 1a       	sub	r5, r24
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <vfprintf+0x268>
    3712:	51 2c       	mov	r5, r1
    3714:	89 2d       	mov	r24, r9
    3716:	89 70       	andi	r24, 0x09	; 9
    3718:	49 f4       	brne	.+18     	; 0x372c <vfprintf+0x280>
    371a:	55 20       	and	r5, r5
    371c:	39 f0       	breq	.+14     	; 0x372c <vfprintf+0x280>
    371e:	b7 01       	movw	r22, r14
    3720:	80 e2       	ldi	r24, 0x20	; 32
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3728:	5a 94       	dec	r5
    372a:	f7 cf       	rjmp	.-18     	; 0x371a <vfprintf+0x26e>
    372c:	00 23       	and	r16, r16
    372e:	29 f0       	breq	.+10     	; 0x373a <vfprintf+0x28e>
    3730:	b7 01       	movw	r22, r14
    3732:	80 2f       	mov	r24, r16
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    373a:	93 fc       	sbrc	r9, 3
    373c:	09 c0       	rjmp	.+18     	; 0x3750 <vfprintf+0x2a4>
    373e:	55 20       	and	r5, r5
    3740:	39 f0       	breq	.+14     	; 0x3750 <vfprintf+0x2a4>
    3742:	b7 01       	movw	r22, r14
    3744:	80 e3       	ldi	r24, 0x30	; 48
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    374c:	5a 94       	dec	r5
    374e:	f7 cf       	rjmp	.-18     	; 0x373e <vfprintf+0x292>
    3750:	97 fe       	sbrs	r9, 7
    3752:	4c c0       	rjmp	.+152    	; 0x37ec <vfprintf+0x340>
    3754:	46 01       	movw	r8, r12
    3756:	d7 fe       	sbrs	r13, 7
    3758:	02 c0       	rjmp	.+4      	; 0x375e <vfprintf+0x2b2>
    375a:	81 2c       	mov	r8, r1
    375c:	91 2c       	mov	r9, r1
    375e:	c6 01       	movw	r24, r12
    3760:	88 19       	sub	r24, r8
    3762:	99 09       	sbc	r25, r9
    3764:	f3 01       	movw	r30, r6
    3766:	e8 0f       	add	r30, r24
    3768:	f9 1f       	adc	r31, r25
    376a:	fe 87       	std	Y+14, r31	; 0x0e
    376c:	ed 87       	std	Y+13, r30	; 0x0d
    376e:	96 01       	movw	r18, r12
    3770:	24 19       	sub	r18, r4
    3772:	31 09       	sbc	r19, r1
    3774:	38 8b       	std	Y+16, r19	; 0x10
    3776:	2f 87       	std	Y+15, r18	; 0x0f
    3778:	01 2f       	mov	r16, r17
    377a:	10 e0       	ldi	r17, 0x00	; 0
    377c:	11 95       	neg	r17
    377e:	01 95       	neg	r16
    3780:	11 09       	sbc	r17, r1
    3782:	3f ef       	ldi	r19, 0xFF	; 255
    3784:	83 16       	cp	r8, r19
    3786:	93 06       	cpc	r9, r19
    3788:	29 f4       	brne	.+10     	; 0x3794 <vfprintf+0x2e8>
    378a:	b7 01       	movw	r22, r14
    378c:	8e e2       	ldi	r24, 0x2E	; 46
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3794:	c8 14       	cp	r12, r8
    3796:	d9 04       	cpc	r13, r9
    3798:	4c f0       	brlt	.+18     	; 0x37ac <vfprintf+0x300>
    379a:	8f 85       	ldd	r24, Y+15	; 0x0f
    379c:	98 89       	ldd	r25, Y+16	; 0x10
    379e:	88 15       	cp	r24, r8
    37a0:	99 05       	cpc	r25, r9
    37a2:	24 f4       	brge	.+8      	; 0x37ac <vfprintf+0x300>
    37a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    37a6:	fe 85       	ldd	r31, Y+14	; 0x0e
    37a8:	81 81       	ldd	r24, Z+1	; 0x01
    37aa:	01 c0       	rjmp	.+2      	; 0x37ae <vfprintf+0x302>
    37ac:	80 e3       	ldi	r24, 0x30	; 48
    37ae:	f1 e0       	ldi	r31, 0x01	; 1
    37b0:	8f 1a       	sub	r8, r31
    37b2:	91 08       	sbc	r9, r1
    37b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    37b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    37b8:	2f 5f       	subi	r18, 0xFF	; 255
    37ba:	3f 4f       	sbci	r19, 0xFF	; 255
    37bc:	3e 87       	std	Y+14, r19	; 0x0e
    37be:	2d 87       	std	Y+13, r18	; 0x0d
    37c0:	80 16       	cp	r8, r16
    37c2:	91 06       	cpc	r9, r17
    37c4:	2c f0       	brlt	.+10     	; 0x37d0 <vfprintf+0x324>
    37c6:	b7 01       	movw	r22, r14
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    37ce:	d9 cf       	rjmp	.-78     	; 0x3782 <vfprintf+0x2d6>
    37d0:	c8 14       	cp	r12, r8
    37d2:	d9 04       	cpc	r13, r9
    37d4:	41 f4       	brne	.+16     	; 0x37e6 <vfprintf+0x33a>
    37d6:	9a 81       	ldd	r25, Y+2	; 0x02
    37d8:	96 33       	cpi	r25, 0x36	; 54
    37da:	20 f4       	brcc	.+8      	; 0x37e4 <vfprintf+0x338>
    37dc:	95 33       	cpi	r25, 0x35	; 53
    37de:	19 f4       	brne	.+6      	; 0x37e6 <vfprintf+0x33a>
    37e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    37e2:	34 ff       	sbrs	r19, 4
    37e4:	81 e3       	ldi	r24, 0x31	; 49
    37e6:	b7 01       	movw	r22, r14
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	4e c0       	rjmp	.+156    	; 0x3888 <vfprintf+0x3dc>
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	81 33       	cpi	r24, 0x31	; 49
    37f0:	19 f0       	breq	.+6      	; 0x37f8 <vfprintf+0x34c>
    37f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    37f4:	9f 7e       	andi	r25, 0xEF	; 239
    37f6:	9c 87       	std	Y+12, r25	; 0x0c
    37f8:	b7 01       	movw	r22, r14
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3800:	11 11       	cpse	r17, r1
    3802:	05 c0       	rjmp	.+10     	; 0x380e <vfprintf+0x362>
    3804:	94 fc       	sbrc	r9, 4
    3806:	18 c0       	rjmp	.+48     	; 0x3838 <vfprintf+0x38c>
    3808:	85 e6       	ldi	r24, 0x65	; 101
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	17 c0       	rjmp	.+46     	; 0x383c <vfprintf+0x390>
    380e:	b7 01       	movw	r22, r14
    3810:	8e e2       	ldi	r24, 0x2E	; 46
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3818:	1e 5f       	subi	r17, 0xFE	; 254
    381a:	82 e0       	ldi	r24, 0x02	; 2
    381c:	01 e0       	ldi	r16, 0x01	; 1
    381e:	08 0f       	add	r16, r24
    3820:	f3 01       	movw	r30, r6
    3822:	e8 0f       	add	r30, r24
    3824:	f1 1d       	adc	r31, r1
    3826:	80 81       	ld	r24, Z
    3828:	b7 01       	movw	r22, r14
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3830:	80 2f       	mov	r24, r16
    3832:	01 13       	cpse	r16, r17
    3834:	f3 cf       	rjmp	.-26     	; 0x381c <vfprintf+0x370>
    3836:	e6 cf       	rjmp	.-52     	; 0x3804 <vfprintf+0x358>
    3838:	85 e4       	ldi	r24, 0x45	; 69
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	b7 01       	movw	r22, r14
    383e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3842:	d7 fc       	sbrc	r13, 7
    3844:	06 c0       	rjmp	.+12     	; 0x3852 <vfprintf+0x3a6>
    3846:	c1 14       	cp	r12, r1
    3848:	d1 04       	cpc	r13, r1
    384a:	41 f4       	brne	.+16     	; 0x385c <vfprintf+0x3b0>
    384c:	ec 85       	ldd	r30, Y+12	; 0x0c
    384e:	e4 ff       	sbrs	r30, 4
    3850:	05 c0       	rjmp	.+10     	; 0x385c <vfprintf+0x3b0>
    3852:	d1 94       	neg	r13
    3854:	c1 94       	neg	r12
    3856:	d1 08       	sbc	r13, r1
    3858:	8d e2       	ldi	r24, 0x2D	; 45
    385a:	01 c0       	rjmp	.+2      	; 0x385e <vfprintf+0x3b2>
    385c:	8b e2       	ldi	r24, 0x2B	; 43
    385e:	b7 01       	movw	r22, r14
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3866:	80 e3       	ldi	r24, 0x30	; 48
    3868:	2a e0       	ldi	r18, 0x0A	; 10
    386a:	c2 16       	cp	r12, r18
    386c:	d1 04       	cpc	r13, r1
    386e:	2c f0       	brlt	.+10     	; 0x387a <vfprintf+0x3ce>
    3870:	8f 5f       	subi	r24, 0xFF	; 255
    3872:	fa e0       	ldi	r31, 0x0A	; 10
    3874:	cf 1a       	sub	r12, r31
    3876:	d1 08       	sbc	r13, r1
    3878:	f7 cf       	rjmp	.-18     	; 0x3868 <vfprintf+0x3bc>
    387a:	b7 01       	movw	r22, r14
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3882:	b7 01       	movw	r22, r14
    3884:	c6 01       	movw	r24, r12
    3886:	c0 96       	adiw	r24, 0x30	; 48
    3888:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    388c:	54 c1       	rjmp	.+680    	; 0x3b36 <vfprintf+0x68a>
    388e:	83 36       	cpi	r24, 0x63	; 99
    3890:	31 f0       	breq	.+12     	; 0x389e <vfprintf+0x3f2>
    3892:	83 37       	cpi	r24, 0x73	; 115
    3894:	79 f0       	breq	.+30     	; 0x38b4 <vfprintf+0x408>
    3896:	83 35       	cpi	r24, 0x53	; 83
    3898:	09 f0       	breq	.+2      	; 0x389c <vfprintf+0x3f0>
    389a:	56 c0       	rjmp	.+172    	; 0x3948 <vfprintf+0x49c>
    389c:	20 c0       	rjmp	.+64     	; 0x38de <vfprintf+0x432>
    389e:	56 01       	movw	r10, r12
    38a0:	32 e0       	ldi	r19, 0x02	; 2
    38a2:	a3 0e       	add	r10, r19
    38a4:	b1 1c       	adc	r11, r1
    38a6:	f6 01       	movw	r30, r12
    38a8:	80 81       	ld	r24, Z
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	01 e0       	ldi	r16, 0x01	; 1
    38ae:	10 e0       	ldi	r17, 0x00	; 0
    38b0:	63 01       	movw	r12, r6
    38b2:	12 c0       	rjmp	.+36     	; 0x38d8 <vfprintf+0x42c>
    38b4:	56 01       	movw	r10, r12
    38b6:	f2 e0       	ldi	r31, 0x02	; 2
    38b8:	af 0e       	add	r10, r31
    38ba:	b1 1c       	adc	r11, r1
    38bc:	f6 01       	movw	r30, r12
    38be:	c0 80       	ld	r12, Z
    38c0:	d1 80       	ldd	r13, Z+1	; 0x01
    38c2:	96 fe       	sbrs	r9, 6
    38c4:	03 c0       	rjmp	.+6      	; 0x38cc <vfprintf+0x420>
    38c6:	61 2f       	mov	r22, r17
    38c8:	70 e0       	ldi	r23, 0x00	; 0
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <vfprintf+0x424>
    38cc:	6f ef       	ldi	r22, 0xFF	; 255
    38ce:	7f ef       	ldi	r23, 0xFF	; 255
    38d0:	c6 01       	movw	r24, r12
    38d2:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <strnlen>
    38d6:	8c 01       	movw	r16, r24
    38d8:	f9 2d       	mov	r31, r9
    38da:	ff 77       	andi	r31, 0x7F	; 127
    38dc:	14 c0       	rjmp	.+40     	; 0x3906 <vfprintf+0x45a>
    38de:	56 01       	movw	r10, r12
    38e0:	22 e0       	ldi	r18, 0x02	; 2
    38e2:	a2 0e       	add	r10, r18
    38e4:	b1 1c       	adc	r11, r1
    38e6:	f6 01       	movw	r30, r12
    38e8:	c0 80       	ld	r12, Z
    38ea:	d1 80       	ldd	r13, Z+1	; 0x01
    38ec:	96 fe       	sbrs	r9, 6
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <vfprintf+0x44a>
    38f0:	61 2f       	mov	r22, r17
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <vfprintf+0x44e>
    38f6:	6f ef       	ldi	r22, 0xFF	; 255
    38f8:	7f ef       	ldi	r23, 0xFF	; 255
    38fa:	c6 01       	movw	r24, r12
    38fc:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strnlen_P>
    3900:	8c 01       	movw	r16, r24
    3902:	f9 2d       	mov	r31, r9
    3904:	f0 68       	ori	r31, 0x80	; 128
    3906:	9f 2e       	mov	r9, r31
    3908:	f3 fd       	sbrc	r31, 3
    390a:	1a c0       	rjmp	.+52     	; 0x3940 <vfprintf+0x494>
    390c:	85 2d       	mov	r24, r5
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	08 17       	cp	r16, r24
    3912:	19 07       	cpc	r17, r25
    3914:	a8 f4       	brcc	.+42     	; 0x3940 <vfprintf+0x494>
    3916:	b7 01       	movw	r22, r14
    3918:	80 e2       	ldi	r24, 0x20	; 32
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3920:	5a 94       	dec	r5
    3922:	f4 cf       	rjmp	.-24     	; 0x390c <vfprintf+0x460>
    3924:	f6 01       	movw	r30, r12
    3926:	97 fc       	sbrc	r9, 7
    3928:	85 91       	lpm	r24, Z+
    392a:	97 fe       	sbrs	r9, 7
    392c:	81 91       	ld	r24, Z+
    392e:	6f 01       	movw	r12, r30
    3930:	b7 01       	movw	r22, r14
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3938:	51 10       	cpse	r5, r1
    393a:	5a 94       	dec	r5
    393c:	01 50       	subi	r16, 0x01	; 1
    393e:	11 09       	sbc	r17, r1
    3940:	01 15       	cp	r16, r1
    3942:	11 05       	cpc	r17, r1
    3944:	79 f7       	brne	.-34     	; 0x3924 <vfprintf+0x478>
    3946:	f7 c0       	rjmp	.+494    	; 0x3b36 <vfprintf+0x68a>
    3948:	84 36       	cpi	r24, 0x64	; 100
    394a:	11 f0       	breq	.+4      	; 0x3950 <vfprintf+0x4a4>
    394c:	89 36       	cpi	r24, 0x69	; 105
    394e:	61 f5       	brne	.+88     	; 0x39a8 <vfprintf+0x4fc>
    3950:	56 01       	movw	r10, r12
    3952:	97 fe       	sbrs	r9, 7
    3954:	09 c0       	rjmp	.+18     	; 0x3968 <vfprintf+0x4bc>
    3956:	24 e0       	ldi	r18, 0x04	; 4
    3958:	a2 0e       	add	r10, r18
    395a:	b1 1c       	adc	r11, r1
    395c:	f6 01       	movw	r30, r12
    395e:	60 81       	ld	r22, Z
    3960:	71 81       	ldd	r23, Z+1	; 0x01
    3962:	82 81       	ldd	r24, Z+2	; 0x02
    3964:	93 81       	ldd	r25, Z+3	; 0x03
    3966:	0a c0       	rjmp	.+20     	; 0x397c <vfprintf+0x4d0>
    3968:	f2 e0       	ldi	r31, 0x02	; 2
    396a:	af 0e       	add	r10, r31
    396c:	b1 1c       	adc	r11, r1
    396e:	f6 01       	movw	r30, r12
    3970:	60 81       	ld	r22, Z
    3972:	71 81       	ldd	r23, Z+1	; 0x01
    3974:	07 2e       	mov	r0, r23
    3976:	00 0c       	add	r0, r0
    3978:	88 0b       	sbc	r24, r24
    397a:	99 0b       	sbc	r25, r25
    397c:	f9 2d       	mov	r31, r9
    397e:	ff 76       	andi	r31, 0x6F	; 111
    3980:	9f 2e       	mov	r9, r31
    3982:	97 ff       	sbrs	r25, 7
    3984:	09 c0       	rjmp	.+18     	; 0x3998 <vfprintf+0x4ec>
    3986:	90 95       	com	r25
    3988:	80 95       	com	r24
    398a:	70 95       	com	r23
    398c:	61 95       	neg	r22
    398e:	7f 4f       	sbci	r23, 0xFF	; 255
    3990:	8f 4f       	sbci	r24, 0xFF	; 255
    3992:	9f 4f       	sbci	r25, 0xFF	; 255
    3994:	f0 68       	ori	r31, 0x80	; 128
    3996:	9f 2e       	mov	r9, r31
    3998:	2a e0       	ldi	r18, 0x0A	; 10
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	a3 01       	movw	r20, r6
    399e:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__ultoa_invert>
    39a2:	c8 2e       	mov	r12, r24
    39a4:	c6 18       	sub	r12, r6
    39a6:	3f c0       	rjmp	.+126    	; 0x3a26 <vfprintf+0x57a>
    39a8:	09 2d       	mov	r16, r9
    39aa:	85 37       	cpi	r24, 0x75	; 117
    39ac:	21 f4       	brne	.+8      	; 0x39b6 <vfprintf+0x50a>
    39ae:	0f 7e       	andi	r16, 0xEF	; 239
    39b0:	2a e0       	ldi	r18, 0x0A	; 10
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	1d c0       	rjmp	.+58     	; 0x39f0 <vfprintf+0x544>
    39b6:	09 7f       	andi	r16, 0xF9	; 249
    39b8:	8f 36       	cpi	r24, 0x6F	; 111
    39ba:	91 f0       	breq	.+36     	; 0x39e0 <vfprintf+0x534>
    39bc:	18 f4       	brcc	.+6      	; 0x39c4 <vfprintf+0x518>
    39be:	88 35       	cpi	r24, 0x58	; 88
    39c0:	59 f0       	breq	.+22     	; 0x39d8 <vfprintf+0x52c>
    39c2:	c3 c0       	rjmp	.+390    	; 0x3b4a <vfprintf+0x69e>
    39c4:	80 37       	cpi	r24, 0x70	; 112
    39c6:	19 f0       	breq	.+6      	; 0x39ce <vfprintf+0x522>
    39c8:	88 37       	cpi	r24, 0x78	; 120
    39ca:	11 f0       	breq	.+4      	; 0x39d0 <vfprintf+0x524>
    39cc:	be c0       	rjmp	.+380    	; 0x3b4a <vfprintf+0x69e>
    39ce:	00 61       	ori	r16, 0x10	; 16
    39d0:	04 ff       	sbrs	r16, 4
    39d2:	09 c0       	rjmp	.+18     	; 0x39e6 <vfprintf+0x53a>
    39d4:	04 60       	ori	r16, 0x04	; 4
    39d6:	07 c0       	rjmp	.+14     	; 0x39e6 <vfprintf+0x53a>
    39d8:	94 fe       	sbrs	r9, 4
    39da:	08 c0       	rjmp	.+16     	; 0x39ec <vfprintf+0x540>
    39dc:	06 60       	ori	r16, 0x06	; 6
    39de:	06 c0       	rjmp	.+12     	; 0x39ec <vfprintf+0x540>
    39e0:	28 e0       	ldi	r18, 0x08	; 8
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	05 c0       	rjmp	.+10     	; 0x39f0 <vfprintf+0x544>
    39e6:	20 e1       	ldi	r18, 0x10	; 16
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	02 c0       	rjmp	.+4      	; 0x39f0 <vfprintf+0x544>
    39ec:	20 e1       	ldi	r18, 0x10	; 16
    39ee:	32 e0       	ldi	r19, 0x02	; 2
    39f0:	56 01       	movw	r10, r12
    39f2:	07 ff       	sbrs	r16, 7
    39f4:	09 c0       	rjmp	.+18     	; 0x3a08 <vfprintf+0x55c>
    39f6:	84 e0       	ldi	r24, 0x04	; 4
    39f8:	a8 0e       	add	r10, r24
    39fa:	b1 1c       	adc	r11, r1
    39fc:	f6 01       	movw	r30, r12
    39fe:	60 81       	ld	r22, Z
    3a00:	71 81       	ldd	r23, Z+1	; 0x01
    3a02:	82 81       	ldd	r24, Z+2	; 0x02
    3a04:	93 81       	ldd	r25, Z+3	; 0x03
    3a06:	08 c0       	rjmp	.+16     	; 0x3a18 <vfprintf+0x56c>
    3a08:	f2 e0       	ldi	r31, 0x02	; 2
    3a0a:	af 0e       	add	r10, r31
    3a0c:	b1 1c       	adc	r11, r1
    3a0e:	f6 01       	movw	r30, r12
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	a3 01       	movw	r20, r6
    3a1a:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__ultoa_invert>
    3a1e:	c8 2e       	mov	r12, r24
    3a20:	c6 18       	sub	r12, r6
    3a22:	0f 77       	andi	r16, 0x7F	; 127
    3a24:	90 2e       	mov	r9, r16
    3a26:	96 fe       	sbrs	r9, 6
    3a28:	0b c0       	rjmp	.+22     	; 0x3a40 <vfprintf+0x594>
    3a2a:	09 2d       	mov	r16, r9
    3a2c:	0e 7f       	andi	r16, 0xFE	; 254
    3a2e:	c1 16       	cp	r12, r17
    3a30:	50 f4       	brcc	.+20     	; 0x3a46 <vfprintf+0x59a>
    3a32:	94 fe       	sbrs	r9, 4
    3a34:	0a c0       	rjmp	.+20     	; 0x3a4a <vfprintf+0x59e>
    3a36:	92 fc       	sbrc	r9, 2
    3a38:	08 c0       	rjmp	.+16     	; 0x3a4a <vfprintf+0x59e>
    3a3a:	09 2d       	mov	r16, r9
    3a3c:	0e 7e       	andi	r16, 0xEE	; 238
    3a3e:	05 c0       	rjmp	.+10     	; 0x3a4a <vfprintf+0x59e>
    3a40:	dc 2c       	mov	r13, r12
    3a42:	09 2d       	mov	r16, r9
    3a44:	03 c0       	rjmp	.+6      	; 0x3a4c <vfprintf+0x5a0>
    3a46:	dc 2c       	mov	r13, r12
    3a48:	01 c0       	rjmp	.+2      	; 0x3a4c <vfprintf+0x5a0>
    3a4a:	d1 2e       	mov	r13, r17
    3a4c:	04 ff       	sbrs	r16, 4
    3a4e:	0d c0       	rjmp	.+26     	; 0x3a6a <vfprintf+0x5be>
    3a50:	fe 01       	movw	r30, r28
    3a52:	ec 0d       	add	r30, r12
    3a54:	f1 1d       	adc	r31, r1
    3a56:	80 81       	ld	r24, Z
    3a58:	80 33       	cpi	r24, 0x30	; 48
    3a5a:	11 f4       	brne	.+4      	; 0x3a60 <vfprintf+0x5b4>
    3a5c:	09 7e       	andi	r16, 0xE9	; 233
    3a5e:	09 c0       	rjmp	.+18     	; 0x3a72 <vfprintf+0x5c6>
    3a60:	02 ff       	sbrs	r16, 2
    3a62:	06 c0       	rjmp	.+12     	; 0x3a70 <vfprintf+0x5c4>
    3a64:	d3 94       	inc	r13
    3a66:	d3 94       	inc	r13
    3a68:	04 c0       	rjmp	.+8      	; 0x3a72 <vfprintf+0x5c6>
    3a6a:	80 2f       	mov	r24, r16
    3a6c:	86 78       	andi	r24, 0x86	; 134
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <vfprintf+0x5c6>
    3a70:	d3 94       	inc	r13
    3a72:	03 fd       	sbrc	r16, 3
    3a74:	11 c0       	rjmp	.+34     	; 0x3a98 <vfprintf+0x5ec>
    3a76:	00 ff       	sbrs	r16, 0
    3a78:	06 c0       	rjmp	.+12     	; 0x3a86 <vfprintf+0x5da>
    3a7a:	1c 2d       	mov	r17, r12
    3a7c:	d5 14       	cp	r13, r5
    3a7e:	80 f4       	brcc	.+32     	; 0x3aa0 <vfprintf+0x5f4>
    3a80:	15 0d       	add	r17, r5
    3a82:	1d 19       	sub	r17, r13
    3a84:	0d c0       	rjmp	.+26     	; 0x3aa0 <vfprintf+0x5f4>
    3a86:	d5 14       	cp	r13, r5
    3a88:	58 f4       	brcc	.+22     	; 0x3aa0 <vfprintf+0x5f4>
    3a8a:	b7 01       	movw	r22, r14
    3a8c:	80 e2       	ldi	r24, 0x20	; 32
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3a94:	d3 94       	inc	r13
    3a96:	f7 cf       	rjmp	.-18     	; 0x3a86 <vfprintf+0x5da>
    3a98:	d5 14       	cp	r13, r5
    3a9a:	10 f4       	brcc	.+4      	; 0x3aa0 <vfprintf+0x5f4>
    3a9c:	5d 18       	sub	r5, r13
    3a9e:	01 c0       	rjmp	.+2      	; 0x3aa2 <vfprintf+0x5f6>
    3aa0:	51 2c       	mov	r5, r1
    3aa2:	04 ff       	sbrs	r16, 4
    3aa4:	10 c0       	rjmp	.+32     	; 0x3ac6 <vfprintf+0x61a>
    3aa6:	b7 01       	movw	r22, r14
    3aa8:	80 e3       	ldi	r24, 0x30	; 48
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3ab0:	02 ff       	sbrs	r16, 2
    3ab2:	17 c0       	rjmp	.+46     	; 0x3ae2 <vfprintf+0x636>
    3ab4:	01 fd       	sbrc	r16, 1
    3ab6:	03 c0       	rjmp	.+6      	; 0x3abe <vfprintf+0x612>
    3ab8:	88 e7       	ldi	r24, 0x78	; 120
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	02 c0       	rjmp	.+4      	; 0x3ac2 <vfprintf+0x616>
    3abe:	88 e5       	ldi	r24, 0x58	; 88
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	b7 01       	movw	r22, r14
    3ac4:	0c c0       	rjmp	.+24     	; 0x3ade <vfprintf+0x632>
    3ac6:	80 2f       	mov	r24, r16
    3ac8:	86 78       	andi	r24, 0x86	; 134
    3aca:	59 f0       	breq	.+22     	; 0x3ae2 <vfprintf+0x636>
    3acc:	01 ff       	sbrs	r16, 1
    3ace:	02 c0       	rjmp	.+4      	; 0x3ad4 <vfprintf+0x628>
    3ad0:	8b e2       	ldi	r24, 0x2B	; 43
    3ad2:	01 c0       	rjmp	.+2      	; 0x3ad6 <vfprintf+0x62a>
    3ad4:	80 e2       	ldi	r24, 0x20	; 32
    3ad6:	07 fd       	sbrc	r16, 7
    3ad8:	8d e2       	ldi	r24, 0x2D	; 45
    3ada:	b7 01       	movw	r22, r14
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3ae2:	c1 16       	cp	r12, r17
    3ae4:	38 f4       	brcc	.+14     	; 0x3af4 <vfprintf+0x648>
    3ae6:	b7 01       	movw	r22, r14
    3ae8:	80 e3       	ldi	r24, 0x30	; 48
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3af0:	11 50       	subi	r17, 0x01	; 1
    3af2:	f7 cf       	rjmp	.-18     	; 0x3ae2 <vfprintf+0x636>
    3af4:	ca 94       	dec	r12
    3af6:	f3 01       	movw	r30, r6
    3af8:	ec 0d       	add	r30, r12
    3afa:	f1 1d       	adc	r31, r1
    3afc:	80 81       	ld	r24, Z
    3afe:	b7 01       	movw	r22, r14
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3b06:	c1 10       	cpse	r12, r1
    3b08:	f5 cf       	rjmp	.-22     	; 0x3af4 <vfprintf+0x648>
    3b0a:	15 c0       	rjmp	.+42     	; 0x3b36 <vfprintf+0x68a>
    3b0c:	f4 e0       	ldi	r31, 0x04	; 4
    3b0e:	f5 15       	cp	r31, r5
    3b10:	60 f5       	brcc	.+88     	; 0x3b6a <vfprintf+0x6be>
    3b12:	84 e0       	ldi	r24, 0x04	; 4
    3b14:	58 1a       	sub	r5, r24
    3b16:	93 fe       	sbrs	r9, 3
    3b18:	1f c0       	rjmp	.+62     	; 0x3b58 <vfprintf+0x6ac>
    3b1a:	01 11       	cpse	r16, r1
    3b1c:	27 c0       	rjmp	.+78     	; 0x3b6c <vfprintf+0x6c0>
    3b1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b20:	23 ff       	sbrs	r18, 3
    3b22:	2a c0       	rjmp	.+84     	; 0x3b78 <vfprintf+0x6cc>
    3b24:	0e e8       	ldi	r16, 0x8E	; 142
    3b26:	10 e0       	ldi	r17, 0x00	; 0
    3b28:	39 2d       	mov	r19, r9
    3b2a:	30 71       	andi	r19, 0x10	; 16
    3b2c:	93 2e       	mov	r9, r19
    3b2e:	f8 01       	movw	r30, r16
    3b30:	84 91       	lpm	r24, Z
    3b32:	81 11       	cpse	r24, r1
    3b34:	24 c0       	rjmp	.+72     	; 0x3b7e <vfprintf+0x6d2>
    3b36:	55 20       	and	r5, r5
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <vfprintf+0x690>
    3b3a:	e4 cc       	rjmp	.-1592   	; 0x3504 <vfprintf+0x58>
    3b3c:	b7 01       	movw	r22, r14
    3b3e:	80 e2       	ldi	r24, 0x20	; 32
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3b46:	5a 94       	dec	r5
    3b48:	f6 cf       	rjmp	.-20     	; 0x3b36 <vfprintf+0x68a>
    3b4a:	f7 01       	movw	r30, r14
    3b4c:	86 81       	ldd	r24, Z+6	; 0x06
    3b4e:	97 81       	ldd	r25, Z+7	; 0x07
    3b50:	26 c0       	rjmp	.+76     	; 0x3b9e <vfprintf+0x6f2>
    3b52:	8f ef       	ldi	r24, 0xFF	; 255
    3b54:	9f ef       	ldi	r25, 0xFF	; 255
    3b56:	23 c0       	rjmp	.+70     	; 0x3b9e <vfprintf+0x6f2>
    3b58:	b7 01       	movw	r22, r14
    3b5a:	80 e2       	ldi	r24, 0x20	; 32
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3b62:	5a 94       	dec	r5
    3b64:	51 10       	cpse	r5, r1
    3b66:	f8 cf       	rjmp	.-16     	; 0x3b58 <vfprintf+0x6ac>
    3b68:	d8 cf       	rjmp	.-80     	; 0x3b1a <vfprintf+0x66e>
    3b6a:	51 2c       	mov	r5, r1
    3b6c:	b7 01       	movw	r22, r14
    3b6e:	80 2f       	mov	r24, r16
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3b76:	d3 cf       	rjmp	.-90     	; 0x3b1e <vfprintf+0x672>
    3b78:	02 e9       	ldi	r16, 0x92	; 146
    3b7a:	10 e0       	ldi	r17, 0x00	; 0
    3b7c:	d5 cf       	rjmp	.-86     	; 0x3b28 <vfprintf+0x67c>
    3b7e:	91 10       	cpse	r9, r1
    3b80:	80 52       	subi	r24, 0x20	; 32
    3b82:	b7 01       	movw	r22, r14
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <fputc>
    3b8a:	0f 5f       	subi	r16, 0xFF	; 255
    3b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8e:	cf cf       	rjmp	.-98     	; 0x3b2e <vfprintf+0x682>
    3b90:	23 e0       	ldi	r18, 0x03	; 3
    3b92:	25 15       	cp	r18, r5
    3b94:	10 f4       	brcc	.+4      	; 0x3b9a <vfprintf+0x6ee>
    3b96:	83 e0       	ldi	r24, 0x03	; 3
    3b98:	bd cf       	rjmp	.-134    	; 0x3b14 <vfprintf+0x668>
    3b9a:	51 2c       	mov	r5, r1
    3b9c:	c0 cf       	rjmp	.-128    	; 0x3b1e <vfprintf+0x672>
    3b9e:	60 96       	adiw	r28, 0x10	; 16
    3ba0:	e2 e1       	ldi	r30, 0x12	; 18
    3ba2:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__epilogue_restores__>

00003ba6 <__tablejump2__>:
    3ba6:	ee 0f       	add	r30, r30
    3ba8:	ff 1f       	adc	r31, r31
    3baa:	05 90       	lpm	r0, Z+
    3bac:	f4 91       	lpm	r31, Z
    3bae:	e0 2d       	mov	r30, r0
    3bb0:	09 94       	ijmp

00003bb2 <__umulhisi3>:
    3bb2:	a2 9f       	mul	r26, r18
    3bb4:	b0 01       	movw	r22, r0
    3bb6:	b3 9f       	mul	r27, r19
    3bb8:	c0 01       	movw	r24, r0
    3bba:	a3 9f       	mul	r26, r19
    3bbc:	70 0d       	add	r23, r0
    3bbe:	81 1d       	adc	r24, r1
    3bc0:	11 24       	eor	r1, r1
    3bc2:	91 1d       	adc	r25, r1
    3bc4:	b2 9f       	mul	r27, r18
    3bc6:	70 0d       	add	r23, r0
    3bc8:	81 1d       	adc	r24, r1
    3bca:	11 24       	eor	r1, r1
    3bcc:	91 1d       	adc	r25, r1
    3bce:	08 95       	ret

00003bd0 <__prologue_saves__>:
    3bd0:	2f 92       	push	r2
    3bd2:	3f 92       	push	r3
    3bd4:	4f 92       	push	r4
    3bd6:	5f 92       	push	r5
    3bd8:	6f 92       	push	r6
    3bda:	7f 92       	push	r7
    3bdc:	8f 92       	push	r8
    3bde:	9f 92       	push	r9
    3be0:	af 92       	push	r10
    3be2:	bf 92       	push	r11
    3be4:	cf 92       	push	r12
    3be6:	df 92       	push	r13
    3be8:	ef 92       	push	r14
    3bea:	ff 92       	push	r15
    3bec:	0f 93       	push	r16
    3bee:	1f 93       	push	r17
    3bf0:	cf 93       	push	r28
    3bf2:	df 93       	push	r29
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	ca 1b       	sub	r28, r26
    3bfa:	db 0b       	sbc	r29, r27
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	f8 94       	cli
    3c00:	de bf       	out	0x3e, r29	; 62
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	cd bf       	out	0x3d, r28	; 61
    3c06:	09 94       	ijmp

00003c08 <__epilogue_restores__>:
    3c08:	2a 88       	ldd	r2, Y+18	; 0x12
    3c0a:	39 88       	ldd	r3, Y+17	; 0x11
    3c0c:	48 88       	ldd	r4, Y+16	; 0x10
    3c0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c10:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c12:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c14:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c16:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c18:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c1a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c1c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c1e:	df 80       	ldd	r13, Y+7	; 0x07
    3c20:	ee 80       	ldd	r14, Y+6	; 0x06
    3c22:	fd 80       	ldd	r15, Y+5	; 0x05
    3c24:	0c 81       	ldd	r16, Y+4	; 0x04
    3c26:	1b 81       	ldd	r17, Y+3	; 0x03
    3c28:	aa 81       	ldd	r26, Y+2	; 0x02
    3c2a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c2c:	ce 0f       	add	r28, r30
    3c2e:	d1 1d       	adc	r29, r1
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	ed 01       	movw	r28, r26
    3c3c:	08 95       	ret

00003c3e <__ftoa_engine>:
    3c3e:	28 30       	cpi	r18, 0x08	; 8
    3c40:	08 f0       	brcs	.+2      	; 0x3c44 <__ftoa_engine+0x6>
    3c42:	27 e0       	ldi	r18, 0x07	; 7
    3c44:	33 27       	eor	r19, r19
    3c46:	da 01       	movw	r26, r20
    3c48:	99 0f       	add	r25, r25
    3c4a:	31 1d       	adc	r19, r1
    3c4c:	87 fd       	sbrc	r24, 7
    3c4e:	91 60       	ori	r25, 0x01	; 1
    3c50:	00 96       	adiw	r24, 0x00	; 0
    3c52:	61 05       	cpc	r22, r1
    3c54:	71 05       	cpc	r23, r1
    3c56:	39 f4       	brne	.+14     	; 0x3c66 <__ftoa_engine+0x28>
    3c58:	32 60       	ori	r19, 0x02	; 2
    3c5a:	2e 5f       	subi	r18, 0xFE	; 254
    3c5c:	3d 93       	st	X+, r19
    3c5e:	30 e3       	ldi	r19, 0x30	; 48
    3c60:	2a 95       	dec	r18
    3c62:	e1 f7       	brne	.-8      	; 0x3c5c <__ftoa_engine+0x1e>
    3c64:	08 95       	ret
    3c66:	9f 3f       	cpi	r25, 0xFF	; 255
    3c68:	30 f0       	brcs	.+12     	; 0x3c76 <__ftoa_engine+0x38>
    3c6a:	80 38       	cpi	r24, 0x80	; 128
    3c6c:	71 05       	cpc	r23, r1
    3c6e:	61 05       	cpc	r22, r1
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <__ftoa_engine+0x36>
    3c72:	3c 5f       	subi	r19, 0xFC	; 252
    3c74:	3c 5f       	subi	r19, 0xFC	; 252
    3c76:	3d 93       	st	X+, r19
    3c78:	91 30       	cpi	r25, 0x01	; 1
    3c7a:	08 f0       	brcs	.+2      	; 0x3c7e <__ftoa_engine+0x40>
    3c7c:	80 68       	ori	r24, 0x80	; 128
    3c7e:	91 1d       	adc	r25, r1
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	1f 93       	push	r17
    3c86:	0f 93       	push	r16
    3c88:	ff 92       	push	r15
    3c8a:	ef 92       	push	r14
    3c8c:	19 2f       	mov	r17, r25
    3c8e:	98 7f       	andi	r25, 0xF8	; 248
    3c90:	96 95       	lsr	r25
    3c92:	e9 2f       	mov	r30, r25
    3c94:	96 95       	lsr	r25
    3c96:	96 95       	lsr	r25
    3c98:	e9 0f       	add	r30, r25
    3c9a:	ff 27       	eor	r31, r31
    3c9c:	e0 51       	subi	r30, 0x10	; 16
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	99 27       	eor	r25, r25
    3ca2:	33 27       	eor	r19, r19
    3ca4:	ee 24       	eor	r14, r14
    3ca6:	ff 24       	eor	r15, r15
    3ca8:	a7 01       	movw	r20, r14
    3caa:	e7 01       	movw	r28, r14
    3cac:	05 90       	lpm	r0, Z+
    3cae:	08 94       	sec
    3cb0:	07 94       	ror	r0
    3cb2:	28 f4       	brcc	.+10     	; 0x3cbe <__ftoa_engine+0x80>
    3cb4:	36 0f       	add	r19, r22
    3cb6:	e7 1e       	adc	r14, r23
    3cb8:	f8 1e       	adc	r15, r24
    3cba:	49 1f       	adc	r20, r25
    3cbc:	51 1d       	adc	r21, r1
    3cbe:	66 0f       	add	r22, r22
    3cc0:	77 1f       	adc	r23, r23
    3cc2:	88 1f       	adc	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	06 94       	lsr	r0
    3cc8:	a1 f7       	brne	.-24     	; 0x3cb2 <__ftoa_engine+0x74>
    3cca:	05 90       	lpm	r0, Z+
    3ccc:	07 94       	ror	r0
    3cce:	28 f4       	brcc	.+10     	; 0x3cda <__ftoa_engine+0x9c>
    3cd0:	e7 0e       	add	r14, r23
    3cd2:	f8 1e       	adc	r15, r24
    3cd4:	49 1f       	adc	r20, r25
    3cd6:	56 1f       	adc	r21, r22
    3cd8:	c1 1d       	adc	r28, r1
    3cda:	77 0f       	add	r23, r23
    3cdc:	88 1f       	adc	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	66 1f       	adc	r22, r22
    3ce2:	06 94       	lsr	r0
    3ce4:	a1 f7       	brne	.-24     	; 0x3cce <__ftoa_engine+0x90>
    3ce6:	05 90       	lpm	r0, Z+
    3ce8:	07 94       	ror	r0
    3cea:	28 f4       	brcc	.+10     	; 0x3cf6 <__ftoa_engine+0xb8>
    3cec:	f8 0e       	add	r15, r24
    3cee:	49 1f       	adc	r20, r25
    3cf0:	56 1f       	adc	r21, r22
    3cf2:	c7 1f       	adc	r28, r23
    3cf4:	d1 1d       	adc	r29, r1
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	66 1f       	adc	r22, r22
    3cfc:	77 1f       	adc	r23, r23
    3cfe:	06 94       	lsr	r0
    3d00:	a1 f7       	brne	.-24     	; 0x3cea <__ftoa_engine+0xac>
    3d02:	05 90       	lpm	r0, Z+
    3d04:	07 94       	ror	r0
    3d06:	20 f4       	brcc	.+8      	; 0x3d10 <__ftoa_engine+0xd2>
    3d08:	49 0f       	add	r20, r25
    3d0a:	56 1f       	adc	r21, r22
    3d0c:	c7 1f       	adc	r28, r23
    3d0e:	d8 1f       	adc	r29, r24
    3d10:	99 0f       	add	r25, r25
    3d12:	66 1f       	adc	r22, r22
    3d14:	77 1f       	adc	r23, r23
    3d16:	88 1f       	adc	r24, r24
    3d18:	06 94       	lsr	r0
    3d1a:	a9 f7       	brne	.-22     	; 0x3d06 <__ftoa_engine+0xc8>
    3d1c:	84 91       	lpm	r24, Z
    3d1e:	10 95       	com	r17
    3d20:	17 70       	andi	r17, 0x07	; 7
    3d22:	41 f0       	breq	.+16     	; 0x3d34 <__ftoa_engine+0xf6>
    3d24:	d6 95       	lsr	r29
    3d26:	c7 95       	ror	r28
    3d28:	57 95       	ror	r21
    3d2a:	47 95       	ror	r20
    3d2c:	f7 94       	ror	r15
    3d2e:	e7 94       	ror	r14
    3d30:	1a 95       	dec	r17
    3d32:	c1 f7       	brne	.-16     	; 0x3d24 <__ftoa_engine+0xe6>
    3d34:	e6 e9       	ldi	r30, 0x96	; 150
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	68 94       	set
    3d3a:	15 90       	lpm	r1, Z+
    3d3c:	15 91       	lpm	r17, Z+
    3d3e:	35 91       	lpm	r19, Z+
    3d40:	65 91       	lpm	r22, Z+
    3d42:	95 91       	lpm	r25, Z+
    3d44:	05 90       	lpm	r0, Z+
    3d46:	7f e2       	ldi	r23, 0x2F	; 47
    3d48:	73 95       	inc	r23
    3d4a:	e1 18       	sub	r14, r1
    3d4c:	f1 0a       	sbc	r15, r17
    3d4e:	43 0b       	sbc	r20, r19
    3d50:	56 0b       	sbc	r21, r22
    3d52:	c9 0b       	sbc	r28, r25
    3d54:	d0 09       	sbc	r29, r0
    3d56:	c0 f7       	brcc	.-16     	; 0x3d48 <__ftoa_engine+0x10a>
    3d58:	e1 0c       	add	r14, r1
    3d5a:	f1 1e       	adc	r15, r17
    3d5c:	43 1f       	adc	r20, r19
    3d5e:	56 1f       	adc	r21, r22
    3d60:	c9 1f       	adc	r28, r25
    3d62:	d0 1d       	adc	r29, r0
    3d64:	7e f4       	brtc	.+30     	; 0x3d84 <__ftoa_engine+0x146>
    3d66:	70 33       	cpi	r23, 0x30	; 48
    3d68:	11 f4       	brne	.+4      	; 0x3d6e <__ftoa_engine+0x130>
    3d6a:	8a 95       	dec	r24
    3d6c:	e6 cf       	rjmp	.-52     	; 0x3d3a <__ftoa_engine+0xfc>
    3d6e:	e8 94       	clt
    3d70:	01 50       	subi	r16, 0x01	; 1
    3d72:	30 f0       	brcs	.+12     	; 0x3d80 <__ftoa_engine+0x142>
    3d74:	08 0f       	add	r16, r24
    3d76:	0a f4       	brpl	.+2      	; 0x3d7a <__ftoa_engine+0x13c>
    3d78:	00 27       	eor	r16, r16
    3d7a:	02 17       	cp	r16, r18
    3d7c:	08 f4       	brcc	.+2      	; 0x3d80 <__ftoa_engine+0x142>
    3d7e:	20 2f       	mov	r18, r16
    3d80:	23 95       	inc	r18
    3d82:	02 2f       	mov	r16, r18
    3d84:	7a 33       	cpi	r23, 0x3A	; 58
    3d86:	28 f0       	brcs	.+10     	; 0x3d92 <__ftoa_engine+0x154>
    3d88:	79 e3       	ldi	r23, 0x39	; 57
    3d8a:	7d 93       	st	X+, r23
    3d8c:	2a 95       	dec	r18
    3d8e:	e9 f7       	brne	.-6      	; 0x3d8a <__ftoa_engine+0x14c>
    3d90:	10 c0       	rjmp	.+32     	; 0x3db2 <__ftoa_engine+0x174>
    3d92:	7d 93       	st	X+, r23
    3d94:	2a 95       	dec	r18
    3d96:	89 f6       	brne	.-94     	; 0x3d3a <__ftoa_engine+0xfc>
    3d98:	06 94       	lsr	r0
    3d9a:	97 95       	ror	r25
    3d9c:	67 95       	ror	r22
    3d9e:	37 95       	ror	r19
    3da0:	17 95       	ror	r17
    3da2:	17 94       	ror	r1
    3da4:	e1 18       	sub	r14, r1
    3da6:	f1 0a       	sbc	r15, r17
    3da8:	43 0b       	sbc	r20, r19
    3daa:	56 0b       	sbc	r21, r22
    3dac:	c9 0b       	sbc	r28, r25
    3dae:	d0 09       	sbc	r29, r0
    3db0:	98 f0       	brcs	.+38     	; 0x3dd8 <__ftoa_engine+0x19a>
    3db2:	23 95       	inc	r18
    3db4:	7e 91       	ld	r23, -X
    3db6:	73 95       	inc	r23
    3db8:	7a 33       	cpi	r23, 0x3A	; 58
    3dba:	08 f0       	brcs	.+2      	; 0x3dbe <__ftoa_engine+0x180>
    3dbc:	70 e3       	ldi	r23, 0x30	; 48
    3dbe:	7c 93       	st	X, r23
    3dc0:	20 13       	cpse	r18, r16
    3dc2:	b8 f7       	brcc	.-18     	; 0x3db2 <__ftoa_engine+0x174>
    3dc4:	7e 91       	ld	r23, -X
    3dc6:	70 61       	ori	r23, 0x10	; 16
    3dc8:	7d 93       	st	X+, r23
    3dca:	30 f0       	brcs	.+12     	; 0x3dd8 <__ftoa_engine+0x19a>
    3dcc:	83 95       	inc	r24
    3dce:	71 e3       	ldi	r23, 0x31	; 49
    3dd0:	7d 93       	st	X+, r23
    3dd2:	70 e3       	ldi	r23, 0x30	; 48
    3dd4:	2a 95       	dec	r18
    3dd6:	e1 f7       	brne	.-8      	; 0x3dd0 <__ftoa_engine+0x192>
    3dd8:	11 24       	eor	r1, r1
    3dda:	ef 90       	pop	r14
    3ddc:	ff 90       	pop	r15
    3dde:	0f 91       	pop	r16
    3de0:	1f 91       	pop	r17
    3de2:	cf 91       	pop	r28
    3de4:	df 91       	pop	r29
    3de6:	99 27       	eor	r25, r25
    3de8:	87 fd       	sbrc	r24, 7
    3dea:	90 95       	com	r25
    3dec:	08 95       	ret

00003dee <strnlen_P>:
    3dee:	fc 01       	movw	r30, r24
    3df0:	05 90       	lpm	r0, Z+
    3df2:	61 50       	subi	r22, 0x01	; 1
    3df4:	70 40       	sbci	r23, 0x00	; 0
    3df6:	01 10       	cpse	r0, r1
    3df8:	d8 f7       	brcc	.-10     	; 0x3df0 <strnlen_P+0x2>
    3dfa:	80 95       	com	r24
    3dfc:	90 95       	com	r25
    3dfe:	8e 0f       	add	r24, r30
    3e00:	9f 1f       	adc	r25, r31
    3e02:	08 95       	ret

00003e04 <strnlen>:
    3e04:	fc 01       	movw	r30, r24
    3e06:	61 50       	subi	r22, 0x01	; 1
    3e08:	70 40       	sbci	r23, 0x00	; 0
    3e0a:	01 90       	ld	r0, Z+
    3e0c:	01 10       	cpse	r0, r1
    3e0e:	d8 f7       	brcc	.-10     	; 0x3e06 <strnlen+0x2>
    3e10:	80 95       	com	r24
    3e12:	90 95       	com	r25
    3e14:	8e 0f       	add	r24, r30
    3e16:	9f 1f       	adc	r25, r31
    3e18:	08 95       	ret

00003e1a <fputc>:
    3e1a:	0f 93       	push	r16
    3e1c:	1f 93       	push	r17
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	fb 01       	movw	r30, r22
    3e24:	23 81       	ldd	r18, Z+3	; 0x03
    3e26:	21 fd       	sbrc	r18, 1
    3e28:	03 c0       	rjmp	.+6      	; 0x3e30 <fputc+0x16>
    3e2a:	8f ef       	ldi	r24, 0xFF	; 255
    3e2c:	9f ef       	ldi	r25, 0xFF	; 255
    3e2e:	2c c0       	rjmp	.+88     	; 0x3e88 <fputc+0x6e>
    3e30:	22 ff       	sbrs	r18, 2
    3e32:	16 c0       	rjmp	.+44     	; 0x3e60 <fputc+0x46>
    3e34:	46 81       	ldd	r20, Z+6	; 0x06
    3e36:	57 81       	ldd	r21, Z+7	; 0x07
    3e38:	24 81       	ldd	r18, Z+4	; 0x04
    3e3a:	35 81       	ldd	r19, Z+5	; 0x05
    3e3c:	42 17       	cp	r20, r18
    3e3e:	53 07       	cpc	r21, r19
    3e40:	44 f4       	brge	.+16     	; 0x3e52 <fputc+0x38>
    3e42:	a0 81       	ld	r26, Z
    3e44:	b1 81       	ldd	r27, Z+1	; 0x01
    3e46:	9d 01       	movw	r18, r26
    3e48:	2f 5f       	subi	r18, 0xFF	; 255
    3e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e4c:	31 83       	std	Z+1, r19	; 0x01
    3e4e:	20 83       	st	Z, r18
    3e50:	8c 93       	st	X, r24
    3e52:	26 81       	ldd	r18, Z+6	; 0x06
    3e54:	37 81       	ldd	r19, Z+7	; 0x07
    3e56:	2f 5f       	subi	r18, 0xFF	; 255
    3e58:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5a:	37 83       	std	Z+7, r19	; 0x07
    3e5c:	26 83       	std	Z+6, r18	; 0x06
    3e5e:	14 c0       	rjmp	.+40     	; 0x3e88 <fputc+0x6e>
    3e60:	8b 01       	movw	r16, r22
    3e62:	ec 01       	movw	r28, r24
    3e64:	fb 01       	movw	r30, r22
    3e66:	00 84       	ldd	r0, Z+8	; 0x08
    3e68:	f1 85       	ldd	r31, Z+9	; 0x09
    3e6a:	e0 2d       	mov	r30, r0
    3e6c:	09 95       	icall
    3e6e:	89 2b       	or	r24, r25
    3e70:	e1 f6       	brne	.-72     	; 0x3e2a <fputc+0x10>
    3e72:	d8 01       	movw	r26, r16
    3e74:	16 96       	adiw	r26, 0x06	; 6
    3e76:	8d 91       	ld	r24, X+
    3e78:	9c 91       	ld	r25, X
    3e7a:	17 97       	sbiw	r26, 0x07	; 7
    3e7c:	01 96       	adiw	r24, 0x01	; 1
    3e7e:	17 96       	adiw	r26, 0x07	; 7
    3e80:	9c 93       	st	X, r25
    3e82:	8e 93       	st	-X, r24
    3e84:	16 97       	sbiw	r26, 0x06	; 6
    3e86:	ce 01       	movw	r24, r28
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	1f 91       	pop	r17
    3e8e:	0f 91       	pop	r16
    3e90:	08 95       	ret

00003e92 <sprintf>:
    3e92:	ae e0       	ldi	r26, 0x0E	; 14
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	ef e4       	ldi	r30, 0x4F	; 79
    3e98:	ff e1       	ldi	r31, 0x1F	; 31
    3e9a:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <__prologue_saves__+0x1c>
    3e9e:	0d 89       	ldd	r16, Y+21	; 0x15
    3ea0:	1e 89       	ldd	r17, Y+22	; 0x16
    3ea2:	86 e0       	ldi	r24, 0x06	; 6
    3ea4:	8c 83       	std	Y+4, r24	; 0x04
    3ea6:	1a 83       	std	Y+2, r17	; 0x02
    3ea8:	09 83       	std	Y+1, r16	; 0x01
    3eaa:	8f ef       	ldi	r24, 0xFF	; 255
    3eac:	9f e7       	ldi	r25, 0x7F	; 127
    3eae:	9e 83       	std	Y+6, r25	; 0x06
    3eb0:	8d 83       	std	Y+5, r24	; 0x05
    3eb2:	ae 01       	movw	r20, r28
    3eb4:	47 5e       	subi	r20, 0xE7	; 231
    3eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb8:	6f 89       	ldd	r22, Y+23	; 0x17
    3eba:	78 8d       	ldd	r23, Y+24	; 0x18
    3ebc:	ce 01       	movw	r24, r28
    3ebe:	01 96       	adiw	r24, 0x01	; 1
    3ec0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <vfprintf>
    3ec4:	ef 81       	ldd	r30, Y+7	; 0x07
    3ec6:	f8 85       	ldd	r31, Y+8	; 0x08
    3ec8:	e0 0f       	add	r30, r16
    3eca:	f1 1f       	adc	r31, r17
    3ecc:	10 82       	st	Z, r1
    3ece:	2e 96       	adiw	r28, 0x0e	; 14
    3ed0:	e4 e0       	ldi	r30, 0x04	; 4
    3ed2:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__epilogue_restores__+0x1c>

00003ed6 <__ultoa_invert>:
    3ed6:	fa 01       	movw	r30, r20
    3ed8:	aa 27       	eor	r26, r26
    3eda:	28 30       	cpi	r18, 0x08	; 8
    3edc:	51 f1       	breq	.+84     	; 0x3f32 <__ultoa_invert+0x5c>
    3ede:	20 31       	cpi	r18, 0x10	; 16
    3ee0:	81 f1       	breq	.+96     	; 0x3f42 <__ultoa_invert+0x6c>
    3ee2:	e8 94       	clt
    3ee4:	6f 93       	push	r22
    3ee6:	6e 7f       	andi	r22, 0xFE	; 254
    3ee8:	6e 5f       	subi	r22, 0xFE	; 254
    3eea:	7f 4f       	sbci	r23, 0xFF	; 255
    3eec:	8f 4f       	sbci	r24, 0xFF	; 255
    3eee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef0:	af 4f       	sbci	r26, 0xFF	; 255
    3ef2:	b1 e0       	ldi	r27, 0x01	; 1
    3ef4:	3e d0       	rcall	.+124    	; 0x3f72 <__ultoa_invert+0x9c>
    3ef6:	b4 e0       	ldi	r27, 0x04	; 4
    3ef8:	3c d0       	rcall	.+120    	; 0x3f72 <__ultoa_invert+0x9c>
    3efa:	67 0f       	add	r22, r23
    3efc:	78 1f       	adc	r23, r24
    3efe:	89 1f       	adc	r24, r25
    3f00:	9a 1f       	adc	r25, r26
    3f02:	a1 1d       	adc	r26, r1
    3f04:	68 0f       	add	r22, r24
    3f06:	79 1f       	adc	r23, r25
    3f08:	8a 1f       	adc	r24, r26
    3f0a:	91 1d       	adc	r25, r1
    3f0c:	a1 1d       	adc	r26, r1
    3f0e:	6a 0f       	add	r22, r26
    3f10:	71 1d       	adc	r23, r1
    3f12:	81 1d       	adc	r24, r1
    3f14:	91 1d       	adc	r25, r1
    3f16:	a1 1d       	adc	r26, r1
    3f18:	20 d0       	rcall	.+64     	; 0x3f5a <__ultoa_invert+0x84>
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <__ultoa_invert+0x48>
    3f1c:	68 94       	set
    3f1e:	3f 91       	pop	r19
    3f20:	2a e0       	ldi	r18, 0x0A	; 10
    3f22:	26 9f       	mul	r18, r22
    3f24:	11 24       	eor	r1, r1
    3f26:	30 19       	sub	r19, r0
    3f28:	30 5d       	subi	r19, 0xD0	; 208
    3f2a:	31 93       	st	Z+, r19
    3f2c:	de f6       	brtc	.-74     	; 0x3ee4 <__ultoa_invert+0xe>
    3f2e:	cf 01       	movw	r24, r30
    3f30:	08 95       	ret
    3f32:	46 2f       	mov	r20, r22
    3f34:	47 70       	andi	r20, 0x07	; 7
    3f36:	40 5d       	subi	r20, 0xD0	; 208
    3f38:	41 93       	st	Z+, r20
    3f3a:	b3 e0       	ldi	r27, 0x03	; 3
    3f3c:	0f d0       	rcall	.+30     	; 0x3f5c <__ultoa_invert+0x86>
    3f3e:	c9 f7       	brne	.-14     	; 0x3f32 <__ultoa_invert+0x5c>
    3f40:	f6 cf       	rjmp	.-20     	; 0x3f2e <__ultoa_invert+0x58>
    3f42:	46 2f       	mov	r20, r22
    3f44:	4f 70       	andi	r20, 0x0F	; 15
    3f46:	40 5d       	subi	r20, 0xD0	; 208
    3f48:	4a 33       	cpi	r20, 0x3A	; 58
    3f4a:	18 f0       	brcs	.+6      	; 0x3f52 <__ultoa_invert+0x7c>
    3f4c:	49 5d       	subi	r20, 0xD9	; 217
    3f4e:	31 fd       	sbrc	r19, 1
    3f50:	40 52       	subi	r20, 0x20	; 32
    3f52:	41 93       	st	Z+, r20
    3f54:	02 d0       	rcall	.+4      	; 0x3f5a <__ultoa_invert+0x84>
    3f56:	a9 f7       	brne	.-22     	; 0x3f42 <__ultoa_invert+0x6c>
    3f58:	ea cf       	rjmp	.-44     	; 0x3f2e <__ultoa_invert+0x58>
    3f5a:	b4 e0       	ldi	r27, 0x04	; 4
    3f5c:	a6 95       	lsr	r26
    3f5e:	97 95       	ror	r25
    3f60:	87 95       	ror	r24
    3f62:	77 95       	ror	r23
    3f64:	67 95       	ror	r22
    3f66:	ba 95       	dec	r27
    3f68:	c9 f7       	brne	.-14     	; 0x3f5c <__ultoa_invert+0x86>
    3f6a:	00 97       	sbiw	r24, 0x00	; 0
    3f6c:	61 05       	cpc	r22, r1
    3f6e:	71 05       	cpc	r23, r1
    3f70:	08 95       	ret
    3f72:	9b 01       	movw	r18, r22
    3f74:	ac 01       	movw	r20, r24
    3f76:	0a 2e       	mov	r0, r26
    3f78:	06 94       	lsr	r0
    3f7a:	57 95       	ror	r21
    3f7c:	47 95       	ror	r20
    3f7e:	37 95       	ror	r19
    3f80:	27 95       	ror	r18
    3f82:	ba 95       	dec	r27
    3f84:	c9 f7       	brne	.-14     	; 0x3f78 <__ultoa_invert+0xa2>
    3f86:	62 0f       	add	r22, r18
    3f88:	73 1f       	adc	r23, r19
    3f8a:	84 1f       	adc	r24, r20
    3f8c:	95 1f       	adc	r25, r21
    3f8e:	a0 1d       	adc	r26, r0
    3f90:	08 95       	ret

00003f92 <_exit>:
    3f92:	f8 94       	cli

00003f94 <__stop_program>:
    3f94:	ff cf       	rjmp	.-2      	; 0x3f94 <__stop_program>
